import{_ as e,r as o,o as l,c,b as n,d as s,e as p,a as t}from"./app-168a97af.js";const i="/vuepress_blog/assets/1-aafcdbbe.png",u="/vuepress_blog/assets/2-657d7518.png",r="/vuepress_blog/assets/3-cf6eece1.png",k={},d=t(`<h1 id="mysql数据库" tabindex="-1"><a class="header-anchor" href="#mysql数据库" aria-hidden="true">#</a> MySQL数据库</h1><h2 id="数据库概要" tabindex="-1"><a class="header-anchor" href="#数据库概要" aria-hidden="true">#</a> 数据库概要</h2><p><strong>数据库：持久的数据储存(数据存储在硬盘中)，备份和恢复数据，快速的存取数据，控制权限</strong></p><ul><li>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库</li><li>每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据</li><li>我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢</li><li>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据</li><li>RDBMS 即关系数据库管理系统(Relational Database Management System)的特点： <ul><li>数据以表格的形式出现</li><li>每行为各种记录名称</li><li>每列为记录名称所对应的数据域</li><li>许多的行和列组成一张表单</li><li>若干的表单组成database</li></ul></li></ul><h2 id="数据库的类型" tabindex="-1"><a class="header-anchor" href="#数据库的类型" aria-hidden="true">#</a> 数据库的类型</h2><ul><li>关系型数据库： <ul><li>特点：以表和表的关联构成的数据结构</li><li>优点：能表达复杂的数据关系，强大的查询语言能精确查找到想要读写的数据</li><li>缺点：读写性能比较差，尤其是海量数据的读写；数据结构比较死板</li><li>用途：存储结构复杂的数据</li><li>目前主流关系型数据库：Oracle、MySQL、SQL Server</li></ul></li><li>非关系型数据库： <ul><li>特点：以极其简单的结构存储数据，文档型，键值对存储</li><li>优点：格式灵活，海量数据存储读写效率高</li><li>缺点：难以表示复杂的数据结构，对于复杂查询效率不好</li><li>用途：存储结构简单的数据</li><li>目前主流的非关系型数据库：MongoDB、Redis、Membase</li></ul></li><li>面向对象数据库</li></ul><h2 id="数据库术语" tabindex="-1"><a class="header-anchor" href="#数据库术语" aria-hidden="true">#</a> 数据库术语</h2><ul><li>DB：database    数据库</li><li>DBA：database administrator     数据库管理员</li><li>DBMS：database management system    数据库管理系统</li><li>DBS：database system    数据库系统，DBS包含DB、DBA、DBMS</li></ul><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h2><p>关系型数据库，原瑞典MySQL AB公司开发，已被Oracle收购，具有开源、轻量、快速的特点</p><h2 id="mysql使用" tabindex="-1"><a class="header-anchor" href="#mysql使用" aria-hidden="true">#</a> MySQL使用</h2><ul><li>mysql -uroot -p：输入密码登入连接数据库，进入mysql命令交互</li><li>show variables like &#39;character_set_%&#39;：查看当前数据库字符编码</li><li>修改my.ini文件中的默认字符编码：C:\\ProgramData\\MySQL\\MySQL Server 8.0</li><li>net stop mysql80    net start mysql80</li><li>show databases：查看当前拥有的数据库</li><li>可以下载navicat数据库管理和设计工具，更方便</li></ul><h2 id="mysql数据库设计" tabindex="-1"><a class="header-anchor" href="#mysql数据库设计" aria-hidden="true">#</a> MySQL数据库设计</h2><ul><li>Structured Query Language 结构化查询语言，大部分关系型数据，拥有着基本一致的SQL语法 <ul><li>DDL：Data Definition Language 数据定义语言，操作数据库对象：库、表、视图、存储过程</li><li>DML：Data Manipulation Language 数据操控语言，操作数据库中的记录</li><li>DCL：Data Control Language 数据控制语句，操作用户权限</li></ul></li><li>管理库： <ul><li>创建库</li><li>创建当前库</li><li>删除库</li></ul></li><li>管理表： <ul><li>创建表： 字段 ： <ul><li>字段名</li><li>字段类型： <ul><li>bit：占1位，0或1，false或true</li><li>int：占32位，整数</li><li>decimal(M,N)：能精确计算的实数，M是总的数字位数，N是小数位数</li><li>char(n)：固定长度位n的字符</li><li>varchar(n)：长度可变，最大长度位n的字符</li><li>text：大量的字符</li><li>date：仅日期</li><li>datetime：日期和时间</li><li>time：仅时间</li></ul></li><li>是不是null(是否必填)</li><li>自增</li><li>默认值</li></ul></li><li>修改表</li><li>删除表</li></ul></li><li>主键和外键 <ul><li>主键：根据设计原则，每张表都要有主键，主键必须满足：唯一、不能更改、无业务含义</li><li>外键：用于产生表关系的列，外键列会连接到另一张表（或自己）的主键</li></ul></li><li>表关系： <ul><li>一对一：一个A对应一个B，一个B对应一个A，例如：用户和用户信息，把任意一张表的主键同时设置为外键</li><li>一对多：一个A对应多个B，一个B对应一个A，A和B是一对多，B和A是多对一，例如：班级和学生，用户和文章，在多一端的表上设置外键，对应到另一张表的主键</li><li>多对多：一个A对应多个B，一个B对应多个A，例如：学生和老师，需要新建一张关系表，关系表至少包含两个外键，分别对应到两张表</li></ul></li><li>三大设计范式： <ul><li>要求数据库表的每一列都是不可分割的原子数据项</li><li>非主键列必须依赖于主键列</li><li>非主键列必须直接依赖主键列</li></ul></li></ul><h2 id="表记录的增删改查" tabindex="-1"><a class="header-anchor" href="#表记录的增删改查" aria-hidden="true">#</a> 表记录的增删改查</h2><ul><li>DML：Data Manipulation Language 数据操控语言</li><li>CRUD：增 CREATE</li><li>查 Retrieve</li><li>改 UPDATE</li><li>删 DELETE</li></ul><p><code>INSERT INTO </code>studentdata<code>(</code>name<code>,age,sex) VALUES(&#39;小张&#39;,20,DEFAULT),(&#39;小王&#39;,20,DEFAULT);</code><code>UPDATE studentdata SET </code>name<code>=&#39;王小明&#39; WHERE name=&#39;小明&#39;;</code><code>DELETE FROM studentdata WHERE </code>name<code>=&#39;小王&#39;;</code></p><h3 id="表单基本查询" tabindex="-1"><a class="header-anchor" href="#表单基本查询" aria-hidden="true">#</a> 表单基本查询</h3><ul><li>select</li><li>from</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>    <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> loginid<span class="token punctuation">,</span> loginpwd<span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">as</span> <span class="token string">&#39;额外的一列&#39;</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> ismale <span class="token string">&#39;性别&#39;</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>employee<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">as</span> <span class="token string">&#39;extra&#39;</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>employee<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> 
    <span class="token keyword">case</span> ismale
    <span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span>
    <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span>
    <span class="token keyword">end</span> sex<span class="token punctuation">,</span> 
    salary 
    <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> 
    <span class="token keyword">case</span>
    <span class="token keyword">when</span> ismale <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span>
    <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span>
    <span class="token keyword">end</span> sex<span class="token punctuation">,</span> 
    <span class="token keyword">case</span>
    <span class="token keyword">when</span> salary<span class="token operator">&gt;=</span><span class="token number">10000</span> <span class="token keyword">then</span> <span class="token string">&#39;高&#39;</span>
    <span class="token keyword">when</span> salary<span class="token operator">&gt;=</span><span class="token number">5000</span> <span class="token keyword">then</span> <span class="token string">&#39;中&#39;</span>
    <span class="token keyword">else</span> <span class="token string">&#39;低&#39;</span>
    <span class="token keyword">end</span> <span class="token identifier"><span class="token punctuation">\`</span>level<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>
    salary
    <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> location <span class="token keyword">from</span> employee<span class="token punctuation">;</span> <span class="token comment">--去重</span>

    <span class="token keyword">SELECT</span> location <span class="token keyword">from</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> location<span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> location <span class="token keyword">from</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> location<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>where：=、in、is、is not、&gt; &lt; &gt;= &lt;=、between、like、and、or</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee
    <span class="token keyword">WHERE</span> ismale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> department
    <span class="token keyword">WHERE</span> companyId <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> location <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> location <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> salary<span class="token operator">&gt;=</span><span class="token number">10000</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> salary <span class="token operator">BETWEEN</span> <span class="token number">10000</span> <span class="token operator">and</span> <span class="token number">12000</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;%袁%&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;袁_&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span> <span class="token operator">and</span> ismale<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">and</span> salary<span class="token operator">&gt;=</span><span class="token number">12000</span><span class="token punctuation">;</span>

    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span>ismale<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">and</span> salary<span class="token operator">&gt;=</span><span class="token number">12000</span>
    <span class="token operator">or</span>
    birthday<span class="token operator">&gt;=</span><span class="token string">&#39;1996-1-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>order by: asc、desc</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>    <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">case</span> ismale
    <span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span>
    <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span>
    <span class="token keyword">end</span> sex <span class="token keyword">from</span> employee
    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sex <span class="token keyword">asc</span><span class="token punctuation">,</span> salary <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token comment">--筛选</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>limit n,m 跳过n条数据，取出m条数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
    <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行顺序：from、where、select、order by、limit</li></ul><h3 id="联表查询" tabindex="-1"><a class="header-anchor" href="#联表查询" aria-hidden="true">#</a> 联表查询</h3><ul><li>笛卡尔积：查出两张表的集合</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>   <span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>name 主场<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>name 客场 
   <span class="token keyword">FROM</span> team <span class="token keyword">as</span> t1<span class="token punctuation">,</span> team <span class="token keyword">as</span> t2
   <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">!=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>左连接，左外连接，left join</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>   <span class="token keyword">SELECT</span> <span class="token operator">*</span> 
   <span class="token keyword">from</span> department <span class="token keyword">as</span> d <span class="token keyword">left</span> <span class="token keyword">join</span> employee <span class="token keyword">as</span> e
   <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>

   <span class="token keyword">SELECT</span> <span class="token operator">*</span>
   <span class="token keyword">from</span> department <span class="token keyword">as</span> d <span class="token keyword">left</span> <span class="token keyword">join</span> employee <span class="token keyword">as</span> e 
   <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
   <span class="token keyword">where</span> salary<span class="token operator">&gt;=</span><span class="token number">18000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>右连接，右外连接，right join</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>   <span class="token keyword">SELECT</span> <span class="token operator">*</span>
   <span class="token keyword">from</span> employee <span class="token keyword">as</span> e <span class="token keyword">right</span> <span class="token keyword">join</span> department <span class="token keyword">as</span> d
   <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内连接，inner join</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>   <span class="token keyword">SELECT</span> <span class="token operator">*</span>
   <span class="token keyword">from</span> employee <span class="token keyword">as</span> e <span class="token keyword">inner</span> <span class="token keyword">join</span> department <span class="token keyword">as</span> d
   <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>

   <span class="token keyword">SELECT</span> e<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">as</span> empname<span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">as</span> dptname<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">as</span> companyname 
   <span class="token keyword">from</span> employee <span class="token keyword">as</span> e
   <span class="token keyword">inner</span> <span class="token keyword">join</span> department <span class="token keyword">as</span> d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
   <span class="token keyword">inner</span> <span class="token keyword">JOIN</span> company <span class="token keyword">as</span> c <span class="token keyword">on</span> d<span class="token punctuation">.</span>companyId <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数和分组" tabindex="-1"><a class="header-anchor" href="#函数和分组" aria-hidden="true">#</a> 函数和分组</h3><ul><li>函数 <ul><li>内置函数 <ul><li>数学 <ul><li>ABS(x)         返回x的绝对值</li><li>CEILING(x)     返回大于x的最小整数值</li><li>FLOOR(x)       返回小于x的最大整数值</li><li>MOD(x,y)       返回x/y的模（余数）</li><li>PI()           返回pi的值（圆周率）</li><li>RAND()         返回０到１内的随机值</li><li>ROUND(x,y)     返回参数x的四舍五入的有y位小数的值</li><li>TRUNCATE(x,y)  返回数字x截短为y位小数的结果</li></ul></li></ul></li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">SELECT</span> ABS<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">SELECT</span> CEIL<span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">SELECT</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">SELECT</span> <span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">SELECT</span> <span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> employee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  - 聚合 
     - AVG(col) 返回指定列的平均值
     - COUNT(col) 返回指定列中非NULL值的个数
     - MIN(col) 返回指定列的最小值
     - MAX(col) 返回指定列的最大值
     - SUM(col) 返回指定列的所有值之和
</code></pre><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">\`</span>avg<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> id
  <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>

  <span class="token comment">-- 查询员工数量</span>
  <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>

  <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> 员工数量<span class="token punctuation">,</span>
  <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> 平均薪资<span class="token punctuation">,</span>
  <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> 总薪资<span class="token punctuation">,</span>
  <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> 最小薪资
  <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  - 字符 
     - CONCAT(s1,s2...,sn)   将s1,s2...,sn连接成字符串
     - CONCAT_WS(sep,s1,s2...,sn)  将s1,s2...,sn连接成字符串，并用sep字符间隔
     - TRIM(str)    去除字符串首部和尾部的所有空格
     - LTRIM(str)   从字符串str中切掉开头的空格
     - RTRIM(str)   返回字符串str尾部的空格
</code></pre><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">SELECT</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>salary<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  - 日期 
     - CURDATE()或CURRENT_DATE()   返回当前的日期
     - CURTIME()或CURRENT_TIME()   返回当前的时间
     - TIMESTAMPDIFF(part,  date1,date2)    返回date1到date2之间相隔的part值，part是用于指定的相隔的年或月或日等 
        - MICROSECOND
        - SECOND
        - MINUTE
        - HOUR
        - DAY
        - WEEK
        - MONTH
        - QUARTER
        - YEAR
</code></pre><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>  <span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">SELECT</span> CURTIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">SELECT</span> TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">DAY</span><span class="token punctuation">,</span><span class="token string">&#39;2010-1-1 11:11:11&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2010-1-2 11:11:12&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> 
  TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> age
  <span class="token keyword">from</span> employee
  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义函数</li><li>分组 <ul><li>运行顺序 <ul><li>from</li><li>join ... on ...</li><li>where</li><li>group by</li><li>select</li><li>having</li><li>order by</li><li>limit</li></ul></li><li>分组后，只能查询分组的列和聚合列</li></ul></li></ul><h3 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h3><p>操作视图属于DDL，主要用于方便查询，不要用来修改数据</p><h2 id="数据驱动和orm" tabindex="-1"><a class="header-anchor" href="#数据驱动和orm" aria-hidden="true">#</a> 数据驱动和ORM</h2><h3 id="mysql驱动程序" tabindex="-1"><a class="header-anchor" href="#mysql驱动程序" aria-hidden="true">#</a> mysql驱动程序</h3>`,50),v=n("li",null,"什么是驱动程序",-1),m=n("li",null,"驱动程序是连接内存和其他存储介质的桥梁",-1),b=n("li",null,"mysql驱动程序是连接内存数据和mysql数据的桥梁",-1),y=n("li",null,"mysql",-1),g=n("li",null,"mysql2   mysql-native",-1),w={href:"https://github.com/sidorares/node-mysql2#readme",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql2/promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//异步创建数据库连接</span>
   <span class="token comment">//创建一个数据库连接</span>
   <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;******&#39;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;databasetest&#39;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM \`company\`;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;insert into company(\`name\`,location,buildDate) values(&#39;abbc&#39;, &#39;阿萨德&#39;, curdate());&quot;</span><span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
     connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>防止sql注入，使用execute运行sql语句而不是query，并使用数据连接池：mysql.createPool创建连接，连接池里有限制，一次只能存放一定数量的连接，其他连接等待有位置 <ul><li>sql注入 用户通过注入sql语句到最终查询中，导致了整个sql与预期行为不符</li><li>mysql支持变量 变量的内容不作为任何sql关键字</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql2/promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">//创建一个数据库连接池</span>
     <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;******&#39;</span><span class="token punctuation">,</span>
     <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;databasetest&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> sql <span class="token operator">=</span>  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from employee where \\\`name\\\` like concat(&#39;%&#39;, ?, &#39;%&#39;) ;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
     <span class="token keyword">const</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
     pool<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sequelize" tabindex="-1"><a class="header-anchor" href="#sequelize" aria-hidden="true">#</a> Sequelize</h3><ul><li>ORM <ul><li>Object Relational Mapping 对象关系映射</li><li>通过ORM框架，可以自动的把程序中的对象和数据库关联</li><li>ORM框架会隐藏具体的数据库底层细节，让开发者使用同样的数据操作接口，完成对不同数据库的操作，见源码中的「ORM原理图」</li><li>ORM的优势 <ul><li>开发者不用关心数据库，仅需关心对象</li><li>可轻易的完成数据库的移植</li><li>无须拼接复杂的sql语句即可完成精确查询 <img src="`+i+'" alt="image.png"></li></ul></li></ul></li><li>Node中的ORM <ul><li>Sequelize JS TS 成熟框架</li><li>TypeORM TS 不成熟</li></ul></li></ul><h4 id="模型定义和同步" tabindex="-1"><a class="header-anchor" href="#模型定义和同步" aria-hidden="true">#</a> 模型定义和同步</h4>',6),h={href:"https://github.com/demopark/sequelize-docs-Zh-CN",target:"_blank",rel:"noopener noreferrer"},f=t(`<ul><li>案例：学校数据库 管理员 id 账号 密码 姓名 班级 id 名称 开班时间 学生 id 姓名 出生日期 性别 联系电话 所属班级 书籍 id 名称 图片 出版时间 作者</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&quot;myschooldb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;******&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">//连接数据库</span>
       <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localHost&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">dialect</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">logging</span><span class="token operator">:</span> <span class="token keyword">null</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sequelize<span class="token punctuation">;</span>

   <span class="token comment">//Class举例</span>
   <span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> <span class="token punctuation">{</span> DataTypes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//类型属性</span>
   <span class="token keyword">const</span> Student <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> Class <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>
     <span class="token string">&quot;Class&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//表名</span>
     <span class="token punctuation">{</span> <span class="token comment">//定义模型属性</span>
       <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>  
         <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
         <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//默认为true</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token literal-property property">openDate</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span>
         <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
       <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
       <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
       <span class="token literal-property property">paranoid</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
   Class<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Class里包含学生</span>
   module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Class<span class="token punctuation">;</span>

   <span class="token comment">// 同步所有模型</span>
   <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   sequelize<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">alter</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">//模型与数据库同步</span>
   <span class="token comment">//User.sync() - 如果表不存在,则创建该表(如果已经存在,则不执行任何操作)</span>
   <span class="token comment">//User.sync({ force: true }) - 将创建表,如果表已经存在,则将其首先删除</span>
   <span class="token comment">//User.sync({ alter: true }) - 这将检查数据库中表的当前状态(它具有哪些列,它们的数据类型等),然后在表中进行必要的更改以使其与模型匹配.</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;所有模型同步完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型的增刪改" tabindex="-1"><a class="header-anchor" href="#模型的增刪改" aria-hidden="true">#</a> 模型的增刪改</h3><ul><li>刪除</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token comment">// 管理员初始化</span>
   <span class="token comment">// 判断数据库中是否有管理员，如果没有，自动添加一个默认管理员</span>
   <span class="token keyword">const</span> Admin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   exports<span class="token punctuation">.</span><span class="token function-variable function">addAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">adminObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 应该判断adminObj的各种属性是否合理，以及账号是否已存在</span>
     <span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> ins<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
   exports<span class="token punctuation">.</span><span class="token function-variable function">deleteAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">adminId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 方式1</span>
     <span class="token comment">//   // 1.得到实例</span>
     <span class="token comment">//   const ins = await Admin.findByPk(adminId);</span>
     <span class="token comment">//   //   console.log(ins);</span>
     <span class="token comment">//   // 2.删除实例</span>
     <span class="token comment">//   if (ins) {</span>
     <span class="token comment">//     await ins.destroy();</span>
     <span class="token comment">//   }</span>
     <span class="token comment">// 方式2</span>
     <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">id</span><span class="token operator">:</span> adminId<span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> result<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>改</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   exports<span class="token punctuation">.</span><span class="token function-variable function">updateAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> adminObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 方式1</span>
     <span class="token comment">// // 1. 得到实例</span>
     <span class="token comment">// const ins = await Admin.findByPk(id);</span>
     <span class="token comment">// ins.loginId = adminObj.loginId;</span>
     <span class="token comment">// // 2. 保存</span>
     <span class="token comment">// ins.save();</span>
     <span class="token comment">// 方式2</span>
     <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         id<span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> result<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>增</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   exports<span class="token punctuation">.</span><span class="token function-variable function">addBook</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">await</span> Book<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> ins<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型的查询" tabindex="-1"><a class="header-anchor" href="#模型的查询" aria-hidden="true">#</a> 模型的查询</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用的时候查文档：
    Sequelize Docs 中文版：https://github.com/demopark/sequelize-docs-Zh-CN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询单个数据：findOne</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  exports<span class="token punctuation">.</span><span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">loginId<span class="token punctuation">,</span> loginPwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        loginId<span class="token punctuation">,</span>
        loginPwd<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>loginId <span class="token operator">===</span> loginId <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>loginPwd <span class="token operator">===</span> loginPwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按照主键查询单个数据：findByPK</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  exports<span class="token punctuation">.</span><span class="token function-variable function">getAdminById</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询多个数据：findAll</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  exports<span class="token punctuation">.</span><span class="token function-variable function">getAdmins</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询数量：count</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Student<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;birthdady&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    where<span class="token punctuation">,</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>Class<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit<span class="token punctuation">,</span>
    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token operator">+</span>limit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> result<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
    <span class="token literal-property property">datas</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>包含关系：include</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Student<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;birthdady&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    where<span class="token punctuation">,</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>Class<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit<span class="token punctuation">,</span>
    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token operator">+</span>limit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> result<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
    <span class="token literal-property property">datas</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数据模拟-mock" tabindex="-1"><a class="header-anchor" href="#数据模拟-mock" aria-hidden="true">#</a> 数据模拟 mock</h1>`,22),E={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mockjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> result <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     <span class="token string-property property">&quot;datas|16&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
       <span class="token punctuation">{</span>
         <span class="token string-property property">&quot;id|+1&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
         <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;前端第 @id 期&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">openDate</span><span class="token operator">:</span> <span class="token string">&quot;@date&quot;</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>datas<span class="token punctuation">;</span>
   <span class="token keyword">const</span> Class <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   Class<span class="token punctuation">.</span><span class="token function">bulkCreate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mockjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> result <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     <span class="token string-property property">&quot;datas|500-700&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
       <span class="token punctuation">{</span>
         <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;@cname&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">birthdady</span><span class="token operator">:</span> <span class="token string">&quot;@date&quot;</span><span class="token punctuation">,</span>
         <span class="token string-property property">&quot;sex|1-2&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
         <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1\\d{10}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
         <span class="token comment">//   location: &quot;@city(true)&quot;,</span>
         <span class="token string-property property">&quot;ClassId|1-16&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>datas<span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> Student <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   Student<span class="token punctuation">.</span><span class="token function">bulkCreate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="md5加密" tabindex="-1"><a class="header-anchor" href="#md5加密" aria-hidden="true">#</a> MD5加密</h1>`,2),S={href:"https://www.npmjs.com/package/md5",target:"_blank",rel:"noopener noreferrer"},T=n("ul",null,[n("li",null,[s("md5加密的特点 "),n("ul",null,[n("li",null,"hash加密算法的一种"),n("li",null,"可以将任何一个字符串，加密成一个固定长度的字符串"),n("li",null,"单向加密：只能加密无法解密"),n("li",null,"同样的源字符串加密后得到的结果固定")])])],-1),j=n("h1",{id:"moment",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#moment","aria-hidden":"true"},"#"),s(" moment")],-1),C={href:"https://momentjs.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://momentjs.cn/",target:"_blank",rel:"noopener noreferrer"},L=t('<ul><li>utc和北京时间 <ul><li>utc：世界协调时 <ul><li>以英国格林威治时间为标准</li><li>utc时间和北京时间相差8小时</li><li>utc的凌晨相当于北京时间的上午8点</li></ul></li></ul></li><li>时间戳 timestamp <ul><li>某个utc时间到utc1970-1-1凌晨经过的毫秒数</li><li>也可以是秒数，用小数部分记录毫秒</li><li>时间戳表示的是utc时间的差异</li></ul></li><li>对于服务器的影响 <ul><li>服务器可能会部署到世界的任何位置</li><li>服务器内部应该统一使用utc时间或时间戳，包括数据库</li></ul></li><li>对于客户端的影响 <ul><li><p>客户端要给不同地区的客户友好的显示时间</p></li><li><p>客户端应该把时间戳或utc时间转换为本地时间显示</p><p><img src="'+u+'" alt="image.png"></p><p><img src="'+r+`" alt="image.png"></p></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;validate.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;moment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  validate<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span>validators<span class="token punctuation">.</span>datetime<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 该函数会自动用于日期格式转换
     * 它会在验证时自动触发，它需要将任何数据转换为时间戳返回
     * 如果无法转换，返回NaN
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">value</span> 传入要转换的值
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">options</span> 针对某个属性的验证配置
     */</span>
    <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> formats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YYYY-M-D H:m:s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>dateOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YYYY-M-D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token operator">+</span>moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> formats<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 用户显示错误消息时，使用的显示字符串
     */</span>
    <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> format <span class="token operator">=</span> <span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>dateOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        format <span class="token operator">+=</span> <span class="token string">&quot; HH:mm:ss&quot;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数据验证" tabindex="-1"><a class="header-anchor" href="#数据验证" aria-hidden="true">#</a> 数据验证</h1>`,3),D=n("li",null,[s("数据验证的位置 "),n("ul",null,[n("li",null,"前端（客户端）：为了用户体验"),n("li",null,"路由层：验证接口格式是否正常"),n("li",null,"业务逻辑层：保证业务完整性"),n("li",null,"数据库验证（约束）：保证数据完整性")])],-1),R={href:"https://github.com/validatorjs/validator.js",target:"_blank",rel:"noopener noreferrer"},M={href:"http://validatejs.org/",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> rule <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">//验证规则</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">minimum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">maximum</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">birthday</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">datetime</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">dateOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">earliest</span><span class="token operator">:</span> <span class="token operator">+</span>moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">latest</span><span class="token operator">:</span> <span class="token operator">+</span>moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1\\d{10}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ClassId</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">numericality</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">onlyInteger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">classExits</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> validate<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>stuObj<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">await</span> Student<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>stuObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> ins<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="访问器和虚拟字段" tabindex="-1"><a class="header-anchor" href="#访问器和虚拟字段" aria-hidden="true">#</a> 访问器和虚拟字段</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> DataTypes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;moment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>
    <span class="token string">&quot;Student&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">birthday</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span>
        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//访问器，拿到并修改内容</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataValue</span><span class="token punctuation">(</span><span class="token string">&quot;birthday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//虚拟字段，计算得到，但初始化数据库的时候要把这一栏加上</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">VIRTUAL</span><span class="token punctuation">,</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> now <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> birth <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> now<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>birth<span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到两个日期的年份的差异</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">,</span>
        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">paranoid</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="日志记录" tabindex="-1"><a class="header-anchor" href="#日志记录" aria-hidden="true">#</a> 日志记录</h1>`,4),O={href:"https://log4js-node.github.io/log4js-node/",target:"_blank",rel:"noopener noreferrer"},N=t(`<ul><li>level：日志级别 <ul><li>例如调试日志、信息日志、错误日志等等</li><li>见源码中的示意图</li></ul></li><li>category：日志分类 <ul><li>例如：sql日志、请求日志等等</li></ul></li><li>appender：日志出口 <ul><li>应该把日志写到哪？</li><li>日志的书写格式是什么（layouts）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> log4js <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;log4js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 log4js<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">sql</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token comment">//定义一个sql日志出口</span>
       <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;dateFile&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">filename</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;logs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;logging.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token literal-property property">maxLogSize</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">//配置文件的最大字节数</span>
       <span class="token literal-property property">keepFileExt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
       <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">,</span>
         <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&quot;%c [%d{yyyy-MM-dd hh:mm:ss}] [%p]: %m%n&quot;</span><span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">sql</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//该分类使用出口sql的配置写入日志</span>
       <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   log4js<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">const</span> sqlLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> defaultLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 exports<span class="token punctuation">.</span>sqlLogger <span class="token operator">=</span> sqlLogger<span class="token punctuation">;</span>
 exports<span class="token punctuation">.</span>logger <span class="token operator">=</span> defaultLogger<span class="token punctuation">;</span>



 <span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> <span class="token punctuation">{</span> sqlLogger <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../logger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&quot;myschooldb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ybybdwyJ42.&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">dialect</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
   <span class="token function-variable function">logging</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     sqlLogger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sequelize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function I(B,U){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,n("ul",null,[v,m,b,n("li",null,[s("mysql驱动程序通常使用 "),n("ul",null,[y,g,n("li",null,[s("mysql2的使用 "),n("a",w,[s("https://github.com/sidorares/node-mysql2#readme"),p(a)])])])])]),q,n("p",null,[s("Sequelize Docs 中文版："),n("a",h,[s("https://github.com/demopark/sequelize-docs-Zh-CN"),p(a)])]),f,n("p",null,[s("查文档："),n("a",E,[s("http://mockjs.com/"),p(a)]),s(" 举例：")]),x,n("p",null,[s("查文档："),n("a",S,[s("https://www.npmjs.com/package/md5"),p(a)])]),T,j,n("p",null,[s("官网："),n("a",C,[s("https://momentjs.com/"),p(a)]),s(" 民间中文网："),n("a",_,[s("http://momentjs.cn/"),p(a)])]),L,n("ul",null,[D,n("li",null,[s("相关库---查文档 "),n("ul",null,[n("li",null,[s("validator："),n("a",R,[s("https://github.com/validatorjs/validator.js"),p(a)]),s(" 用于验证某个字符串是否满足某个规则")]),n("li",null,[s("validate.js(推荐)："),n("a",M,[s("http://validatejs.org/"),p(a)]),s(" 用于验证某个对象的树形是否满足某些规则")])])])]),A,n("p",null,[s("常用库：log4js："),n("a",O,[s("https://log4js-node.github.io/log4js-node/"),p(a)]),s("     查文档")]),N])}const Y=e(k,[["render",I],["__file","mysql学习.html.vue"]]);export{Y as default};
