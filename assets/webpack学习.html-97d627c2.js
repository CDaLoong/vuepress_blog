import{_ as t,r as o,o as l,c,b as n,d as s,e,a as p}from"./app-168a97af.js";const i="/vuepress_blog/assets/1-12d761e9.png",r="/vuepress_blog/assets/2-bef97d92.png",u="/vuepress_blog/assets/3-2ea7a417.png",d="/vuepress_blog/assets/4-757eedd7.png",k="/vuepress_blog/assets/5-f9f10c7d.png",v="/vuepress_blog/assets/6-91cc8589.png",m="/vuepress_blog/assets/7-3845e3a1.png",b="/vuepress_blog/assets/8-9b67438f.png",g="/vuepress_blog/assets/9-81ad095b.png",h="/vuepress_blog/assets/10-6d98b0a9.png",y="/vuepress_blog/assets/11-3c4b4f13.png",x="/vuepress_blog/assets/12-15aaecfa.png",q="/vuepress_blog/assets/13-0455cef3.png",f="/vuepress_blog/assets/14-be694aec.png",w="/vuepress_blog/assets/15-d1672e69.png",_="/vuepress_blog/assets/16-be856924.png",j="/vuepress_blog/assets/17-f63e55c1.png",S="/vuepress_blog/assets/18-0137ce0b.png",P="/vuepress_blog/assets/19-b925d5d1.png",C="/vuepress_blog/assets/20-6bf39381.png",E="/vuepress_blog/assets/21-5cd81e53.png",A="/vuepress_blog/assets/22-73636c9f.png",M="/vuepress_blog/assets/23-936df4c6.png",I="/vuepress_blog/assets/24-8b0f4e2f.png",L="/vuepress_blog/assets/25-111a3c21.png",J="/vuepress_blog/assets/26-9787e757.png",z="/vuepress_blog/assets/27-d28ecd0c.png",B="/vuepress_blog/assets/28-4be5072b.png",$="/vuepress_blog/assets/29-764018f4.png",D="/vuepress_blog/assets/30-d16b8324.png",R="/vuepress_blog/assets/31-746da72f.png",N="/vuepress_blog/assets/32-4cb013ce.png",T="/vuepress_blog/assets/33-6ebed676.png",O="/vuepress_blog/assets/34-45b9f6d3.png",W="/vuepress_blog/assets/35-1cf07977.png",V="/vuepress_blog/assets/36-513b4fc2.png",H="/vuepress_blog/assets/37-d51abf94.png",U="/vuepress_blog/assets/38-aa30cf6f.png",F="/vuepress_blog/assets/39-6598a7a1.png",G="/vuepress_blog/assets/40-3584368f.png",K="/vuepress_blog/assets/41-3c0daf36.png",Q="/vuepress_blog/assets/42-055c7377.png",X="/vuepress_blog/assets/43-1b6e1081.png",Y="/vuepress_blog/assets/44-96b82b0e.png",Z="/vuepress_blog/assets/45-4b693496.png",nn="/vuepress_blog/assets/46-a757642b.png",sn="/vuepress_blog/assets/47-890493df.png",an="/vuepress_blog/assets/48-fa1adfb7.png",en="/vuepress_blog/assets/49-891a92c1.png",pn="/vuepress_blog/assets/50-95f246de.png",tn="/vuepress_blog/assets/51-daf24cad.png",on="/vuepress_blog/assets/52-d489c7d6.png",ln="/vuepress_blog/assets/53-3baafa9b.png",cn="/vuepress_blog/assets/54-593263bd.png",rn="/vuepress_blog/assets/55-24fcb342.png",un="/vuepress_blog/assets/56-51a180d7.png",dn={},kn=p('<h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h1><h1 id="webpack本身仅做依赖分析、抽象语法树分析-其他的操作是靠插件和加载器完成的" tabindex="-1"><a class="header-anchor" href="#webpack本身仅做依赖分析、抽象语法树分析-其他的操作是靠插件和加载器完成的" aria-hidden="true">#</a> webpack本身仅做依赖分析、抽象语法树分析，其他的操作是靠插件和加载器完成的！</h1><h1 id="如何在浏览器端实现模块化" tabindex="-1"><a class="header-anchor" href="#如何在浏览器端实现模块化" aria-hidden="true">#</a> 如何在浏览器端实现模块化</h1><h2 id="浏览器端的模块化" tabindex="-1"><a class="header-anchor" href="#浏览器端的模块化" aria-hidden="true">#</a> 浏览器端的模块化</h2><p>问题：</p><ul><li>效率问题：精细的模块划分带来了更多的JS文件，更多的JS文件带来了更多的请求，降低了页面访问效率</li><li>兼容性问题：浏览器目前仅支持ES6的模块化标准，并且还存在兼容性问题</li><li>工具问题：浏览器不支持npm下载的第三方包</li></ul><p>这些仅仅是前端工程化的一个缩影</p><p>当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。</p><h2 id="根本原因" tabindex="-1"><a class="header-anchor" href="#根本原因" aria-hidden="true">#</a> 根本原因</h2><p>思考：上面提到的问题，为什么在node端没有那么明显，反而到了浏览器端变得如此严重呢？</p><p>答：在node端，运行的JS文件在本地，因此可以本地读取文件，它的效率比浏览器远程传输文件高的多</p><p><strong>根本原因</strong>：在浏览器端，开发时态（devtime）和运行时态（runtime）的侧重点不一样</p><p><strong>开发时态，devtime：</strong></p><ol><li>模块划分越细越好</li><li>支持多种模块化标准</li><li>支持npm或其他包管理器下载的模块</li><li>能够解决其他工程化的问题</li></ol><p><strong>运行时态，runtime：</strong></p><ol><li>文件越少越好</li><li>文件体积越小越好</li><li>代码内容越乱越好</li><li>所有浏览器都要兼容</li><li>能够解决其他运行时的问题，主要是执行效率问题</li></ol><p>这种差异在小项目中表现的并不明显，可是一旦项目形成规模，就越来越明显，如果不解决这些问题，前端项目形成规模只能是空谈</p><h2 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h2><p>既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。</p><p>这样的工具，叫做<strong>构建工具</strong><img src="'+i+'" alt="image.png"> 这样一来，开发者就可以专注于开发时态的代码结构，而不用担心运行时态遇到的问题了。</p><h2 id="常见的构建工具" tabindex="-1"><a class="header-anchor" href="#常见的构建工具" aria-hidden="true">#</a> 常见的构建工具</h2><ul><li><strong>webpack</strong></li><li>grunt</li><li>gulp</li><li>browserify</li><li>fis</li><li>其他</li></ul><h2 id="webpack的安装和使用" tabindex="-1"><a class="header-anchor" href="#webpack的安装和使用" aria-hidden="true">#</a> webpack的安装和使用</h2>',23),vn={href:"https://www.webpackjs.com/",target:"_blank",rel:"noopener noreferrer"},mn=p(`<h3 id="webpack简介" tabindex="-1"><a class="header-anchor" href="#webpack简介" aria-hidden="true">#</a> webpack简介</h3><p>webpack是基于模块化的打包（构建）工具，它把一切视为模块</p><p>它通过一个开发时态的入口模块为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。</p><p>webpack的特点：</p><ul><li><strong>为前端工程化而生</strong>：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给webpack来处理</li><li><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用webpack</li><li><strong>强大的生态</strong>：webpack是非常灵活、可以扩展的，webpack本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到webpack中</li><li><strong>基于nodejs</strong>：由于webpack在构建的过程中需要读取文件，因此它是运行在node环境中的</li><li><strong>基于模块化</strong>：webpack在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括但不限于CommonJS、ES6 Module</li></ul><h3 id="webpack的安装" tabindex="-1"><a class="header-anchor" href="#webpack的安装" aria-hidden="true">#</a> webpack的安装</h3><p>webpack通过npm安装，它提供了两个包：</p><ul><li>webpack：核心包，包含了webpack构建过程中要用到的所有api</li><li>webpack-cli：提供一个简单的cli命令，它调用了webpack核心包的api，来完成构建过程</li></ul><p>安装方式：</p><ul><li>全局安装：可以全局使用webpack命令，但是无法为不同项目对应不同的webpack版本</li><li><strong>本地安装</strong>：推荐，每个项目都使用自己的webpack版本进行构建</li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，webpack会以<code>./src/index.js</code>作为入口文件分析依赖关系，打包到<code>./dist/main.js</code>文件中</p><p>通过--mode选项可以控制webpack的打包结果的运行环境 webpack --mode = development 开发环境   webpack --mode = production 生产环境</p><h2 id="模块化兼容性" tabindex="-1"><a class="header-anchor" href="#模块化兼容性" aria-hidden="true">#</a> 模块化兼容性</h2><p>由于webpack同时支持CommonJS和ES6 module，因此需要理解它们互操作时webpack是如何处理的</p><h3 id="同模块化标准" tabindex="-1"><a class="header-anchor" href="#同模块化标准" aria-hidden="true">#</a> 同模块化标准</h3><p>如果导出和导入使用的是同一种模块化标准，打包后的效果和之前学习的模块化没有任何差异 <img src="`+r+'" alt="image.png"><img src="'+u+'" alt="image.png"></p><h3 id="不同模块化标准" tabindex="-1"><a class="header-anchor" href="#不同模块化标准" aria-hidden="true">#</a> 不同模块化标准</h3><p>不同的模块化标准，webpack按照如下的方式处理 <img src="'+d+'" alt="image.png"><img src="'+k+`" alt="image.png"></p><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><p>代码编写最忌讳的是精神分裂，选择一个合适的模块化标准，然后贯彻整个开发阶段。</p><h2 id="分析-webpack-的编译结果" tabindex="-1"><a class="header-anchor" href="#分析-webpack-的编译结果" aria-hidden="true">#</a> 分析 webpack 的编译结果</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// -------------------------------- 编译前 -------------------------------</span>
<span class="token comment">// .src/index.js 模块</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> abc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./abc&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span>

<span class="token comment">// .src/abc.js 模块</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;module abc&quot;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>


<span class="token comment">// commonJs 导入导出，es6模块化导入导出实现原理类似，只是兼容了更多了模块化的标准</span>
<span class="token comment">// -------------------------------- 编译后 --------------------------------</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模块内容都解析到一个对象中，以唯一的模块路径为 key</span>
	<span class="token keyword">var</span> __webpack_modules__ <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;./src/abc.js&quot;</span><span class="token operator">:</span>
            <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// console.log(&quot;module abc&quot;)</span>
                <span class="token comment">// module.exports = &quot;abc&quot;;</span>
                <span class="token comment">// 使用 eval 执行是跟浏览器机制有关系的，浏览器在执行 eval 内的代码时会将 eval 内的代码放到一个新的模块中执行，eval 配置 //# sourceURL=./src/abc.js? 可以在报错的时候将模块地址指向我们配置的 ./src/abc.js</span>
                <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;console.log(\\&quot;module abc\\&quot;)\\nmodule.exports = \\&quot;abc\\&quot;;\\n\\n//# sourceURL=webpack:///./src/abc.js?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span>
            <span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __unused_webpack_exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// console.log(123)</span>
                <span class="token comment">// const abc = __webpack_require__(&quot;./src/abc.js&quot;)</span>
                <span class="token comment">// console.log(abc)</span>
                <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;console.log(123)\\nconst abc = __webpack_require__(/*! ./abc */ \\&quot;./src/abc.js\\&quot;)\\nconsole.log(abc)\\n\\n//# sourceURL=webpack:///./src/index.js?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// 缓存模块内容，再次读取时不用重复执行</span>
	<span class="token keyword">var</span> __webpack_module_cache__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// 实现 require 函数</span>
	<span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 查看是否有缓存</span>
		<span class="token keyword">var</span> cachedModule <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 创建 module 对象，内部的 exports 也是一个对象</span>
		<span class="token keyword">var</span> module <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	
		<span class="token comment">// 没有缓存，因为模块路径是唯一的，根据模块路径在存储模块内容的对象中读取模块信息</span>
		__webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
		<span class="token comment">// Return the exports of the module</span>
		<span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 根据入口开始挨个读取、执行模块内容</span>
	<span class="token keyword">var</span> __webpack_exports__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><ul><li>webpack提供的cli支持很多的参数，例如<code>--mode</code>，但更多的时候，我们会使用更加灵活的配置文件来控制webpack的行为</li><li>默认情况下，webpack会读取<code>webpack.config.js</code>文件作为配置文件，但也可以通过CLI参数<code>--config</code>来指定某个配置文件 <ul><li>配置环境的代码是需要在打包的过程中参与运行的，需要打包的文件不需要运行，所以配置文件是在node环境中运行的，不支持ES6模块化，所以只能用commonJS</li></ul></li><li>配置文件中通过CommonJS模块导出一个对象，对象中的各种属性对应不同的webpack配置</li><li>当命令行参数与配置文件中的配置出现冲突时，以命令行参数为准</li></ul><p><strong>注意：配置文件中的代码，必须是有效的 node 代码，请注意，是 node 环境执行的代码</strong></p><h3 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置" aria-hidden="true">#</a> 基本配置</h3><ol><li>mode：编译模式，字符串，取值为development或production，指定编译结果代码运行的环境，会影响webpack对编译结果代码格式的处理</li><li>entry：入口，字符串，指定入口文件</li><li>output：出口，对象，指定编译结果文件</li></ol><h2 id="devtool-配置" tabindex="-1"><a class="header-anchor" href="#devtool-配置" aria-hidden="true">#</a> devtool 配置</h2><h3 id="source-map-源码地图" tabindex="-1"><a class="header-anchor" href="#source-map-源码地图" aria-hidden="true">#</a> source map 源码地图</h3><p>前端发展到现阶段，很多时候都不会直接运行源代码，可能需要对源代码进行合并、压缩、转换等操作，真正运行的是转换后的代码 <img src="`+v+'" alt="image.png"> 这就给调试带来了困难，因为当运行发生错误的时候，我们更加希望能看到源代码中的错误，而不是转换后代码的错误</p>',32),bn={href:"https://code.jquery.com/jquery-3.4.1.min.js",target:"_blank",rel:"noopener noreferrer"},gn=p('<p>为了解决这一问题，谷歌提出了source map，且 chrome 浏览器率先支持了source map，其他浏览器纷纷效仿，目前，几乎所有新版浏览器都支持了source map</p><p>source map实际上是一个配置，配置中不仅记录了所有源码内容，还记录了和转换后的代码的对应关系</p><p>下面是浏览器处理source map的原理 <img src="'+m+'" alt="image.png"><img src="'+b+'" alt="image.png"><strong>最佳实践</strong>：</p><ul><li>source map 应在开发环境中使用，作为一种调试手段</li><li>source map 不应该在生产环境中使用，source map的文件一般较大，不仅会导致额外的网络传输，还容易暴露原始代码。 <ul><li>即便要在生产环境中使用source map，用于调试真实的代码运行问题，也要做出一些处理规避网络传输和代码暴露的问题。</li></ul></li></ul><h3 id="webpack中的source-map" tabindex="-1"><a class="header-anchor" href="#webpack中的source-map" aria-hidden="true">#</a> webpack中的source map</h3>',5),hn=n("strong",null,"优化调试体验",-1),yn={href:"https://www.webpackjs.com/configuration/devtool/",target:"_blank",rel:"noopener noreferrer"},xn=p('<h2 id="webpack-编译过程" tabindex="-1"><a class="header-anchor" href="#webpack-编译过程" aria-hidden="true">#</a> webpack 编译过程</h2><p>webpack 的作用是将源代码编译（构建、打包）成最终代码 <img src="'+g+'" alt="image.png"> 整个过程大致分为三个步骤</p><ol><li>初始化</li><li>编译</li><li>输出</li></ol><p><img src="'+h+'" alt="image.png"></p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>webpack webpack-cli（webpack命令）</p><p>此阶段，webpack会将<strong>CLI参数</strong>、<strong>配置文件</strong>、<strong>默认配置</strong>进行融合，形成一个最终的配置对象。</p><p>对配置的处理过程是依托一个第三方库<code>yargs</code>完成的，这个库就是用来融合配置的</p><p>此阶段相对比较简单，主要是为接下来的编译阶段做必要的准备</p><p>目前，可以简单的理解为，初始化阶段主要用于产生一个最终的配置</p><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h3><ol><li><strong>创建chunk</strong></li></ol><p><strong>chunk是webpack在内部构建过程中的一个概念，译为</strong><code>**块**</code><strong>，它表示通过某个入口找到的所有依赖的统称。</strong></p><p>根据入口模块（默认为<code>./src/index.js</code>）创建一个chunk，chunk可以是有多个的，因为入口模块可以有多个 <img src="'+y+'" alt="image.png"> 每个chunk都有至少两个属性：</p><ul><li>name：默认为main</li><li>id：唯一编号，开发环境和name相同，生产环境是一个数字，从0开始</li></ul><ol start="2"><li><strong>构建所有依赖模块，递归加载</strong></li></ol><p><img src="'+x+'" alt="image.png"></p>',17),qn={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},fn=p('<p>简图 <img src="'+q+'" alt="image.png"></p><ol start="3"><li><strong>产生chunk assets</strong></li></ol><p>在第二步完成后，chunk中会产生一个模块列表，列表中包含了<strong>模块id</strong>和**模块转换后的代码 **</p><p>接下来，webpack会根据配置为chunk生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成到最终文件的文件名和文件内容 <img src="'+f+'" alt="image.png"></p><blockquote><p><strong>chunk hash是根据所有chunk assets的内容生成的一个hash字符串</strong><strong>hash：一种算法，具体有很多分类，特点是将一个任意长度的字符串转换为一个固定长度的字符串，而且可以保证原始内容不变，产生的hash字符串就不变</strong></p></blockquote><p>简图 <img src="'+w+'" alt="image.png"></p><ol start="4"><li><strong>合并chunk assets</strong></li></ol><p>将多个chunk的assets合并到一起，并产生一个总的hash <img src="'+_+'" alt="image.png"></p><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h3><p>此步骤非常简单，webpack将利用node中的fs模块（文件处理模块），根据编译产生的总的assets，生成相应的文件。 <img src="'+j+'" alt="image.png"></p><h3 id="总过程" tabindex="-1"><a class="header-anchor" href="#总过程" aria-hidden="true">#</a> 总过程</h3><p><img src="'+S+'" alt="image.png"><img src="'+P+'" alt="image.png"><strong>涉及术语</strong></p><ol><li>module：模块，分割的代码单元，webpack中的模块可以是任何内容的文件，不仅限于JS</li><li>chunk：webpack内部构建模块的块，一个chunk中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li><li>bundle：chunk构建好模块后会生成chunk的资源清单，清单中的每一项就是一个bundle，可以认为bundle就是最终生成的文件</li><li>hash：最终的资源清单所有内容联合生成的hash值</li><li>chunkhash：chunk生成的资源清单内容联合生成的hash值</li><li>chunkname：chunk的名称，如果没有配置则使用main</li><li>id：通常指chunk的唯一编号，如果在开发环境下构建，和chunkname相同；如果是生产环境下构建，则使用一个从0开始的数字进行编号</li></ol><p><strong>每次文件变化之后，会从编译阶段再开始，不会再初始化了</strong></p><h2 id="入口和出口" tabindex="-1"><a class="header-anchor" href="#入口和出口" aria-hidden="true">#</a> 入口和出口</h2><p><img src="'+C+'" alt="image.png"></p>',16),wn={href:"https://nodejs.org/dist/latest-v12.x/docs/api/path.html",target:"_blank",rel:"noopener noreferrer"},_n=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*

./ : 
1. 模块化代码中，比如require(&quot;./&quot;)，表示当前js文件所在的目录
2. 在路径处理中，&quot;./&quot;表示node运行目录

__dirname: 所有情况下，都表示当前运行的js文件所在的目录，它是一个绝对路径

*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出口" tabindex="-1"><a class="header-anchor" href="#出口" aria-hidden="true">#</a> 出口</h3><p>这里的出口是针对资源列表的文件名或路径的配置 出口通过output进行配置</p><h3 id="入口" tabindex="-1"><a class="header-anchor" href="#入口" aria-hidden="true">#</a> 入口</h3><p><strong>入口真正配置的是chunk</strong> 入口通过entry进行配置 规则：</p><ul><li>name：chunkname</li><li>hash: 总的资源hash，通常用于解决缓存问题</li><li>chunkhash: 使用chunkhash</li><li>id: 使用chunkid，不推荐</li></ul><h2 id="入口和出口的最佳实践-ignore" tabindex="-1"><a class="header-anchor" href="#入口和出口的最佳实践-ignore" aria-hidden="true">#</a> 入口和出口的最佳实践 {ignore}</h2><p>具体情况具体分析</p><p>下面是一些经典场景</p><h3 id="一个页面一个js" tabindex="-1"><a class="header-anchor" href="#一个页面一个js" aria-hidden="true">#</a> 一个页面一个JS</h3><p><img src="`+E+`" alt="image.png"> 源码结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|—— src
    |—— pageA   页面A的代码目录
        |—— index.js 页面A的启动模块
        |—— ...
    |—— pageB   页面B的代码目录
        |—— index.js 页面B的启动模块
        |—— ...
    |—— pageC   页面C的代码目录
        |—— main1.js 页面C的启动模块1 例如：主功能
        |—— main2.js 页面C的启动模块2 例如：实现访问统计的额外功能
        |—— ...
    |—— common  公共代码目录
        |—— ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">pageA</span><span class="token operator">:</span> <span class="token string">&quot;./src/pageA/index.js&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pageB</span><span class="token operator">:</span> <span class="token string">&quot;./src/pageB/index.js&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pageC</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/pageC/main1.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./src/pageC/main2.js&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&quot;[name].[chunkhash:5].js&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式适用于页面之间的功能差异巨大、公共代码较少的情况，这种情况下打包出来的最终代码不会有太多重复</p><h3 id="一个页面多个js" tabindex="-1"><a class="header-anchor" href="#一个页面多个js" aria-hidden="true">#</a> 一个页面多个JS</h3><p><img src="`+A+`" alt="image.png"> 源码结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|—— src
    |—— pageA   页面A的代码目录
        |—— index.js 页面A的启动模块
        |—— ...
    |—— pageB   页面B的代码目录
        |—— index.js 页面B的启动模块
        |—— ...
    |—— statistics   用于统计访问人数功能目录
        |—— index.js 启动模块
        |—— ...
    |—— common  公共代码目录
        |—— ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">pageA</span><span class="token operator">:</span> <span class="token string">&quot;./src/pageA/index.js&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pageB</span><span class="token operator">:</span> <span class="token string">&quot;./src/pageB/index.js&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">statistics</span><span class="token operator">:</span> <span class="token string">&quot;./src/statistics/index.js&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&quot;[name].[chunkhash:5].js&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式适用于页面之间有一些<strong>独立</strong>、相同的功能，专门使用一个chunk抽离这部分JS有利于浏览器更好的缓存这部分内容。</p><blockquote><p>思考：为什么不使用多启动模块的方式？</p></blockquote><h3 id="单页应用-最佳实践" tabindex="-1"><a class="header-anchor" href="#单页应用-最佳实践" aria-hidden="true">#</a> 单页应用 - 最佳实践</h3><p>所谓单页应用，是指整个网站（或网站的某一个功能块）只有一个页面，页面中的内容全部靠JS创建和控制。 vue和react都是实现单页应用的利器。 <img src="`+M+`" alt="image.png"> 源码结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|—— src
    |—— subFunc   子功能目录
        |—— ...
    |—— subFunc   子功能目录
        |—— ...
    |—— common  公共代码目录
        |—— ...
    |—— index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">&quot;index.[hash:5].js&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> loader</h2><blockquote><p>webpack做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。 更多的功能需要借助 webpack loaders 和 webpack plugins 完成。</p></blockquote><p>webpack loader： loader本质上是一个函数，它的作用是将某个源码字符串转换成另一个源码字符串返回，loader能做的事情有限，更多的事情需要 plugin 来做。 <img src="`+I+'" alt="image.png"> loader函数的将在模块语法解析的过程中被调用，以得到最终的源码。</p><p><strong>全流程：</strong><img src="'+L+'" alt="image.png"><strong>chunk中解析模块的流程：</strong><img src="'+J+'" alt="image.png"><strong>chunk中解析模块的更详细流程：</strong><img src="'+z+'" alt="image.png"><strong>处理loaders流程：代码在每一个 loader 函数中进行挨个执行</strong><img src="'+B+`" alt="image.png"></p><h3 id="loader配置" tabindex="-1"><a class="header-anchor" href="#loader配置" aria-hidden="true">#</a> loader配置</h3><p><strong>完整配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//模块匹配规则，可以存在多个规则</span>
            <span class="token punctuation">{</span> <span class="token comment">//每个规则是一个对象</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//匹配的模块正则</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//匹配到后应用的规则模块</span>
                    <span class="token punctuation">{</span>  <span class="token comment">//其中一个规则</span>
                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">,</span> <span class="token comment">//loader模块的路径，该字符串会被放置到require中</span>
                        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//向对应loader传递的额外参数</span>

                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>简化配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//模块匹配规则，可以存在多个规则</span>
            <span class="token punctuation">{</span> <span class="token comment">//每个规则是一个对象</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//匹配的模块正则</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;模块路径1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;模块路径2&quot;</span><span class="token punctuation">]</span> <span class="token comment">// loader模块的路径，该字符串会被放置到require中</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loader执行过程" tabindex="-1"><a class="header-anchor" href="#loader执行过程" aria-hidden="true">#</a> loader执行过程</h3><ul><li><strong>loader 是从上往下匹配的，但是是从下往上执行的</strong></li><li><strong>匹配过程中会从第一个匹配到的规则开始放到一个数组中 [规则1，规则2]</strong></li><li><strong>执行过程从数组的最后一项开始取出来执行，先如后出，类似堆栈， 规则2 -- 规则1</strong></li><li><strong>执行规则中的 loader 也是堆栈执行，与上边一样</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">index\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 正则表达式，匹配模块的路径</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./loaders/loader1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./loaders/loader2&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 匹配到了之后，使用哪些加载器</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 规则1</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//正则表达式，匹配模块的路径</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./loaders/loader3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./loaders/loader4&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 匹配到了之后，使用哪些加载器</span>
    <span class="token punctuation">}</span> <span class="token comment">// 规则2</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 模块的匹配规则</span>

<span class="token comment">// 执行顺序：4 -- 3 -- 2 -- 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写一个loader" tabindex="-1"><a class="header-anchor" href="#写一个loader" aria-hidden="true">#</a> 写一个loader</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;loader-utils&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// { // 每个规则是一个对象</span>
<span class="token comment">//     test: /\\.js$/, // 匹配的模块正则</span>
<span class="token comment">//     use: [ // 匹配到后应用的加载器，可以使用多个</span>
<span class="token comment">//         {  // 规则1</span>
<span class="token comment">//             loader: &quot;./testLoader1.js&quot;, // loader模块的路径，该字符串会被放置到require中</span>
<span class="token comment">//             options: { // 向对应loader传递的额外参数</span>
<span class="token comment">//                changeVar: &quot;变量&quot;</span>
<span class="token comment">//             }</span>
<span class="token comment">//         },</span>
<span class="token comment">//         {  // 规则2</span>
<span class="token comment">//             loader: &quot;./testLoader2.js&quot;, // loader模块的路径，该字符串会被放置到require中</span>
<span class="token comment">//             options: { // 向对应loader传递的额外参数</span>
<span class="token comment">//                changeLet: &quot;块级变量&quot;</span>
<span class="token comment">//             }</span>
<span class="token comment">//         },</span>
<span class="token comment">//     ]</span>
<span class="token comment">//   },</span>

<span class="token comment">// loader 是从上往下匹配的，但是是从下往上执行的</span>
<span class="token comment">// 匹配过程中会从第一个匹配到的规则开始放到一个数组中 [规则1，规则2]</span>
<span class="token comment">// 执行过程从数组的最后一项开始取出来执行，先如后出，类似堆栈， 规则2 -- 规则1</span>

<span class="token comment">// { // 简写</span>
<span class="token comment">//     test: /\\.js$/, // 匹配的模块正则</span>
<span class="token comment">//     // 匹配到后应用的加载器</span>
<span class="token comment">//     use: [&quot;./testLoader?changeVar=变量&quot;] // loader模块的路径，该字符串会被放置到require中，？号后跟的是 options 中的内容</span>
<span class="token comment">//   },</span>

<span class="token comment">// testLoader1.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sourceCode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;testLoader1执行了&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// loader options 中的配置都在 webpack 生成的上下文中，通过 this获取，一般使用 第三方库 loader-utils 解析 this 中的 options</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>changeVar<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> sourceCode<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;var&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 把变量替换为 var，如: 变量 a = 1;  ==》 var a = 1;</span>
<span class="token punctuation">}</span>

<span class="token comment">// testLoader2.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sourceCode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;testLoader2执行了&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// loader options 中的配置都在 webpack 生成的上下文中，通过 this获取，一般使用 第三方库 loader-utils 解析 this 中的 options</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>changeVar<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> sourceCode<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;let&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 把变量替换为 var，如: 变量 a = 1;  ==》 var a = 1;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h2><p>loader的功能定位是转换代码，而一些其他的操作难以使用loader完成，比如：</p><ul><li>当webpack生成文件时，顺便多生成一个说明描述文件</li><li>当webpack编译启动时，控制台输出一句话表示webpack启动了</li><li>当xxxx时，xxxx</li></ul><p><strong>这种类似的功能需要把功能嵌入到webpack的编译流程中，而这种事情的实现是依托于 plugin 的</strong><img src="`+$+`" alt="image.png"> plugin的<strong>本质</strong>是一个带有apply方法的对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> plugin <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，习惯上，我们会将该对象写成构造函数的模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> plugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要将插件应用到webpack，需要把插件对象配置到webpack的plugins数组中，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>apply函数会在初始化阶段，创建好 Compiler 对象后运行，在每次打包过程中只会运行一次</strong></li><li><strong>compiler 对象是在初始化阶段构建的，整个 webpack 打包期间只有一个 compiler 对象，后续完成打包工作的是 compiler 对象内部创建的 compilation</strong></li><li><strong>apply方法会在创建好compiler对象后调用，并向方法传入一个compiler对象</strong></li></ul><p><img src="`+D+`" alt="image.png"><strong>compiler对象提供了大量的钩子函数（hooks，可以理解为事件），plugin的开发者可以注册这些钩子函数，参与webpack编译和生成。</strong><strong>你可以在apply方法中使用下面的代码注册钩子函数:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>事件名称<span class="token punctuation">.</span><span class="token function">事件类型</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//事件处理函数</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件名称" tabindex="-1"><a class="header-anchor" href="#事件名称" aria-hidden="true">#</a> 事件名称</h3>`,54),jn={href:"https://www.webpackjs.com/api/compiler-hooks",target:"_blank",rel:"noopener noreferrer"},Sn=p(`<h3 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h3><p>这一部分使用的是 Tapable API，这个小型的库是一个专门用于钩子函数监听的库。 它提供了一些事件类型：</p><ul><li>tap：注册一个同步的钩子函数，函数运行完毕则表示事件处理结束</li><li>tapAsync：注册一个基于回调的异步的钩子函数，函数通过调用一个回调表示事件处理结束</li><li>tapPromise：注册一个基于Promise的异步的钩子函数，函数通过返回的Promise进入已决状态表示事件处理结束</li></ul><h3 id="处理函数" tabindex="-1"><a class="header-anchor" href="#处理函数" aria-hidden="true">#</a> 处理函数</h3><p>处理函数有一个事件参数<code>compilation</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里注册事件，类似于 window.onload、$(function)</span>
        <span class="token comment">// compiler: compiler 对象提供了大量的钩子函数</span>
        <span class="token comment">// hooks: hooks，可以理解为事件</span>
        <span class="token comment">// done: 事件名称, 即要监听的事件名，即钩子名，所有的钩子：https://www.webpackjs.com/api/compiler-hooks</span>
        <span class="token comment">// tap: 事件类型，这一部分使用的是 Tapable API，这个小型的库是一个专门用于钩子函数监听的库, 它提供了一些事件类型：tap：注册一个同步的钩子函数，函数运行完毕则表示事件处理结束; tapAsync：注册一个基于回调的异步的钩子函数，函数通过调用一个回调表示事件处理结束; tapPromise：注册一个基于Promise的异步的钩子函数，函数通过返回的Promise进入已决状态表示事件处理结束</span>
        <span class="token comment">// 事件处理函数有一个事件参数 compilation</span>
        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;MyPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 事件处理函数</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;编译完成&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">FileListPlugin</span> <span class="token punctuation">{</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>filename <span class="token operator">=</span> <span class="token string">&quot;filelist.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;FileListPlugin&quot;</span><span class="token punctuation">,</span> <span class="token parameter">complation</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> complation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】
大小：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>complation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">KB</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
                fileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">var</span> str <span class="token operator">=</span> fileList<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            complation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> str
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="区分环境" tabindex="-1"><a class="header-anchor" href="#区分环境" aria-hidden="true">#</a> 区分环境</h2><p>有些时候，我们需要针对生产环境和开发环境分别书写webpack配置 为了更好的适应这种要求，webpack允许配置不仅可以是一个对象，还可以是一个<strong>函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">env</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token comment">//配置内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在开始构建时，webpack如果发现配置是一个函数，会调用该函数，将函数返回的对象作为配置内容，因此，开发者可以根据不同的环境返回不同的对象 在调用webpack函数时，webpack会向函数传入一个参数env，该参数的值来自于webpack命令中给env指定的值，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// npx webpack --env.prod  --&gt; env: { prod: true }

// npx webpack --env abc  --&gt; env: &quot;abc&quot;
// npx webpack --env.abc=1  --&gt; env： {abc:1}
// npx webpack --env.abc=1 --env.bcd=2   --&gt; env: {abc:1, bcd:2}
// module.exports = function (env) { // 配置可以是一个函数，在开始构建时，webpack如果发现配置是一个函数，会调用该函数，将函数返回的对象作为配置内容，因此，开发者可以根据不同的环境返回不同的对象, 在调用webpack函数时，webpack会向函数传入一个参数env，该参数的值来自于webpack命令中给env指定的值
//     if (env &amp;&amp; env.prod) {
//         return {
//             mode: &quot;production&quot;,
//             devtool: &quot;none&quot;
//         }
//     }
//     else {
//         return {
//             mode: &quot;development&quot;,
//             devtool: &quot;source-map&quot;
//         }
//     }
// }

// package.json 中的 scripts
// &quot;scripts&quot;: {
//     &quot;dev&quot;: &quot;webpack --mode=development&quot;, // webpack 指执行 webpack-cli 中的指令，vue 中是执行 vue-cli 中的指令: &quot;serve&quot;: &quot;vue-cli-service serve&quot;,
//     &quot;build&quot;: &quot;webpack --mode=production&quot;
//   },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，我们就可以在命令中指定环境，在代码中进行判断，根据环境返回不同的配置结果。</p><h2 id="其他细节配置" tabindex="-1"><a class="header-anchor" href="#其他细节配置" aria-hidden="true">#</a> 其他细节配置</h2><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该配置会影响入口和loaders的解析，入口和loaders的相对路径会以context的配置作为基准路径，这样，你的配置会独立于CWD（current working directory 当前执行路径）</p><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h3><h4 id="library" tabindex="-1"><a class="header-anchor" href="#library" aria-hidden="true">#</a> library</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样一来，打包后的结果中，会将自执行函数的执行结果暴露给 abc</p><h4 id="librarytarget" tabindex="-1"><a class="header-anchor" href="#librarytarget" aria-hidden="true">#</a> libraryTarget</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&quot;var&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该配置可以更加精细的控制如何暴露入口包的导出结果</p><p>其他可用的值有：</p>`,24),Pn=n("li",null,"var：默认值，暴露给一个普通变量",-1),Cn=n("li",null,"window：暴露给window对象的一个属性",-1),En=n("li",null,"this：暴露给this的一个属性",-1),An=n("li",null,"global：暴露给global的一个属性",-1),Mn=n("li",null,"commonjs：暴露给exports的一个属性",-1),In={href:"https://www.webpackjs.com/configuration/output/#output-librarytarget",target:"_blank",rel:"noopener noreferrer"},Ln=p(`<h3 id="target" tabindex="-1"><a class="header-anchor" href="#target" aria-hidden="true">#</a> target</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&quot;web&quot;</span> <span class="token comment">//默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置打包结果最终要运行的环境，常用值有</p>`,3),Jn=n("li",null,"web: 打包后的代码运行在web环境中",-1),zn=n("li",null,"node：打包后的代码运行在node环境中",-1),Bn={href:"https://www.webpackjs.com/configuration/target/",target:"_blank",rel:"noopener noreferrer"},$n=p(`<h3 id="module-noparse" tabindex="-1"><a class="header-anchor" href="#module-noparse" aria-hidden="true">#</a> module.noParse</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jquery</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不解析正则表达式匹配的模块，通常用它来忽略那些大型的单模块库，以提高<strong>构建性能</strong></p><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h3><p>resolve的相关配置主要用于控制模块解析过程</p><h4 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> modules</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">]</span>  <span class="token comment">//默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当解析模块时，如果遇到导入语句，<code>require(&quot;test&quot;)</code>，webpack会从下面的位置寻找依赖的模块</p><ol><li>当前目录下的<code>node_modules</code>目录</li><li>上级目录下的<code>node_modules</code>目录</li><li>...</li></ol><h4 id="extensions" tabindex="-1"><a class="header-anchor" href="#extensions" aria-hidden="true">#</a> extensions</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.json&quot;</span><span class="token punctuation">]</span>  <span class="token comment">//默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>模块使用的扩展名, 当 webpack 解析模块时，遇到无具体后缀的导入语句，例如require(&quot;test&quot;)，会依次测试它的后缀名, 注意，补全后缀名的是 webpack</p><ul><li>test.js</li><li>test.json</li></ul><h4 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_&quot;</span><span class="token operator">:</span> __dirname
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了alias（别名）后，导入语句中可以加入配置的键名，例如<code>require(&quot;@/abc.js&quot;)</code>，webpack会将其看作是<code>require(src的绝对路径+&quot;/abc.js&quot;)</code>。</p><p>在大型系统中，源码结构往往比较深和复杂，别名配置可以让我们更加方便的导入依赖</p><h3 id="externals" tabindex="-1"><a class="header-anchor" href="#externals" aria-hidden="true">#</a> externals</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token string">&quot;$&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token string">&quot;_&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从最终的bundle中排除掉配置的配置的源码，例如，入口模块是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//index.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">)</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的bundle是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">)</span>
        <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//jquery的大量源码</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//lodash的大量源码</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但有了上面的配置后，则变成了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">)</span>
        <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> $<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> _<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这比较适用于一些第三方库来自于外部CDN的情况，这样一来，即可以在页面中使用CDN，又让bundle的体积变得更小，还不影响源码的编写</p><h3 id="stats" tabindex="-1"><a class="header-anchor" href="#stats" aria-hidden="true">#</a> stats</h3><p>stats控制的是构建过程中控制台的输出内容</p><h1 id="loader、plugin-常用扩展" tabindex="-1"><a class="header-anchor" href="#loader、plugin-常用扩展" aria-hidden="true">#</a> loader、plugin 常用扩展</h1><p>去npm里看介绍和用法</p><ol><li>清除输出目录 **clean-webpack-plugin **</li></ol><p>生成导出文件之前先清除输出目录，利用 fs 模块清除输出目录的文件</p><ol start="2"><li>自动生成页面 **html-webpack-plugin **</li></ol><p>利用 fs 模块生成一个页面文件，给文件内容的合适的位置添加一个 script 元素，元素的src 路径引用打包后的 js</p><ol start="3"><li>复制静态资源 **copy-webpack-plugin **</li></ol><h2 id="开发服务器" tabindex="-1"><a class="header-anchor" href="#开发服务器" aria-hidden="true">#</a> 开发服务器</h2><p><strong>在开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p><ol><li>编写代码</li><li>控制台运行命令完成打包</li><li>打开页面查看效果</li><li>继续编写代码，回到步骤2</li></ol><p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境 为了解决这些问题，webpack官方制作了一个单独的库：<strong>webpack-dev-server</strong><strong>它既不是plugin也不是loader</strong></p><h3 id="webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#webpack-dev-server" aria-hidden="true">#</a> webpack-dev-server</h3><p>先来看看它怎么用</p><ol><li>安装</li><li>执行<strong>webpack-dev-server</strong>命令</li></ol><p><strong>webpack-dev-server</strong>命令几乎支持所有的webpack命令参数，如**--config**、<strong>-env</strong>等等，你可以把它当作webpack命令使用 <strong>这个命令是专门为开发阶段服务的，真正部署的时候还是得使用webpack命令</strong> 当我们执行<strong>webpack-dev-server</strong>命令后，它做了以下操作：</p><ol><li>内部执行webpack命令，传递命令参数</li><li>开启watch</li><li>注册hooks：类似于plugin，webpack-dev-server会向webpack中注册一些钩子函数，主要功能如下： <ol><li>将资源列表（aseets）保存起来</li><li>禁止webpack输出文件</li></ol></li><li>用express开启一个服务器，监听某个端口，当请求到达后，根据请求的路径，给予相应的资源内容 <ol><li>默认监控 8080 端口</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在 webpack 编译阶段到最后生成 compilation.assets 的时候，webpack-dev-server 使用一个变量接收编译结果</span>
<span class="token keyword">const</span> assets <span class="token operator">=</span> compilation<span class="token punctuation">.</span>assets <span class="token comment">// 编译结果有如 index.html、index.js、index.css 等</span>
<span class="token comment">// 然后让 webpack 不能输出内容，类似使用赋值空对象的操作</span>
compilation<span class="token punctuation">.</span>assets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 然后监控 8080 端口，当用户请求数据的时候，直接从 assets 中拿，如：http://localhost:8080/index.html </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h4>`,46),Dn={href:"https://www.webpackjs.com/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"},Rn=p(`<ul><li>port：配置监听端口</li><li>proxy：配置代理，常用于跨域访问</li><li>stats：配置控制台输出内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 编译完成自动打开页面</span>

  <span class="token comment">// 配置代理，用来处理跨域，跨域是浏览器端的，在服务器端是不存在跨域的，使用 devServer 处理跨域只需要配置代理即可</span>
  <span class="token comment">// 前端页面和 js 开发完成后，往往会部署到同一个域中，跨域往往出现在开发阶段</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">//   &#39;/api&#39;: &#39;http://localhost:3000&#39;, // 请求地址中只要包含 /api，就会在 /api 前自动拼接上，如：http://localhost:3000/api/abc</span>
  <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 请求地址中只要包含 /api，就会在 /api 前自动拼接上，如：http://localhost:3000/api/abc</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;^/api&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 如果你不想始终传递 /api ，则需要重写路径，拼接后的路径将没有 /api，如：http://localhost:3000/abc</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">contentBase</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// boolean | string | array, static file location</span>
  <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// enable gzip compression</span>
  <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// true for index.html upon 404, object for multiple paths</span>
  <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// hot module replacement. Depends on HotModuleReplacementPlugin</span>
  <span class="token literal-property property">https</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// true for self-signed, object for cert authority</span>
  <span class="token literal-property property">noInfo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// only errors &amp; warns on hot reload</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="普通文件处理" tabindex="-1"><a class="header-anchor" href="#普通文件处理" aria-hidden="true">#</a> 普通文件处理</h3><p>file-loader: 生成依赖的文件到输出目录，然后将模块文件设置为：导出一个路径\\</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file-loader</span>
<span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// source：文件内容（图片内容 buffer）</span>
	<span class="token comment">// 1. 生成一个具有相同文件内容的文件到输出目录</span>
	<span class="token comment">// 2. 返回一段代码   export default &quot;文件名&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>url-loader：将依赖的文件转换为：导出一个base64格式的字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//url-loader</span>
<span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// source：文件内容（图片内容 buffer）</span>
	<span class="token comment">// 1. 根据buffer生成一个base64编码</span>
	<span class="token comment">// 2. 返回一段代码   export default &quot;base64编码&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//file-loader</span>
<span class="token comment">// function loader(source){</span>
<span class="token comment">// 	// source：文件内容（图片内容 buffer）</span>
<span class="token comment">// 	// 1. 生成一个具有相同文件内容的文件到输出目录</span>
<span class="token comment">// 	// 2. 返回一段代码: export default &quot;文件名&quot;</span>
<span class="token comment">// }</span>

<span class="token comment">//url-loader</span>
<span class="token comment">// function loader(source){</span>
<span class="token comment">// 	// source：文件内容（图片内容 buffer）</span>
<span class="token comment">// 	// 1. 根据buffer生成一个base64编码</span>
<span class="token comment">// 	// 2. 返回一段代码: export default &quot;base64编码&quot;</span>
<span class="token comment">// }</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png)|(gif)|(jpg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;file-loader&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生成依赖的文件到输出目录，然后将模块文件设置为：导出一个路径\\</span>
                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;imgs/[name].[hash:5].[ext]&quot;</span> <span class="token comment">// 配置文件名 [ext]：原来文件的扩展名，这里的 hash 是文件内容的 hash，这里边的东西是交给 loader 函数的，跟 webpack 没有关系</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png)|(gif)|(jpg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;url-loader&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 将依赖的文件转换为：导出一个base64格式的字符串，小文件多了，如果每次都请求，会占有大量请求的资源</span>
                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token comment">// limit: false // 不限制任何大小，所有经过loader的文件进行base64编码返回</span>
                        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 只要文件不超过 100*1024 字节，则使用base64编码，否则，交给file-loader进行处理</span>
                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;imgs/[name].[hash:5].[ext]&quot;</span> <span class="token comment">// file-loader 可以使用的配置</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决路径问题" tabindex="-1"><a class="header-anchor" href="#解决路径问题" aria-hidden="true">#</a> 解决路径问题</h3><p>在使用file-loader或url-loader时，可能会遇到一个非常有趣的问题 比如，通过webpack打包的目录结构如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>dist
    <span class="token punctuation">|</span>—— img
        <span class="token punctuation">|</span>—— a.png  <span class="token comment">#file-loader生成的文件</span>
    <span class="token punctuation">|</span>—— scripts
        <span class="token punctuation">|</span>—— main.js  <span class="token comment">#export default &quot;img/a.png&quot;</span>
    <span class="token punctuation">|</span>—— html
        <span class="token punctuation">|</span>—— index.html <span class="token comment">#&lt;script src=&quot;../scripts/main.js&quot; &gt;&lt;/script&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>这种问题发生的根本原因：模块中的路径来自于某个loader或plugin，当产生路径时，loader或plugin只有相对于dist目录的路径，并不知道该路径将在哪个资源中使用，从而无法确定最终正确的路径，十分细节的问题</strong></li><li>面对这种情况，需要依靠webpack的配置publicPath解决 <ul><li>publicPath：公共路径</li><li>配置到 output 中</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 公共路径, 有些 loader 和 plugin 会使用，会在一些文件的路径前拼接上配置的内容，如配置 /assets/， 则 /assets/img/a.jpg</span>
  <span class="token comment">// 一般配置打包后的资源路径，往往写一个 /，如：/img/a.jpg，省略了前面的协议、域名、端口号，即：http://localhost:3000/img/a.jpg</span>
  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token comment">// string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack内置插件" tabindex="-1"><a class="header-anchor" href="#webpack内置插件" aria-hidden="true">#</a> webpack内置插件</h3><p>所有的webpack内置插件都作为webpack的静态属性存在的，使用下面的方式即可创建一个插件对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span></span><span class="token function">插件名</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="defineplugin" tabindex="-1"><a class="header-anchor" href="#defineplugin" aria-hidden="true">#</a> DefinePlugin</h4><p>全局常量定义插件，使用该插件通常定义一些常量值，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token constant">PI</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Math.PI</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// PI = Math.PI</span>
    <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;1.0.0&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// VERSION = &quot;1.0.0&quot;</span>
    <span class="token constant">DOMAIN</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;duyi.com&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//DOMAIN = &quot;duyi.com&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，在源码中，我们可以直接使用插件中提供的常量，当webpack编译完成后，会自动替换为常量的值</p><h4 id="bannerplugin" tabindex="-1"><a class="header-anchor" href="#bannerplugin" aria-hidden="true">#</a> BannerPlugin</h4><p>它可以为每个chunk生成的文件头部添加一行注释，一般用于添加作者、公司、版权等信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">banner</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  hash:[hash]
  chunkhash:[chunkhash]
  name:[name]
  author:yuanjin
  corporation:duyi
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="provideplugin" tabindex="-1"><a class="header-anchor" href="#provideplugin" aria-hidden="true">#</a> ProvidePlugin</h4><p>自动加载模块，而不必到处 import 或 require</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在我们任意源码中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;= 起作用</span>
_<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;= 起作用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 内置插件来自于 webpack</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 全局常量定义插件，使用该插件通常定义一些常量值, 这样一来，在源码中，我们可以直接使用插件中提供的常量，当webpack编译完成后，会自动替换为常量的值</span>
        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token constant">PI</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Math.PI</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// const PI = Math.PI</span>
            <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;1.0.0&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// VERSION = &quot;1.0.0&quot;</span>
            <span class="token constant">DOMAIN</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;cdaloong.com&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// DOMAIN = &quot;cdaloong.com&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token comment">// 它可以为每个chunk生成的文件头部添加一行注释，一般用于添加作者、公司、版权等信息</span>
        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">banner</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
            hash:[hash]
            chunkhash:[chunkhash]
            name:[name]
            author:yuanjin
            corporation:duyi
            </span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token comment">// 自动加载模块，而不必到处 import 或 require, 然后在我们任意源码中：$(&#39;#item&#39;);  &lt;= 起作用; _.drop([1, 2, 3], 2); &lt;= 起作用</span>
        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="css工程化概述" tabindex="-1"><a class="header-anchor" href="#css工程化概述" aria-hidden="true">#</a> css工程化概述</h1><h2 id="css的问题" tabindex="-1"><a class="header-anchor" href="#css的问题" aria-hidden="true">#</a> css的问题</h2><h3 id="类名冲突的问题" tabindex="-1"><a class="header-anchor" href="#类名冲突的问题" aria-hidden="true">#</a> 类名冲突的问题</h3><p>当你写一个css类的时候，你是写全局的类呢，还是写多个层级选择后的类呢？ 你会发现，怎么都不好</p><ul><li>过深的层级不利于编写、阅读、压缩、复用</li><li>过浅的层级容易导致类名冲突</li></ul><p>一旦样式多起来，这个问题就会变得越发严重，其实归根结底，就是类名冲突不好解决的问题</p><h3 id="重复样式" tabindex="-1"><a class="header-anchor" href="#重复样式" aria-hidden="true">#</a> 重复样式</h3><p>这种问题就更普遍了，一些重复的样式值总是不断的出现在css代码中，维护起来极其困难 比如，一个网站的颜色一般就那么几种：</p><ul><li>primary</li><li>info</li><li>warn</li><li>error</li><li>success</li></ul><p>如果有更多的颜色，都是从这些色调中自然变化得来，可以想象，这些颜色会到处充斥到诸如背景、文字、边框中，一旦要做颜色调整，是一个非常大的工程</p><h3 id="css文件细分问题" tabindex="-1"><a class="header-anchor" href="#css文件细分问题" aria-hidden="true">#</a> css文件细分问题</h3><p>在大型项目中，css也需要更细的拆分，这样有利于css代码的维护。 比如，有一个做轮播图的模块，它不仅需要依赖js功能，还需要依赖css样式，既然依赖的js功能仅关心轮播图，那css样式也应该仅关心轮播图，由此类推，不同的功能依赖不同的css样式、公共样式可以单独抽离，这样就形成了不同于过去的css文件结构：文件更多、拆分的更细 而同时，在真实的运行环境下，我们却希望文件越少越好，这种情况和JS遇到的情况是一致的 因此，对于css，也需要工程化管理 从另一个角度来说，css的工程化会遇到更多的挑战，因为css不像JS，它的语法本身经过这么多年并没有发生多少的变化（css3也仅仅是多了一些属性而已），对于css语法本身的改变也是一个工程化的课题</p><h2 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决" aria-hidden="true">#</a> 如何解决</h2><p>这么多年来，官方一直没有提出方案来解决上述问题 一些第三方机构针对不同的问题，提出了自己的解决方案</p><h3 id="解决类名冲突" tabindex="-1"><a class="header-anchor" href="#解决类名冲突" aria-hidden="true">#</a> 解决类名冲突</h3><p>一些第三方机构提出了一些方案来解决该问题，常见的解决方案如下：</p><h4 id="命名约定" tabindex="-1"><a class="header-anchor" href="#命名约定" aria-hidden="true">#</a> 命名约定</h4><p>即提供一种命名的标准，来解决冲突，常见的标准有：</p><ul><li>BEM</li><li>OOCSS</li><li>AMCSS</li><li>SMACSS</li><li>其他</li></ul><h4 id="css-in-js" tabindex="-1"><a class="header-anchor" href="#css-in-js" aria-hidden="true">#</a> css in js</h4><p>这种方案非常大胆，它觉得，css语言本身几乎无可救药了，干脆直接用js对象来表示样式，然后把样式直接应用到元素的style中 这样一来，css变成了一个一个的对象，就可以完全利用到js语言的优势，你可以：</p><ul><li>通过一个函数返回一个样式对象</li><li>把公共的样式提取到公共模块中返回</li><li>应用js的各种特性操作对象，比如：混合、提取、拆分</li><li>更多的花样</li></ul><blockquote><p>这种方案在手机端的React Native中大行其道</p></blockquote><h4 id="css-module" tabindex="-1"><a class="header-anchor" href="#css-module" aria-hidden="true">#</a> css module</h4><p>非常有趣和好用的css模块化方案，编写简单，绝对不重名</p><h3 id="解决重复样式的问题" tabindex="-1"><a class="header-anchor" href="#解决重复样式的问题" aria-hidden="true">#</a> 解决重复样式的问题</h3><h4 id="css-in-js-1" tabindex="-1"><a class="header-anchor" href="#css-in-js-1" aria-hidden="true">#</a> css in js</h4><p>这种方案虽然可以利用js语言解决重复样式值的问题，但由于太过激进，很多习惯写css的开发者编写起来并不是很适应</p><h4 id="预编译器" tabindex="-1"><a class="header-anchor" href="#预编译器" aria-hidden="true">#</a> 预编译器</h4><p>有些第三方搞出一套css语言的进化版来解决这个问题，它支持变量、函数等高级语法，然后经过编译器将其编译成为正常的css 这种方案特别像构建工具，不过它仅针对css 常见的预编译器支持的语言有：</p><ul><li>less</li><li>sass</li></ul><h2 id="解决css文件细分问题" tabindex="-1"><a class="header-anchor" href="#解决css文件细分问题" aria-hidden="true">#</a> 解决css文件细分问题</h2><p>这一部分，就要依靠构建工具，例如webpack来解决了 利用一些loader或plugin来打包、合并、压缩css文件</p><h3 id="利用webpack拆分css" tabindex="-1"><a class="header-anchor" href="#利用webpack拆分css" aria-hidden="true">#</a> 利用webpack拆分css</h3><p>要拆分css，就必须把css当成像js那样的模块；要把css当成模块，就必须有一个构建工具（webpack），它具备合并代码的能力 而webpack本身只能读取css文件的内容、将其当作JS代码进行分析，因此，会在构建 AST 抽象语法树的时候导致错误 于是，就必须有一个loader，能够将css代码转换为js代码</p><h3 id="css-loader" tabindex="-1"><a class="header-anchor" href="#css-loader" aria-hidden="true">#</a> css-loader</h3><p>css-loader的作用，就是将css代码转换为js代码</p><p><strong>它的处理原理极其简单：将css代码作为字符串导出</strong></p><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.red</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token string">&quot;#f40&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过css-loader转换后变成js代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.red{
    color:&quot;#f40&quot;;
}</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的js代码是经过我简化后的，不代表真实的css-loader的转换后代码，css-loader转换后的代码会有些复杂，同时会导出更多的信息，但核心思想不变</p></blockquote><p>再例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.red</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token string">&quot;#f40&quot;</span><span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;./bg.png&quot;</span><span class="token punctuation">)</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过css-loader转换后变成js代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> import1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./bg.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.red{
    color:&quot;#f40&quot;;
    background:url(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>import1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，经过webpack的后续处理，会把依赖<code>./bg.png</code>添加到模块列表，然后再将代码转换为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> import1 <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;./src/bg.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.red{
    color:&quot;#f40&quot;;
    background:url(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>import1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;./reset.css&quot;</span><span class="token punctuation">;</span></span>
<span class="token selector">.red</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token string">&quot;#f40&quot;</span><span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;./bg.png&quot;</span><span class="token punctuation">)</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会转换为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> import1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./reset.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> import2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./bg.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>import1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
.red{
    color:&quot;#f40&quot;;
    background:url(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>import2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)
}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结，css-loader干了什么：</p><ol><li>将css文件的内容作为字符串导出</li><li>将css中的其他依赖作为require导入，以便webpack分析依赖</li></ol><h3 id="style-loader" tabindex="-1"><a class="header-anchor" href="#style-loader" aria-hidden="true">#</a> style-loader</h3><p>由于css-loader仅提供了将css转换为字符串导出的能力，剩余的事情要交给其他loader或plugin来处理</p><p>style-loader可以将css-loader转换后的代码进一步处理，将css-loader导出的字符串加入到页面的style元素中</p><p>例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.red</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span><span class="token string">&quot;#f40&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过css-loader转换后变成js代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.red{
    color:&quot;#f40&quot;;
}</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过style-loader转换后变成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.red{
    color:&quot;#f40&quot;;
}</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">var</span> style <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token keyword">var</span> styleElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
styleElem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> style<span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>styleElem<span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上代码均为简化后的代码，并不代表真实的代码 style-loader有能力避免同一个样式的重复导入</p></blockquote><h2 id="bem" tabindex="-1"><a class="header-anchor" href="#bem" aria-hidden="true">#</a> BEM</h2><p>BEM是一套针对css类样式的命名方法。</p><blockquote><p>其他命名方法还有：OOCSS、AMCSS、SMACSS等等</p></blockquote><p>BEM全称是：<strong>B</strong>lock <strong>E</strong>lement <strong>M</strong>odifier</p><p>一个完整的BEM类名：block__element_modifier，例如：<code>banner__dot_selected</code>，可以表示：轮播图中，处于选中状态的小圆点 <img src="`+R+`" alt="image.png"> 三个部分的具体含义为：</p><ul><li><strong>Block</strong>：页面中的大区域，表示最顶级的划分，例如：轮播图(<code>banner</code>)、布局(<code>layout</code>)、文章(<code>article</code>)等等</li><li><strong>element</strong>：区域中的组成部分，例如：轮播图中的横幅图片(<code>banner__img</code>)、轮播图中的容器（<code>banner__container</code>）、布局中的头部(<code>layout__header</code>)、文章中的标题(<code>article_title</code>)</li><li><strong>modifier</strong>：可选。通常表示状态，例如：处于展开状态的布局左边栏（<code>layout__left_expand</code>）、处于选中状态的轮播图小圆点(<code>banner__dot_selected</code>)</li></ul><p>在某些大型工程中，如果使用BEM命名法，还可能会增加一个前缀，来表示类名的用途，常见的前缀有：</p><ul><li><strong>l</strong>: layout，表示这个样式是用于布局的</li><li><strong>c</strong>: component，表示这个样式是一个组件，即一个功能区域</li><li><strong>u</strong>: util，表示这个样式是一个通用的、工具性质的样式</li><li><strong>j</strong>: javascript，表示这个样式没有实际意义，是专门提供给js获取元素使用的</li></ul><h2 id="css-in-js-2" tabindex="-1"><a class="header-anchor" href="#css-in-js-2" aria-hidden="true">#</a> css in js</h2><p>css in js 的核心思想是：用一个JS对象来描述样式，而不是css样式表</p><p>例如下面的对象就是一个用于描述样式的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&quot;#f40&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;#fff&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&quot;400px&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&quot;500px&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&quot;0 auto&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这种描述样式的方式<strong>根本就不存在类名</strong>，自然不会有类名冲突</p><p>至于如何把样式应用到界面上，不是它所关心的事情，你可以用任何技术、任何框架、任何方式将它应用到界面。</p><blockquote><p>后续学习的vue、react都支持css in js，可以非常轻松的应用到界面</p></blockquote><p>css in js的特点：</p><ul><li><strong>绝无冲突的可能</strong>：由于它根本不存在类名，所以绝不可能出现类名冲突</li><li><strong>更加灵活</strong>：可以充分利用JS语言灵活的特点，用各种招式来处理样式</li><li><strong>应用面更广</strong>：只要支持js语言，就可以支持css in js，因此，在一些用JS语言开发移动端应用的时候非常好用，因为移动端应用很有可能并不支持css</li><li><strong>书写不便</strong>：书写样式，特别是公共样式的时候，处理起来不是很方便</li><li><strong>在页面中增加了大量冗余内容</strong>：在页面中处理css in js时，往往是将样式加入到元素的style属性中，会大量增加元素的内联样式，并且可能会有大量重复，不易阅读最终的页面代码</li></ul><h2 id="css-module-1" tabindex="-1"><a class="header-anchor" href="#css-module-1" aria-hidden="true">#</a> css module</h2><blockquote><p>通过命名规范来限制类名太过死板，而css in js虽然足够灵活，但是书写不便。 css module 开辟一种全新的思路来解决类名冲突的问题</p></blockquote><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>css module 遵循以下思路解决类名冲突问题：</p><ol><li>css的类名冲突往往发生在大型项目中</li><li>大型项目往往会使用构建工具（webpack等）搭建工程</li><li>构建工具允许将css样式切分为更加精细的模块</li><li>同JS的变量一样，每个css模块文件中难以出现冲突的类名，冲突的类名往往发生在不同的css模块文件中</li><li>只需要保证构建工具在合并样式代码后不会出现类名冲突即可</li></ol><p><img src="`+N+'" alt="image.png"></p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>在webpack中，作为处理css的css-loader，它实现了css module的思想，要启用css module，需要将css-loader的配置<code>modules</code>设置为<code>true</code>。</p><p>css 文件需要在使用的地方手动引用：import 到 js 或 @import 到 css</p><p>css-loader的实现方式如下： <img src="'+T+'" alt="image.png"> 原理极其简单，开启了css module后，css-loader会将样式中的类名进行转换，转换为一个唯一的hash值。</p><p>由于hash值是根据模块路径和类名生成的，因此，不同的css模块，哪怕具有相同的类名，转换后的hash值也不一样。 <img src="'+O+'" alt="image.png"></p><h3 id="如何应用样式" tabindex="-1"><a class="header-anchor" href="#如何应用样式" aria-hidden="true">#</a> 如何应用样式</h3><p>css module带来了一个新的问题：源代码的类名和最终生成的类名是不一样的，而开发者只知道自己写的源代码中的类名，并不知道最终的类名是什么，那如何应用类名到元素上呢？</p><p>为了解决这个问题，css-loader会导出原类名和最终类名的对应关系，该关系是通过一个对象描述的 <img src="'+W+`" alt="image.png"> 这样一来，我们就可以在js代码中获取到css模块导出的结果，从而应用类名了</p><p>style-loader为了我们更加方便的应用类名，会去除掉其他信息，仅暴露对应关系</p><h3 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作" aria-hidden="true">#</a> 其他操作</h3><h4 id="全局类名" tabindex="-1"><a class="header-anchor" href="#全局类名" aria-hidden="true">#</a> 全局类名</h4><p>某些类名是全局的、静态的，不需要进行转换，仅需要在类名位置使用一个特殊的语法即可：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:global(.main)</span><span class="token punctuation">{</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用了global的类名不会进行转换，相反的，没有使用global的类名，表示默认使用了local</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:local(.main)</span><span class="token punctuation">{</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用了local的类名表示局部类名，是可能会造成冲突的类名，会被css module进行转换</p><h4 id="如何控制最终的类名" tabindex="-1"><a class="header-anchor" href="#如何控制最终的类名" aria-hidden="true">#</a> 如何控制最终的类名</h4><p>绝大部分情况下，我们都不需要控制最终的类名，因为控制它没有任何意义</p><p>如果一定要控制最终的类名，需要配置css-loader的<code>localIdentName</code></p><h3 id="其他注意事项" tabindex="-1"><a class="header-anchor" href="#其他注意事项" aria-hidden="true">#</a> 其他注意事项</h3><ul><li>css module往往配合构建工具使用</li><li>css module仅处理顶级类名，尽量不要书写嵌套的类名，也没有这个必要</li><li>css module仅处理类名，不处理其他选择器</li><li>css module还会处理id选择器，不过任何时候都没有使用id选择器的理由</li><li>使用了css module后，只要能做到让类名望文知意即可，不需要遵守其他任何的命名规范</li></ul><h2 id="css预编译器" tabindex="-1"><a class="header-anchor" href="#css预编译器" aria-hidden="true">#</a> CSS预编译器</h2><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h3><p>编写css时，受限于css语言本身，常常难以处理一些问题：</p><ul><li>重复的样式值：例如常用颜色、常用尺寸</li><li>重复的代码段：例如绝对定位居中、清除浮动</li><li>重复的嵌套书写</li></ul><p>由于官方迟迟不对css语言本身做出改进，一些第三方机构开始想办法来解决这些问题</p><p>其中一种方案，便是预编译器</p><p>预编译器的原理很简单，即使用一种更加优雅的方式来书写样式代码，通过一个编译器，将其转换为可被浏览器识别的传统css代码 <img src="`+V+'" alt="image.png"> 目前，最流行的预编译器有<strong>LESS</strong>和<strong>SASS</strong>，由于它们两者特别相似，因此仅学习一种即可 <img src="'+H+'" alt="image.png"></p>',145),Nn={href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},Tn={href:"http://lesscss.cn/",target:"_blank",rel:"noopener noreferrer"},On={href:"https://less.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://sass-lang.com/",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://www.sass.hk/",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://sass.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},Un=p(`<h3 id="less的安装和使用" tabindex="-1"><a class="header-anchor" href="#less的安装和使用" aria-hidden="true">#</a> LESS的安装和使用</h3><p>从原理可知，要使用LESS，必须要安装LESS编译器</p><p>LESS编译器是基于node开发的，可以通过npm下载安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> <span class="token function">less</span> less-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装好了less之后，它提供了一个CLI工具<code>lessc</code>，通过该工具即可完成编译</p><p>与webpack联用只需在module配置规则就行，先less-loader，再css-loader，再style-loader，注意从右往左</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lessc less代码文件 编译后的文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>试一试:</p><p>新建一个<code>index.less</code>文件，编写内容如下：</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// less代码</span>
<span class="token variable">@red<span class="token punctuation">:</span></span> #f40<span class="token punctuation">;</span>

<span class="token selector">.redcolor</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@red</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lessc index.less index.css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到编译之后的代码：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.redcolor</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="less的基本使用" tabindex="-1"><a class="header-anchor" href="#less的基本使用" aria-hidden="true">#</a> LESS的基本使用</h3>`,15),Fn={href:"https://less.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},Gn=p('<ul><li>变量</li><li>混合</li><li>嵌套</li><li>运算</li><li>函数</li><li>作用域</li><li>注释</li><li>导入</li></ul><h2 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss" aria-hidden="true">#</a> PostCss</h2><blockquote><p>本节课的内容和webpack无关！！！</p></blockquote><h3 id="什么是postcss" tabindex="-1"><a class="header-anchor" href="#什么是postcss" aria-hidden="true">#</a> 什么是PostCss</h3><p>学习到现在，可以看出，CSS工程化面临着诸多问题，而解决这些问题的方案多种多样。</p><p>如果把CSS单独拎出来看，光是样式本身，就有很多事情要处理。</p><p>既然有这么多事情要处理，何不把这些事情集中到一起统一处理呢？</p><p>PostCss就是基于这样的理念出现的，借鉴了 webpack，本身就是一个打包工具</p><p>PostCss类似于一个编译器，可以将样式源码编译成最终的CSS代码 <img src="'+U+'" alt="image.png"> 看上去是不是和LESS、SASS一样呢？</p><p>但PostCss和LESS、SASS的思路不同，它其实只做一些代码分析之类的事情，将分析的结果交给插件，具体的代码转换操作是插件去完成的。 <img src="'+F+'" alt="image.png"> 官方的一张图更能说明postcss的处理流程： <img src="'+G+'" alt="image.png"></p><blockquote><p>这一点有点像webpack，webpack本身仅做依赖分析、抽象语法树分析，其他的操作是靠插件和加载器完成的。</p></blockquote>',11),Kn={href:"https://postcss.org/",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://github.com/postcss/postcss",target:"_blank",rel:"noopener noreferrer"},Xn=p(`<h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>PostCss是基于node编写的，因此可以使用npm安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> postcss
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),Yn={href:"http://api.postcss.org/",target:"_blank",rel:"noopener noreferrer"},Zn=p(`<p>不过绝大部分时候，我们都是使用者，并不希望使用代码的方式来使用PostCss</p><p>因此，我们可以再安装一个postcss-cli，通过命令行来完成编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> postcss-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>postcss-cli提供一个命令，它调用postcss中的api来完成编译</p><p>命令的使用方式为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>postcss 源码文件 <span class="token parameter variable">-o</span> 输出文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置文件-1" tabindex="-1"><a class="header-anchor" href="#配置文件-1" aria-hidden="true">#</a> 配置文件</h3><p>和webpack类似，postcss有自己的配置文件，该配置文件会影响postcss的某些编译行为。</p><p>配置文件的默认名称是：<code>postcss.config.js</code></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//关闭source-map</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h3><p>光使用postcss是没有多少意义的，要让它真正的发挥作用，需要插件</p>`,13),ns={href:"https://www.postcss.parts/",target:"_blank",rel:"noopener noreferrer"},ss=p(`<p>下面罗列一些postcss的常用插件</p><h3 id="postcss-preset-env" tabindex="-1"><a class="header-anchor" href="#postcss-preset-env" aria-hidden="true">#</a> postcss-preset-env</h3><p>过去使用postcss的时候，往往会使用大量的插件，它们各自解决一些问题</p><p>这样导致的结果是安装插件、配置插件都特别的繁琐</p><p>于是出现了这么一个插件<code>postcss-preset-env</code>，它称之为<code>postcss预设环境</code>，大意就是它整合了很多的常用插件到一起，并帮你完成了基本的配置，你只需要安装它一个插件，就相当于安装了很多插件了。</p><p>安装好该插件后，在postcss配置中加入下面的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;postcss-preset-env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// {} 中可以填写插件的配置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该插件的功能很多，下面一一介绍</p><h4 id="自动的厂商前缀" tabindex="-1"><a class="header-anchor" href="#自动的厂商前缀" aria-hidden="true">#</a> 自动的厂商前缀</h4><p>某些新的css样式需要在旧版本浏览器中使用厂商前缀方可实现</p><p>例如</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">::placeholder</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该功能在不同的旧版本浏览器中需要书写为</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">::-webkit-input-placeholder</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">::-moz-placeholder</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">:-ms-input-placeholder</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">::-ms-input-placeholder</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">::placeholder</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要完成这件事情，需要使用<code>autoprefixer</code>库。</p><p>而<code>postcss-preset-env</code>内部包含了该库，自动有了该功能。</p><p>如果需要调整<strong>兼容的浏览器</strong>范围，可以通过下面的方式进行配置</p><p><strong>方式1：在postcss-preset-env的配置中加入browsers</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;postcss-preset-env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">browsers</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;last 2 version&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;&gt; 1%&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2【推荐】：添加 .browserslistrc 文件</strong></p><p>创建文件<code>.browserslistrc</code>，填写配置内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>last 2 version
&gt; 1%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式3【推荐】：在package.json的配置中加入browserslist</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;last 2 version&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;&gt; 1%&quot;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>browserslist</code>是一个多行的（数组形式的）标准字符串。</p>`,25),as={href:"https://github.com/browserslist/browserslist",target:"_blank",rel:"noopener noreferrer"},es=p(`<p>一般情况下，大部分网站都使用下面的格式进行书写</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>last 2 version
&gt; 1% in CN
not ie &lt;= 8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>last 2 version</code>: 浏览器的兼容最近期的两个版本</li><li><code>&gt; 1% in CN</code>: 匹配中国大于1%的人使用的浏览器， <code>in CN</code>可省略</li><li><code>not ie &lt;= 8</code>: 排除掉版本号小于等于8的IE浏览器</li></ul><blockquote><p>默认情况下，匹配的结果求的是并集</p></blockquote>`,4),ps={href:"https://browserl.ist/",target:"_blank",rel:"noopener noreferrer"},ts={href:"http://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},os=p(`<h4 id="未来的css语法" tabindex="-1"><a class="header-anchor" href="#未来的css语法" aria-hidden="true">#</a> 未来的CSS语法</h4><p>CSS的某些前沿语法正在制定过程中，没有形成真正的标准，如果希望使用这部分语法，为了浏览器兼容性，需要进行编译</p><p>过去，完成该语法编译的是<code>cssnext</code>库，不过有了<code>postcss-preset-env</code>后，它自动包含了该功能。</p><p>你可以通过<code>postcss-preset-env</code>的<code>stage</code>配置，告知<code>postcss-preset-env</code>需要对哪个阶段的css语法进行兼容处理，它的默认值为2</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;postcss-preset-env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">stage</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一共有5个阶段可配置：</p><ul><li>Stage 0: Aspirational - 只是一个早期草案，极其不稳定</li><li>Stage 1: Experimental - 仍然极其不稳定，但是提议已被W3C公认</li><li>Stage 2: Allowable - 虽然还是不稳定，但已经可以使用了</li><li>Stage 3: Embraced - 比较稳定，可能将来会发生一些小的变化，它即将成为最终的标准</li><li>Stage 4: Standardized - 所有主流浏览器都应该支持的W3C标准</li></ul><p>了解了以上知识后，接下来了解一下未来的css语法，尽管某些语法仍处于非常早期的阶段，但是有该插件存在，编译后仍然可以被浏览器识别</p><h5 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h5><p>未来的css语法是天然支持变量的</p><p>在<code>:root{}</code>中定义常用变量，使用<code>--</code>前缀命名变量</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span><span class="token punctuation">{</span>
    <span class="token property">--lightColor</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
    <span class="token property">--darkColor</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">a</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--lightColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--darkColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>编译后，仍然可以看到原语法，因为某些新语法的存在并不会影响浏览器的渲染，尽管浏览器可能不认识 如果不希望在结果中看到新语法，可以配置<code>postcss-preset-env</code>的<code>preserve</code>为<code>false</code></p></blockquote><h5 id="自定义选择器" tabindex="-1"><a class="header-anchor" href="#自定义选择器" aria-hidden="true">#</a> 自定义选择器</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@custom-selector</span> <span class="token punctuation">:</span>--heading h1<span class="token punctuation">,</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4<span class="token punctuation">,</span> h5<span class="token punctuation">,</span> h6<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@custom-selector</span> <span class="token punctuation">:</span><span class="token property">--enter</span> <span class="token punctuation">:</span>focus<span class="token punctuation">,</span><span class="token punctuation">:</span>hover<span class="token punctuation">;</span></span>

<span class="token selector">a:--enter</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">:--heading</span><span class="token punctuation">{</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">:--heading.active</span><span class="token punctuation">{</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a:focus,a:hover</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #f40<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">h1,h2,h3,h4,h5,h6</span><span class="token punctuation">{</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">h1.active,h2.active,h3.active,h4.active,h5.active,h6.active</span><span class="token punctuation">{</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="嵌套" tabindex="-1"><a class="header-anchor" href="#嵌套" aria-hidden="true">#</a> 嵌套</h5><p>与LESS相同，只不过嵌套的选择器前必须使用符号<code>&amp;</code></p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">.a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token selector">&amp; .b</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">&amp; &gt; .b</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red
<span class="token punctuation">}</span>

<span class="token selector">.a .b</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.a&gt;.b</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.a:hover</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postcss-apply" tabindex="-1"><a class="header-anchor" href="#postcss-apply" aria-hidden="true">#</a> postcss-apply</h3><p>该插件可以支持在css中书写属性集</p><p>类似于LESS中的混入，可以利用CSS的新语法定义一个CSS代码片段，然后在需要的时候应用它</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token selector">--center:</span> <span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>50%<span class="token punctuation">,</span> <span class="token operator">-</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.item</span><span class="token punctuation">{</span>
    <span class="token variable">@apply</span> <span class="token operator">-</span><span class="token operator">-</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实际上，该功能也属于cssnext，不知为何<code>postcss-preset-env</code>没有支持</p></blockquote><h3 id="postcss-color-function" tabindex="-1"><a class="header-anchor" href="#postcss-color-function" aria-hidden="true">#</a> postcss-color-function</h3><p>该插件支持在源码中使用一些颜色函数</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>#aabbcc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc透明度设置为90% */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>#aabbcc <span class="token function">a</span><span class="token punctuation">(</span>90%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc的红色部分设置为90% */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>#aabbcc <span class="token function">red</span><span class="token punctuation">(</span>90%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>#aabbcc <span class="token function">tint</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>#aabbcc <span class="token function">shade</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>170<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 204<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc透明度设置为90% */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>170<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 204<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc的红色部分设置为90% */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>230<span class="token punctuation">,</span> 187<span class="token punctuation">,</span> 204<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>213<span class="token punctuation">,</span> 221<span class="token punctuation">,</span> 230<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>85<span class="token punctuation">,</span> 94<span class="token punctuation">,</span> 102<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-postcss-import" tabindex="-1"><a class="header-anchor" href="#扩展-postcss-import" aria-hidden="true">#</a> [扩展]postcss-import</h3><p>该插件可以让你在<code>postcss</code>文件中导入其他样式代码，通过该插件可以将它们合并</p><blockquote><p>由于后续的课程中，会将postcss加入到webpack中，而webpack本身具有依赖分析的功能，所以该插件的实际意义不大</p></blockquote><h3 id="stylelint" tabindex="-1"><a class="header-anchor" href="#stylelint" aria-hidden="true">#</a> stylelint</h3>`,38),ls={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},cs=p(`<p>在实际的开发中，我们可能会错误的或不规范的书写一些css代码，stylelint插件会即时的发现错误</p><p>由于不同的公司可能使用不同的CSS书写规范，stylelint为了保持灵活，它本身并没有提供具体的规则验证</p><p>你需要安装或自行编写规则验证方案</p><p>通常，我们会安装<code>stylelint-config-standard</code>库来提供标准的CSS规则判定</p><p>安装好后，我们需要告诉stylelint使用该库来进行规则验证</p><p>告知的方式有多种，比较常见的是使用文件<code>.stylelintrc</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//.styleintrc</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint-config-standard&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，如果你的代码出现不规范的地方，编译时将会报出错误</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #f4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+K+`" alt="image.png"> 发生了两处错误：</p><ol><li>缩进应该只有两个空格</li><li>十六进制的颜色值不正确</li></ol><p>如果某些规则并非你所期望的，可以在配置中进行设置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint-config-standard&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;indentation&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),is=n("code",null,"null",-1),rs={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},us=p(`<p>但是这种错误报告需要在编译时才会发生，如果我希望在编写代码时就自动在编辑器里报错呢？</p><p>既然想在编辑器里达到该功能，那么就要在编辑器里做文章</p><p>安装vscode的插件<code>stylelint</code>即可，它会读取你工程中的配置文件，按照配置进行实时报错</p><blockquote><p>实际上，如果你拥有了<code>stylelint</code>插件，可以不需要在postcss中使用该插件了</p></blockquote><h2 id="抽离css文件" tabindex="-1"><a class="header-anchor" href="#抽离css文件" aria-hidden="true">#</a> 抽离css文件</h2><p>目前，css代码被 css-loader 转换后，交给的是 style-loader 进行处理。</p><p>style-loader 使用的方式是用一段 js 代码，将样式加入到 style 元素中。</p><p>而实际的开发中，我们往往希望依赖的样式最终形成一个css文件</p><p>此时，就需要用到一个库：<code>mini-css-extract-plugin</code></p><p>该库提供了1个plugin和1个loader</p><ul><li>plugin：负责生成css文件</li><li>loader：负责记录要生成的css文件的内容，同时导出开启css-module后的样式对象</li></ul><p>使用方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader?modules&quot;</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//负责生成css文件</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置生成的文件名</strong></p><p>同<code>output.filename</code>的含义一样，即根据chunk生成的样式文件名</p><p>配置生成的文件名，例如<code>[name].[contenthash:5].css</code></p><p>默认情况下，每个chunk对应一个css文件</p><h1 id="babel的安装和使用" tabindex="-1"><a class="header-anchor" href="#babel的安装和使用" aria-hidden="true">#</a> babel的安装和使用</h1>`,18),ds={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://www.babeljs.cn/",target:"_blank",rel:"noopener noreferrer"},vs=p('<h2 id="babel简介" tabindex="-1"><a class="header-anchor" href="#babel简介" aria-hidden="true">#</a> babel简介</h2><p>babel一词来自于希伯来语，直译为巴别塔 <img src="'+Q+'" alt="image.png"> 巴别塔象征的统一的国度、统一的语言</p><p>而今天的JS世界缺少一座巴别塔，不同版本的浏览器能识别的ES标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。</p><p>babel的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言 <img src="'+X+'" alt="image.png"> 由于语言的转换工作灵活多样，babel的做法和postcss、webpack差不多，它本身仅提供一些分析功能，真正的转换需要依托于插件完成 <img src="'+Y+`" alt="image.png"></p><h2 id="babel的安装" tabindex="-1"><a class="header-anchor" href="#babel的安装" aria-hidden="true">#</a> babel的安装</h2><p>babel可以和构建工具联合使用，也可以独立使用</p><p>如果要独立的使用babel，需要安装下面两个库：</p><ul><li>@babel/core：babel核心库，提供了编译所需的所有api</li><li>@babel/cli：提供一个命令行工具，调用核心库的api完成编译</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @babel/core @babel/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="babel的使用" tabindex="-1"><a class="header-anchor" href="#babel的使用" aria-hidden="true">#</a> babel的使用</h2><p>@babel/cli的使用极其简单</p><p>它提供了一个命令<code>babel</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 按文件编译</span>
babel 要编译的文件 <span class="token parameter variable">-o</span> 编辑结果文件

<span class="token comment"># 按目录编译</span>
babel 要编译的整个目录 <span class="token parameter variable">-d</span> 编译结果放置的目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel的配置" tabindex="-1"><a class="header-anchor" href="#babel的配置" aria-hidden="true">#</a> babel的配置</h2><p>可以看到，babel本身没有做任何事情，真正的编译要依托于<strong>babel插件</strong>和<strong>babel预设</strong>来完成</p><blockquote><p>babel预设和postcss预设含义一样，是多个插件的集合体，用于解决一系列常见的兼容问题</p></blockquote><p>如何告诉babel要使用哪些插件或预设呢？需要通过一个配置文件<code>.babelrc</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel预设" tabindex="-1"><a class="header-anchor" href="#babel预设" aria-hidden="true">#</a> babel预设</h2><p>babel有多种预设，最常见的预设是<code>@babel/preset-env</code></p><p><code>@babel/preset-env</code>可以让你使用最新的JS语法，而无需针对每种语法转换设置具体的插件</p><p><strong>配置</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;@babel/preset-env&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>兼容的浏览器</strong></p><p><code>@babel/preset-env</code>需要根据兼容的浏览器范围来确定如何编译，和postcss一样，可以使用文件<code>.browserslistrc</code>来描述浏览器的兼容范围</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>last 3 version
&gt; 1%
not ie &lt;= 8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自身的配置</strong></p><p>和<code>postcss-preset-env</code>一样，<code>@babel/preset-env</code>自身也有一些配置</p>`,28),ms={href:"https://www.babeljs.cn/docs/babel-preset-env#options",target:"_blank",rel:"noopener noreferrer"},bs=p(`<p>配置方式是：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;配置项1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;配置值&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;配置项2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;配置值&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;配置项3&quot;</span><span class="token operator">:</span> <span class="token string">&quot;配置值&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中一个比较常见的配置项是<code>usebuiltins</code>，该配置的默认值是false</p><p>它有什么用呢？由于该预设仅转换新的语法，并不对新的API进行任何处理</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换的结果为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果遇到没有Promise构造函数的旧版本浏览器，该代码就会报错</p><p>而配置<code>usebuiltins</code>可以在编译结果中注入这些新的API，它的值默认为<code>false</code>，表示不注入任何新的API，可以将其设置为<code>usage</code>，表示根据API的使用情况，按需导入API</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel插件" tabindex="-1"><a class="header-anchor" href="#babel插件" aria-hidden="true">#</a> babel插件</h2><blockquote><p>@babel/polyfill 已过时，目前被<code>core-js</code>和<code>generator-runtime</code>所取代</p></blockquote><p>除了预设可以转换代码之外，插件也可以转换代码，它们的顺序是：</p><ul><li>插件在 Presets 前运行。</li><li>插件顺序从前往后排列。</li><li>Preset 顺序是颠倒的（从后往前）。</li></ul><p>通常情况下，<code>@babel/preset-env</code>只转换那些已经形成正式标准的语法，对于某些处于早期阶段、还没有确定的语法不做转换。</p><p>如果要转换这些语法，就要单独使用插件</p><p>下面随便列举一些插件</p><h3 id="babel-plugin-proposal-class-properties" tabindex="-1"><a class="header-anchor" href="#babel-plugin-proposal-class-properties" aria-hidden="true">#</a> <code>@babel/plugin-proposal-class-properties</code></h3><p>该插件可以让你在类中书写初始化字段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="babel-plugin-proposal-function-bind" tabindex="-1"><a class="header-anchor" href="#babel-plugin-proposal-function-bind" aria-hidden="true">#</a> <code>@babel/plugin-proposal-function-bind</code></h3><p>该插件可以让你轻松的为某个方法绑定this</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token literal-property property">obj</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//相当于：Print.call(obj);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>遗憾的是，目前vscode无法识别该语法，会在代码中报错，虽然并不会有什么实际性的危害，但是影响观感</p></blockquote><h3 id="babel-plugin-proposal-optional-chaining" tabindex="-1"><a class="header-anchor" href="#babel-plugin-proposal-optional-chaining" aria-hidden="true">#</a> <code>@babel/plugin-proposal-optional-chaining</code></h3><p>该插件可以转化一些最新的 es 语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> baz <span class="token operator">=</span> obj<span class="token operator">?.</span>foo<span class="token operator">?.</span>bar<span class="token operator">?.</span>baz<span class="token punctuation">;</span> <span class="token comment">// 42</span>

<span class="token keyword">const</span> safe <span class="token operator">=</span> obj<span class="token operator">?.</span>qux<span class="token operator">?.</span>baz<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="babel-plugin-transform-remove-console" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-remove-console" aria-hidden="true">#</a> <code>babel-plugin-transform-remove-console</code></h3><p>该插件会移除源码中的控制台输出语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后</p><h3 id="babel-plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a> <code>@babel/plugin-transform-runtime</code></h3><p>用于提供一些公共的API，这些API会帮助代码转换</p><h1 id="性能优化概述" tabindex="-1"><a class="header-anchor" href="#性能优化概述" aria-hidden="true">#</a> 性能优化概述</h1><p>本章所讲的性能优化主要体现在三个方面： <img src="`+Z+'" alt="image.png"><strong>构建性能</strong></p><p>这里所说的构建性能，是指在<strong>开发阶段的构建性能</strong>，而不是生产环境的构建性能</p><p>优化的目标，<strong>是降低从打包开始，到代码效果呈现所经过的时间</strong></p><p>构建性能会影响开发效率。构建性能越高，开发过程中时间的浪费越少</p><p><strong>传输性能</strong></p><p>传输性能是指，打包后的JS代码传输到浏览器经过的时间</p><p>在优化传输性能时要考虑到：</p><ol><li>总传输量：所有需要传输的JS文件的内容加起来，就是总传输量，重复代码越少，总传输量越少</li><li>文件数量：当访问页面时，需要传输的JS文件数量，文件数量越多，http请求越多，响应速度越慢</li><li>浏览器缓存：JS文件会被浏览器缓存，被缓存的文件不会再进行传输</li></ol><p><strong>运行性能</strong></p><p>运行性能是指，JS代码在浏览器端的运行速度</p><p>它主要取决于我们如何书写高性能的代码</p><p><strong>永远不要过早的关注于性能</strong>，因为你在开发的时候，无法完全预知最终的运行性能，过早的关注性能会极大的降低开发效率</p><hr><p>性能优化主要从上面三个维度入手</p><p><strong>性能优化没有完美的解决方案，需要具体情况具体分析</strong></p><h2 id="优化构建性能" tabindex="-1"><a class="header-anchor" href="#优化构建性能" aria-hidden="true">#</a> <strong>优化构建性能</strong></h2><h3 id="减少模块解析" tabindex="-1"><a class="header-anchor" href="#减少模块解析" aria-hidden="true">#</a> 减少模块解析</h3><h4 id="什么叫做模块解析" tabindex="-1"><a class="header-anchor" href="#什么叫做模块解析" aria-hidden="true">#</a> 什么叫做模块解析？</h4><p><img src="'+nn+'" alt="image.png"> 模块解析包括：抽象语法树分析、依赖分析、模块语法替换</p><h4 id="不做模块解析会怎样" tabindex="-1"><a class="header-anchor" href="#不做模块解析会怎样" aria-hidden="true">#</a> 不做模块解析会怎样？</h4><p><img src="'+sn+`" alt="image.png"> 如果某个模块不做解析，该模块经过loader处理后的代码就是最终代码。</p><p>如果没有loader对该模块进行处理，该模块的源码就是最终打包结果的代码。</p><p>如果不对某个模块进行解析，可以缩短构建时间</p><h4 id="哪些模块不需要解析" tabindex="-1"><a class="header-anchor" href="#哪些模块不需要解析" aria-hidden="true">#</a> 哪些模块不需要解析？</h4><p>模块中无其他依赖：一些已经打包好的第三方库，比如jquery</p><h4 id="如何让某个模块不要解析" tabindex="-1"><a class="header-anchor" href="#如何让某个模块不要解析" aria-hidden="true">#</a> 如何让某个模块不要解析？</h4><p>配置<code>module.noParse</code>，它是一个正则，被正则匹配到的模块不会解析</p><h3 id="优化loader性能" tabindex="-1"><a class="header-anchor" href="#优化loader性能" aria-hidden="true">#</a> 优化loader性能</h3><h4 id="进一步限制loader的应用范围" tabindex="-1"><a class="header-anchor" href="#进一步限制loader的应用范围" aria-hidden="true">#</a> 进一步限制loader的应用范围</h4><p>思路是：对于某些库，不使用loader</p><p>例如：babel-loader可以转换ES6或更高版本的语法，可是有些库本身就是用ES5语法书写的，不需要转换，使用babel-loader反而会浪费构建时间</p><p>lodash就是这样的一个库</p><blockquote><p>lodash是在ES5之前出现的库，使用的是ES3语法</p></blockquote><p>通过<code>module.rule.exclude</code>或<code>module.rule.include</code>，排除或仅包含需要应用loader的场景</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">lodash</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果暴力一点，甚至可以排除掉<code>node_modules</code>目录中的模块，或仅转换<code>src</code>目录的模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token comment">//或</span>
                <span class="token comment">// include: /src/,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这种做法是对loader的范围进行进一步的限制，和noParse不冲突，想想看，为什么不冲突</p></blockquote><h4 id="缓存loader的结果" tabindex="-1"><a class="header-anchor" href="#缓存loader的结果" aria-hidden="true">#</a> 缓存loader的结果</h4><p>我们可以基于一种假设：如果某个文件内容不变，经过相同的loader解析后，解析后的结果也不变</p><p>于是，可以将loader的解析结果保存下来，让后续的解析直接使用保存的结果</p><p><code>cache-loader</code>可以实现这样的功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cache-loader&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>loaders<span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有趣的是，<code>cache-loader</code>放到最前面，却能够决定后续的loader是否运行</p><p>实际上，loader的运行过程中，还包含一个过程，即<code>pitch</code><img src="`+an+'" alt="image.png"><code>cache-loader</code>还可以实现各自自定义的配置，具体方式见文档</p><h4 id="为loader的运行开启多线程" tabindex="-1"><a class="header-anchor" href="#为loader的运行开启多线程" aria-hidden="true">#</a> 为loader的运行开启多线程</h4><p><code>thread-loader</code>会开启一个线程池，线程池中包含适量的线程</p><p>它会把后续的loader放到线程池的线程中运行，以提高构建效率</p><p>由于后续的loader会放到新的线程中，所以，后续的loader：</p><ul><li>无法使用 webpack api 生成文件</li><li>无法使用自定义的 plugin api</li><li>无法访问 webpack options</li></ul><blockquote><p>在实际的开发中，可以进行测试，来决定<code>thread-loader</code>放到什么位置</p></blockquote><p><strong>特别注意</strong>，开启和管理线程需要消耗时间，在小型项目中使用<code>thread-loader</code>反而会增加构建时间</p><h3 id="热更新-替换-hmr-发生在代码运行期" tabindex="-1"><a class="header-anchor" href="#热更新-替换-hmr-发生在代码运行期" aria-hidden="true">#</a> 热更新（替换） HMR，<strong>发生在代码运行期</strong></h3><blockquote><p>热替换并不能降低构建时间（可能还会稍微增加），但可以降低代码改动到效果呈现的时间</p></blockquote><p>当使用<code>webpack-dev-server</code>时，考虑代码改动到效果呈现的过程 <img src="'+en+'" alt="image.png"> 而使用了热替换后，流程发生了变化 <img src="'+pn+`" alt="image.png"></p><h4 id="使用和原理" tabindex="-1"><a class="header-anchor" href="#使用和原理" aria-hidden="true">#</a> 使用和原理</h4><ol><li>更改配置</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// 开启HMR</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span> 
    <span class="token comment">// 可选</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>更改代码</li></ol><p><strong>在入口函数加入以下代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 在入口函数加入以下代码</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否开启了热更新</span>
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 接受热更新</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，这段代码会参与最终运行！</p><p>当开启了热更新后，<code>webpack-dev-server</code>会向打包结果中注入<code>module.hot</code>属性</p><p>默认情况下，<code>webpack-dev-server</code>不管是否开启了热更新，当重新打包后，都会调用<code>location.reload</code>刷新页面</p><p>但如果运行了<code>module.hot.accept()</code>，将改变这一行为</p><p><code>module.hot.accept()</code>的作用是让<code>webpack-dev-server</code>通过<code>socket</code>管道，把服务器更新的内容发送到浏览器 <img src="`+tn+'" alt="image.png"> 然后，将结果交给插件<code>HotModuleReplacementPlugin</code>注入的代码执行，插件<code>HotModuleReplacementPlugin</code>会根据覆盖原始代码，然后让代码重新执行，浏览器不刷新，只是代码变量指向的对象替换</p><p><strong>所以，热替换发生在代码运行期</strong></p><p><strong>websocket 长链接，连接不断开，连接期间客户端和服务器可以持续主动互相发生消息，服务器正常情况下是不能主动向客户端发生信息的，开启 websocket 后可以</strong></p><h3 id="样式热替换" tabindex="-1"><a class="header-anchor" href="#样式热替换" aria-hidden="true">#</a> 样式热替换</h3><p>对于样式也是可以使用热替换的，但需要使用<code>style-loader</code>，开启热更新后，使用 <code>style-loader</code> 就开启了样式热更新</p><p>因为热替换发生时，<code>HotModuleReplacementPlugin</code>只会简单的重新运行模块代码</p><p>因此<code>style-loader</code>的代码一运行，就会重新设置<code>style</code>元素中的样式</p><p>而<code>mini-css-extract-plugin</code>不行，由于它生成文件是在<strong>构建期间</strong>，运行期间并会也无法改动文件，因此它对于热替换是无效的</p><h3 id="手动分包" tabindex="-1"><a class="header-anchor" href="#手动分包" aria-hidden="true">#</a> 手动分包</h3><h4 id="基本原理-1" tabindex="-1"><a class="header-anchor" href="#基本原理-1" aria-hidden="true">#</a> 基本原理</h4><p>手动分包的总体思路是：</p><ol><li>先单独的打包公共模块</li></ol><p><img src="'+on+`" alt="image.png"> 公共模块会被打包成为动态链接库(dll Dynamic Link Library)，并生成资源清单</p><ol start="2"><li>根据入口模块进行正常打包</li></ol><p>打包时，如果发现模块中使用了资源清单中描述的模块，则不会形成下面的代码结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//源码，入口文件index.js</span>
<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span>
_<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于资源清单中包含<code>jquery</code>和<code>lodash</code>两个模块，因此打包结果的大致格式是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// index.js文件的打包结果并没有变化</span>
  <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;./node_modules/jquery/index.js&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">&quot;./node_modules/lodash/index.js&quot;</span><span class="token punctuation">)</span>
    _<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 由于资源清单中存在，jquery的代码并不会出现在这里</span>
  <span class="token string-property property">&quot;./node_modules/jquery/index.js&quot;</span><span class="token operator">:</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> jquery<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 由于资源清单中存在，lodash的代码并不会出现在这里</span>
  <span class="token string-property property">&quot;./node_modules/lodash/index.js&quot;</span><span class="token operator">:</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> lodash<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="打包公共模块" tabindex="-1"><a class="header-anchor" href="#打包公共模块" aria-hidden="true">#</a> 打包公共模块</h4><p>打包公共模块是一个<strong>独立的</strong>打包过程</p><ol><li>单独打包公共模块，暴露变量名</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.dll.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;jquery&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;dll/[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&quot;[name]&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>利用<code>DllPlugin</code>生成资源清单</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.dll.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dll&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[name].manifest.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//资源清单的保存位置</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;[name]&quot;</span><span class="token comment">//资源清单中，暴露的变量名</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，即可完成公共模块打包</p><h4 id="使用公共模块" tabindex="-1"><a class="header-anchor" href="#使用公共模块" aria-hidden="true">#</a> 使用公共模块</h4><ol><li>在页面中手动引入公共模块</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./dll/jquery.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./dll/lodash.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>重新设置<code>clean-webpack-plugin</code></li></ol><p>如果使用了插件<code>clean-webpack-plugin</code>，为了避免它把公共模块清除，需要做出以下配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 要清除的文件或目录</span>
  <span class="token comment">// 排除掉dll目录本身和它里面的文件</span>
  <span class="token literal-property property">cleanOnceBeforeBuildPatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;!dll&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!dll/*&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,131),gs={href:"https://github.com/sindresorhus/globby#globbing-patterns",target:"_blank",rel:"noopener noreferrer"},hs=p(`<ol start="3"><li>使用<code>DllReferencePlugin</code>控制打包结果</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./dll/jquery.manifest.json&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./dll/lodash.manifest.json&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p><strong>手动打包的过程</strong>：</p><ol><li>开启<code>output.library</code>暴露公共模块</li><li>用<code>DllPlugin</code>创建资源清单</li><li>用<code>DllReferencePlugin</code>使用资源清单</li></ol><p><strong>手动打包的注意事项</strong>：</p><ol><li>资源清单不参与运行，可以不放到打包目录中</li><li>记得手动引入公共JS，以及避免被删除</li><li>不要对小型的公共JS库使用</li></ol><p><strong>优点</strong>：</p><ol><li>极大提升自身模块的打包速度</li><li>极大的缩小了自身文件体积</li><li>有利于浏览器缓存第三方库的公共代码</li></ol><p><strong>缺点</strong>：</p><ol><li>使用非常繁琐</li><li>如果第三方库中包含重复代码，则效果不太理想</li></ol><h3 id="自动分包" tabindex="-1"><a class="header-anchor" href="#自动分包" aria-hidden="true">#</a> 自动分包</h3><h4 id="基本原理-2" tabindex="-1"><a class="header-anchor" href="#基本原理-2" aria-hidden="true">#</a> 基本原理</h4><p>不同与手动分包，自动分包是从<strong>实际的角度</strong>出发，从一个更加<strong>宏观的角度</strong>来控制分包，而一般不对具体哪个包要分出去进行控制</p><p>因此使用自动分包，不仅非常方便，而且更加贴合实际的开发需要</p><p>要控制自动分包，关键是要配置一个合理的<strong>分包策略</strong></p><p>有了分包策略之后，不需要额外安装任何插件，webpack会自动的按照策略进行分包</p><blockquote><p>实际上，webpack在内部是使用<code>SplitChunksPlugin</code>进行分包的 过去有一个库<code>CommonsChunkPlugin</code>也可以实现分包，不过由于该库某些地方并不完善，到了<code>webpack4</code>之后，已被<code>SplitChunksPlugin</code>取代</p></blockquote><p><img src="`+ln+`" alt="image.png"> 从分包流程中至少可以看出以下几点：</p><ul><li>分包策略至关重要，它决定了如何分包</li><li>分包时，webpack开启了一个<strong>新的chunk</strong>，对分离的模块进行打包</li><li>打包结果中，公共的部分被提取出来形成了一个单独的文件，它是新chunk的产物</li></ul><h4 id="分包策略的基本配置" tabindex="-1"><a class="header-anchor" href="#分包策略的基本配置" aria-hidden="true">#</a> 分包策略的基本配置</h4><p>webpack提供了<code>optimization</code>配置项，用于配置一些优化信息</p><p>其中<code>splitChunks</code>是分包策略的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 分包策略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，分包策略有其默认的配置，我们只需要轻微的改动，即可应对大部分分包场景</p><ol><li>chunks</li></ol><p>该配置项用于配置需要应用分包策略的chunk</p><p>我们知道，分包是从已有的chunk中分离出新的chunk，那么哪些chunk需要分离呢</p><p>chunks有三个取值，分别是：</p><ul><li>all: 对于所有的chunk都要应用分包策略</li><li>async：【默认】仅针对异步chunk应用分包策略</li><li>initial：仅针对普通chunk应用分包策略</li></ul><p>所以，你只需要配置<code>chunks</code>为<code>all</code>即可</p><ol start="2"><li>maxSize</li></ol><p>该配置可以控制包的最大字节数</p><p>如果某个包（包括分出来的包）超过了该值，则webpack会尽可能的将其分离成多个包</p><p>但是不要忽略的是，分包的<strong>基础单位是模块</strong>，如果一个完整的模块超过了该体积，它是无法做到再切割的，因此，尽管使用了这个配置，完全有可能某个包还是会超过这个体积</p><p>另外，该配置看上去很美妙，实际意义其实不大</p><p>因为分包的目的是<strong>提取大量的公共代码</strong>，从而减少总体积和充分利用浏览器缓存</p><p>虽然该配置可以把一些包进行再切分，但是实际的总体积和传输量并没有发生变化</p><blockquote><p>如果要进一步减少公共模块的体积，只能是压缩和<code>tree shaking</code></p></blockquote><h4 id="分包策略的其他配置" tabindex="-1"><a class="header-anchor" href="#分包策略的其他配置" aria-hidden="true">#</a> 分包策略的其他配置</h4><p>如果不想使用其他配置的默认值，可以手动进行配置：</p><ul><li>automaticNameDelimiter：新chunk名称的分隔符，默认值~</li><li>minChunks：一个模块被多少个chunk使用时，才会进行分包，默认值1</li><li>minSize：当分包达到多少字节后才允许被真正的拆分，默认值30000</li></ul><h4 id="缓存组" tabindex="-1"><a class="header-anchor" href="#缓存组" aria-hidden="true">#</a> 缓存组</h4><p>之前配置的分包策略是全局的</p><p>而实际上，分包策略是基于缓存组的</p><p>每个缓存组提供一套独有的策略，webpack按照缓存组的优先级依次处理每个缓存组，被缓存组处理过的分包不需要再次分包</p><p>默认情况下，webpack提供了两个缓存组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//全局配置</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 属性名是缓存组名称，会影响到分包的chunk名</span>
        <span class="token comment">// 属性值是缓存组的配置，缓存组继承所有的全局配置，也有自己特殊的配置</span>
        <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 当匹配到相应模块时，将这些模块进行单独打包</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token comment">// 缓存组优先级，优先级越高，该策略越先进行处理，默认值为0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">// 覆盖全局配置，将最小chunk引用数改为2</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">// 优先级</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 重用已经被分离出去的chunk</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很多时候，缓存组对于我们来说没什么意义，因为默认的缓存组就已经够用了</p><p>但是我们同样可以利用缓存组来完成一些事情，比如对公共样式的抽离</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配样式模块</span>
          <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 覆盖默认的最小尺寸，这里仅仅是作为测试</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 覆盖默认的最小chunk引用数</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].[hash:5].css&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// chunkFilename是配置来自于分割chunk的文件名</span>
      <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;common.[hash:5].css&quot;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配合多页应用" tabindex="-1"><a class="header-anchor" href="#配合多页应用" aria-hidden="true">#</a> 配合多页应用</h3><p>虽然现在单页应用是主流，但免不了还是会遇到多页应用</p><p>由于在多页应用中需要为每个html页面指定需要的chunk，这就造成了问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;index~other&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vendors~index~other&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须手动的指定被分离出去的chunk名称，这不是一种好办法</p><p>幸好<code>html-webpack-plugin</code>的新版本中解决了这一问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> html-webpack-plugin@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>做出以下配置即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会自动的找到被<code>index</code>分离出去的chunk，并完成引用</p><blockquote><p>目前这个版本仍处于测试解决，还未正式发布</p></blockquote><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><p>自动分包的原理其实并不复杂，主要经过以下步骤：</p><ol><li>检查每个chunk编译的结果</li><li>根据分包策略，找到那些满足策略的模块</li><li>根据分包策略，生成新的chunk打包这些模块（代码有所变化）</li><li>把打包出去的模块从原始包中移除，并修正原始包代码</li></ol><p>在代码层面，有以下变动</p><ol><li>分包的代码中，加入一个全局变量，类型为数组，其中包含公共模块的代码</li><li>原始包的代码中，使用数组中的公共代码</li></ol><h2 id="优化传输性能" tabindex="-1"><a class="header-anchor" href="#优化传输性能" aria-hidden="true">#</a> 优化<strong>传输性能</strong></h2><h3 id="代码压缩" tabindex="-1"><a class="header-anchor" href="#代码压缩" aria-hidden="true">#</a> 代码压缩</h3><h4 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h4><ol><li><strong>为什么要进行代码压缩</strong></li></ol><p>减少代码体积；破坏代码的可读性，提升破解成本；</p><ol start="2"><li><strong>什么时候要进行代码压缩</strong></li></ol><p>生产环境</p><ol start="3"><li><strong>使用什么压缩工具</strong></li></ol><p>目前最流行的代码压缩工具主要有两个：<code>UglifyJs</code>和<code>Terser</code></p><p><code>UglifyJs</code>是一个传统的代码压缩工具，已存在多年，曾经是前端应用的必备工具，但由于它不支持<code>ES6</code>语法，所以目前的流行度已有所下降。</p><p><code>Terser</code>是一个新起的代码压缩工具，支持<code>ES6+</code>语法，因此被很多构建工具内置使用。<code>webpack</code>安装后会内置<code>Terser</code>，当启用生产环境后即可用其进行代码压缩。</p><p>因此，我们选择<code>Terser</code></p><p><strong>关于副作用 side effect</strong></p><p>副作用：函数运行过程中，可能会对外部环境造成影响的功能</p><p>如果函数中包含以下代码，该函数叫做副作用函数:</p><ul><li>异步代码</li><li>localStorage</li><li>对外部数据的修改</li></ul><p>如果一个函数没有副作用，同时，函数的返回结果仅依赖参数，则该函数叫做纯函数(pure function)</p><h3 id="terser" tabindex="-1"><a class="header-anchor" href="#terser" aria-hidden="true">#</a> Terser</h3><p>在<code>Terser</code>的官网可尝试它的压缩效果</p>`,86),ys={href:"https://terser.org/",target:"_blank",rel:"noopener noreferrer"},xs=p(`<h3 id="webpack-terser" tabindex="-1"><a class="header-anchor" href="#webpack-terser" aria-hidden="true">#</a> webpack+Terser</h3><p>webpack自动集成了Terser</p><p>如果你想更改、添加压缩工具，又或者是想对Terser进行配置，使用下面的webpack配置即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;terser-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimize-css-assets-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否要启用压缩，默认情况下，生产环境会自动开启</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 压缩时使用的插件，可以有多个</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
      <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> tree shaking</h3><blockquote><p>压缩可以移除模块内部的无效代码 tree shaking 可以移除模块之间的无效代码</p></blockquote><h4 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h4><p>某些模块导出的代码并不一定会被用到</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// myMath.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./myMath&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tree shaking 用于移除掉不会用到的导出</p><h4 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1" aria-hidden="true">#</a> 使用</h4><p><code>webpack2</code>开始就支持了<code>tree shaking</code></p><p>只要是生产环境，<code>tree shaking</code>自动开启</p><h4 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1" aria-hidden="true">#</a> 原理</h4><p>webpack会从入口模块出发寻找依赖关系</p><p>当解析一个模块时，webpack会根据ES6的模块导入语句来判断，该模块依赖了另一个模块的哪个导出</p><p>webpack之所以选择ES6的模块导入语句，是因为ES6模块有以下特点：</p><ol><li>导入导出语句只能是顶层语句</li><li>import的模块名只能是字符串常量</li><li>import绑定的变量是不可变的</li></ol><p>这些特征都非常有利于分析出稳定的依赖</p><p>在具体分析依赖时，webpack坚持的原则是：<strong>保证代码正常运行，然后再尽量tree shaking</strong></p><p>所以，如果你依赖的是一个导出的对象，由于JS语言的动态特性，以及<code>webpack</code>还不够智能，为了保证代码正常运行，它不会移除对象中的任何信息</p><p>因此，我们在编写代码的时候，<strong>尽量</strong>：</p><ul><li>使用<code>export xxx</code>导出，而不使用<code>export default {xxx}</code>导出</li><li>使用<code>import {xxx} from &quot;xxx&quot;</code>导入，而不使用<code>import xxx from &quot;xxx&quot;</code>导入</li></ul><p>依赖分析完毕后，<code>webpack</code>会根据每个模块每个导出是否被使用，标记其他导出为<code>dead code</code>，然后交给代码压缩工具处理</p><p>代码压缩工具最终移除掉那些<code>dead code</code>代码</p><h4 id="使用第三方库" tabindex="-1"><a class="header-anchor" href="#使用第三方库" aria-hidden="true">#</a> 使用第三方库</h4><p>某些第三方库可能使用的是<code>commonjs</code>的方式导出，比如<code>lodash</code></p><p>又或者没有提供普通的ES6方式导出</p><p>对于这些库，<code>tree shaking</code>是无法发挥作用的</p><p>因此要寻找这些库的<code>es6</code>版本，好在很多流行但没有使用的<code>ES6</code>的第三方库，都发布了它的<code>ES6</code>版本，比如<code>lodash-es</code></p><h4 id="作用域分析" tabindex="-1"><a class="header-anchor" href="#作用域分析" aria-hidden="true">#</a> 作用域分析</h4><p><code>tree shaking</code>本身并没有完善的作用域分析，可能导致在一些<code>dead code</code>函数中的依赖仍然会被视为依赖</p><p>插件<code>webpack-deep-scope-plugin</code>提供了作用域分析，可解决这些问题</p><h4 id="副作用问题" tabindex="-1"><a class="header-anchor" href="#副作用问题" aria-hidden="true">#</a> 副作用问题</h4><p>webpack在<code>tree shaking</code>的使用，有一个原则：<strong>一定要保证代码正确运行</strong></p><p>在满足该原则的基础上，再来决定如何<code>tree shaking</code></p><p>因此，当<code>webpack</code>无法确定某个模块是否有副作用时，它往往将其视为有副作用</p><p>因此，某些情况可能并不是我们所想要的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//common.js</span>
<span class="token keyword">var</span> n  <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//index.js</span>
<span class="token keyword">import</span> <span class="token string">&quot;./common.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们根本没用有<code>common.js</code>的导出，但<code>webpack</code>担心<code>common.js</code>有副作用，如果去掉会影响某些功能</p><p>如果要解决该问题，就需要标记该文件是没有副作用的</p><p>在<code>package.json</code>中加入<code>sideEffects</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有两种配置方式：</p><ul><li>false：当前工程中，所有模块都没有副作用。注意，这种写法会影响到某些css文件的导入</li><li>数组：设置哪些文件拥有副作用，例如：<code>[&quot;!src/common.js&quot;]</code>，表示只要不是<code>src/common.js</code>的文件，都有副作用</li></ul><blockquote><p>这种方式我们一般不处理，通常是一些第三方库在它们自己的<code>package.json</code>中标注</p></blockquote><h3 id="css-tree-shaking" tabindex="-1"><a class="header-anchor" href="#css-tree-shaking" aria-hidden="true">#</a> css tree shaking</h3><p><code>webpack</code>无法对<code>css</code>完成<code>tree shaking</code>，因为<code>css</code>跟<code>es6</code>没有半毛钱关系</p><p>因此对<code>css</code>的<code>tree shaking</code>需要其他插件完成</p><p>例如：<code>purgecss-webpack-plugin</code></p><blockquote><p>注意：<code>purgecss-webpack-plugin</code>对<code>css module</code>无能为力</p></blockquote><h2 id="优化运行性能" tabindex="-1"><a class="header-anchor" href="#优化运行性能" aria-hidden="true">#</a> <strong>优化运行性能</strong></h2><p>运行性能是与代码质量有关系的</p><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> ESLint</h3><p>ESLint是一个针对JS的代码风格<strong>检查</strong>工具，当不满足其要求的风格时，会给予警告或错误</p>`,56),qs={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://eslint.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},ws=p(`<h4 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2" aria-hidden="true">#</a> 使用</h4><p>ESLint通常配合编辑器使用</p><ol><li>在vscode中安装<code>ESLint</code></li></ol><p>该工具会自动检查工程中的JS文件</p><p>检查的工作交给<code>eslint</code>库，如果当前工程没有，则会去全局库中查找，如果都没有，则无法完成检查</p><p>另外，检查的依据是<code>eslint</code>的配置文件<code>.eslintrc</code>，如果找不到工程中的配置文件，也无法完成检查</p><ol start="2"><li>安装<code>eslint</code></li></ol><p><code>npm i [-g] eslint</code></p><ol start="3"><li>创建配置文件</li></ol><p>可以通过<code>eslint</code>交互式命令创建配置文件</p><blockquote><p>由于windows环境中git窗口对交互式命名支持不是很好，建议使用powershell</p></blockquote><p><code>npx eslint --init</code></p><blockquote><p>eslint会识别工程中的<code>.eslintrc.*</code>文件，也能够识别<code>package.json</code>中的<code>eslintConfig</code>字段</p></blockquote><h4 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1" aria-hidden="true">#</a> 配置</h4><h5 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> env</h5><p>配置代码的运行环境</p><ul><li>browser：代码是否在浏览器环境中运行</li><li>es6：是否启用ES6的全局API，例如<code>Promise</code>等</li></ul><h5 id="parseroptions" tabindex="-1"><a class="header-anchor" href="#parseroptions" aria-hidden="true">#</a> parserOptions</h5><p>该配置指定<code>eslint</code>对哪些语法的支持</p><ul><li>ecmaVersion: 支持的ES语法版本</li><li>sourceType <ul><li>script：传统脚本</li><li>module：模块化脚本</li></ul></li></ul><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><h5 id="parser" tabindex="-1"><a class="header-anchor" href="#parser" aria-hidden="true">#</a> parser</h5><p><code>eslint</code>的工作原理是先将代码进行解析，然后按照规则进行分析</p><p><code>eslint</code> 默认使用<code>Espree</code>作为其解析器，你可以在配置文件中指定一个不同的解析器。</p><h5 id="globals" tabindex="-1"><a class="header-anchor" href="#globals" aria-hidden="true">#</a> globals</h5><p>配置可以使用的额外的全局变量</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;var1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;var2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;writable&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>eslint</code>支持注释形式的配置，在代码中使用下面的注释也可以完成配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* global var1, var2 */</span>
<span class="token comment">/* global var3:writable, var4:writable */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h5><p>该配置继承自哪里</p><p>它的值可以是字符串或者数组</p><p>比如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint:recommended&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示，该配置缺失的位置，使用<code>eslint</code>推荐的规则</p><h5 id="ignorefiles" tabindex="-1"><a class="header-anchor" href="#ignorefiles" aria-hidden="true">#</a> ignoreFiles</h5><p>排除掉某些不需要验证的文件</p><p><code>.eslintignore</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dist/**/*.js
node_modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="rules" tabindex="-1"><a class="header-anchor" href="#rules" aria-hidden="true">#</a> rules</h5><p><code>eslint</code>规则集</p><p>每条规则影响某个方面的代码风格</p><p>每条规则都有下面几个取值：</p><ul><li>off 或 0 或 false: 关闭该规则的检查</li><li>warn 或 1 或 true：警告，不会导致程序退出</li><li>error 或 2：错误，当被触发的时候，程序会退出</li></ul><p>除了在配置文件中使用规则外，还可以在注释中使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,46),_s={href:"https://eslint.bootcss.com/docs/rules/",target:"_blank",rel:"noopener noreferrer"},js=p('<h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h3><h3 id="gzip" tabindex="-1"><a class="header-anchor" href="#gzip" aria-hidden="true">#</a> gzip</h3><p>gzip是一种压缩文件的算法</p><h4 id="b-s结构中的压缩传输" tabindex="-1"><a class="header-anchor" href="#b-s结构中的压缩传输" aria-hidden="true">#</a> B/S结构中的压缩传输</h4><p><img src="'+cn+'" alt="image.png"> 优点：传输效率可能得到大幅提升</p><p>缺点：服务器的压缩需要时间，客户端的解压需要时间</p><h4 id="使用webpack进行预压缩" tabindex="-1"><a class="header-anchor" href="#使用webpack进行预压缩" aria-hidden="true">#</a> 使用webpack进行预压缩</h4><p>使用<code>compression-webpack-plugin</code>插件对打包结果进行预压缩，可以移除服务器的压缩时间 <img src="'+rn+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CmpressionWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;compression-webpack-plugin&quot;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">CmpressionWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">minRatio</span><span class="token operator">:</span> <span class="token number">0.5</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包结果分析" tabindex="-1"><a class="header-anchor" href="#打包结果分析" aria-hidden="true">#</a> 打包结果分析</h2><h3 id="bundle-analyzer-bundle-分析" tabindex="-1"><a class="header-anchor" href="#bundle-analyzer-bundle-分析" aria-hidden="true">#</a> bundle analyzer --- bundle 分析</h3><p>一个插件，会帮你生成一个页面，用来分析出口生成的 bundle.js 的模块依赖关系和各个模块的大小 <img src="`+un+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> WebpackBundleAnalyzer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-bundle-analyzer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WebpackBundleAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function Ss(Ps,Cs){const a=o("ExternalLinkIcon");return l(),c("div",null,[kn,n("blockquote",null,[n("p",null,[s("webpack官网："),n("a",vn,[s("https://www.webpackjs.com/"),e(a)]),s(" 目前的最新版本：webpack4")])]),mn,n("blockquote",null,[n("p",null,[s("jquery压缩后的代码："),n("a",bn,[s("https://code.jquery.com/jquery-3.4.1.min.js"),e(a)])])]),gn,n("p",null,[s("使用 webpack 编译后的代码难以调试，可以通过 devtool 配置来"),hn,s(" 具体的配置见文档："),n("a",yn,[s("https://www.webpackjs.com/configuration/devtool/"),e(a)])]),xn,n("blockquote",null,[n("p",null,[s("AST在线测试工具："),n("a",qn,[s("https://astexplorer.net/"),e(a)])])]),fn,n("blockquote",null,[n("p",null,[s("node内置模块 - path: "),n("a",wn,[s("https://nodejs.org/dist/latest-v12.x/docs/api/path.html"),e(a)])])]),_n,n("p",null,[s("即要监听的事件名，即钩子名，所有的钩子："),n("a",jn,[s("https://www.webpackjs.com/api/compiler-hooks"),e(a)])]),Sn,n("ul",null,[Pn,Cn,En,An,Mn,n("li",null,[s("其他："),n("a",In,[s("https://www.webpackjs.com/configuration/output/#output-librarytarget"),e(a)])])]),Ln,n("ul",null,[Jn,zn,n("li",null,[s("其他："),n("a",Bn,[s("https://www.webpackjs.com/configuration/target/"),e(a)])])]),$n,n("p",null,[s("针对webpack-dev-server的配置，参考："),n("a",Dn,[s("https://www.webpackjs.com/configuration/dev-server/"),e(a)]),s(" 常见配置有：")]),Rn,n("blockquote",null,[n("p",null,[s("less官网："),n("a",Nn,[s("http://lesscss.org/"),e(a)]),s(" less中文文档1（非官方）："),n("a",Tn,[s("http://lesscss.cn/"),e(a)]),s(" less中文文档2（非官方）："),n("a",On,[s("https://less.bootcss.com/"),e(a)]),s(" sass官网："),n("a",Wn,[s("https://sass-lang.com/"),e(a)]),s(" sass中文文档1（非官方）："),n("a",Vn,[s("https://www.sass.hk/"),e(a)]),s(" sass中文文档2（非官方）："),n("a",Hn,[s("https://sass.bootcss.com/"),e(a)])])]),Un,n("p",null,[s("具体的使用见文档："),n("a",Fn,[s("https://less.bootcss.com/"),e(a)])]),Gn,n("p",null,[s("官网地址："),n("a",Kn,[s("https://postcss.org/"),e(a)]),s(" github地址："),n("a",Qn,[s("https://github.com/postcss/postcss"),e(a)])]),Xn,n("p",null,[s("postcss库提供了对应的js api用于转换代码，如果你想使用postcss的一些高级功能，或者想开发postcss插件，就要api使用postcss，api的文档地址是："),n("a",Yn,[s("http://api.postcss.org/"),e(a)])]),Zn,n("p",null,[s("postcss的插件市场："),n("a",ns,[s("https://www.postcss.parts/"),e(a)])]),ss,n("p",null,[s("它的书写规范多而繁琐，详情见："),n("a",as,[s("https://github.com/browserslist/browserslist"),e(a)])]),es,n("p",null,[s("你可以通过网站："),n("a",ps,[s("https://browserl.ist/"),e(a)]),s(" 对配置结果覆盖的浏览器进行查询，查询时，多行之间使用英文逗号分割")]),n("blockquote",null,[n("p",null,[s("browserlist的数据来自于"),n("a",ts,[s("CanIUse"),e(a)]),s("网站，由于数据并非实时的，所以不会特别准确")])]),os,n("blockquote",null,[n("p",null,[s("官网："),n("a",ls,[s("https://stylelint.io/"),e(a)])])]),cs,n("p",null,[s("设置为"),is,s("可以禁用该规则，或者设置为4，表示一个缩进有4个空格。具体的设置需要参见stylelint文档："),n("a",rs,[s("https://stylelint.io/"),e(a)])]),us,n("blockquote",null,[n("p",null,[s("官网："),n("a",ds,[s("https://babeljs.io/"),e(a)]),s(" 民间中文网："),n("a",ks,[s("https://www.babeljs.cn/"),e(a)])])]),vs,n("blockquote",null,[n("p",null,[s("具体的配置见："),n("a",ms,[s("https://www.babeljs.cn/docs/babel-preset-env#options"),e(a)])])]),bs,n("blockquote",null,[n("p",null,[s("目录和文件的匹配规则使用的是"),n("a",gs,[s("globbing patterns"),e(a)])])]),hs,n("blockquote",null,[n("p",null,[s("Terser官网："),n("a",ys,[s("https://terser.org/"),e(a)])])]),xs,n("p",null,[s("官网："),n("a",qs,[s("https://eslint.org/"),e(a)])]),n("p",null,[s("民间中文网："),n("a",fs,[s("https://eslint.bootcss.com/"),e(a)])]),ws,n("blockquote",null,[n("p",null,[n("a",_s,[s("https://eslint.bootcss.com/docs/rules/"),e(a)])])]),js])}const As=t(dn,[["render",Ss],["__file","webpack学习.html.vue"]]);export{As as default};
