import{_ as i,r as t,o,c as p,b as n,d as s,e,a as l}from"./app-168a97af.js";const c="/vuepress_blog/assets/1-0886dc2b.png",r="/vuepress_blog/assets/2-3e6db6b4.png",d="/vuepress_blog/assets/3-c90492e4.png",u="/vuepress_blog/assets/4-b9bafdfb.png",m="/vuepress_blog/assets/5-c672dc9f.png",v="/vuepress_blog/assets/6-39a6b78c.png",k="/vuepress_blog/assets/7-a86fe3b8.png",h="/vuepress_blog/assets/8-cd2400f8.png",b={},g=l('<h1 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h1><h2 id="javascript-模块化发展史" tabindex="-1"><a class="header-anchor" href="#javascript-模块化发展史" aria-hidden="true">#</a> JavaScript 模块化发展史</h2><h3 id="第一阶段" tabindex="-1"><a class="header-anchor" href="#第一阶段" aria-hidden="true">#</a> 第一阶段</h3><ul><li>在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果</li><li>那个时候，一个页面所用到的 JS 可能只有区区几百行的代码</li><li>在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题</li><li>在这个阶段，也不存在专业的前端工程师，由于前端要做的事情实在太少，因此这一部分工作往往由后端工程师顺带完成</li><li>第一阶段发生的大事件： <ul><li>1996年，NetScape将JavaScript语言提交给欧洲的一个标准制定组织ECMA（欧洲计算机制造商协会）</li><li>1998年，NetScape在与微软浏览器IE的竞争中失利，宣布破产</li></ul></li></ul><h3 id="第二阶段" tabindex="-1"><a class="header-anchor" href="#第二阶段" aria-hidden="true">#</a> 第二阶段</h3><ul><li>1998年，ajax的出现，逐渐改变了 JavaScript 在浏览器中扮演的角色。现在，它不仅可以实现小的效果，还可以和服务器之间进行交互，以更好的体验来改变数据</li><li>JS代码的数量开始逐渐增长，从最初的几百行，到后来的几万行，前端程序逐渐变得复杂</li><li>后端开发者压力逐渐增加，致使一些公司开始招募专业的前端开发者</li><li>但此时，前端开发者的待遇远不及后端开发者，因为前端开发者承担的开发任务相对于后端开发来说，还是比较简单的，通过短短一个月的时间集训，就可以成为满足前端开发的需要</li><li>究其根本原因，是因为前端开发还有几个大的问题没有解决，这些问题都严重的制约了前端程序的规模进一步扩大：</li></ul><ol><li><strong>浏览器解释执行JS的速度太慢</strong></li><li><strong>用户端的电脑配置不足</strong></li><li><strong>更多的代码带来了全局变量污染、依赖关系混乱等问题</strong></li></ol><ul><li>上面三个问题，就像是阿喀琉斯之踵，成为前端开发挥之不去的阴影和原罪。</li><li>在这个阶段，前端开发处在一个非常尴尬的境地，它在传统的开发模式和前后端分离之间无助的徘徊</li><li>第二阶段的大事件： <ul><li>IE浏览器制霸市场后，几乎不再更新</li><li>ES4.0流产，导致JS语言10年间几乎毫无变化</li><li>2008年ES5发布，仅解决了一些 JS API 不足的糟糕局面</li></ul></li></ul><h3 id="第三阶段" tabindex="-1"><a class="header-anchor" href="#第三阶段" aria-hidden="true">#</a> 第三阶段</h3><ul><li>时间继续向前推移，到了2008年，谷歌的 V8 引擎发布，将JS的执行速度推上了一个新的台阶，甚至可以和后端语言媲美</li><li>摩尔定律持续发酵，个人电脑的配置开始飞跃</li><li>突然间，制约前端发展的两大问题得以解决，此时，只剩下最后一个问题还在负隅顽抗，即<strong>全局变量污染和依赖混乱</strong>的问题，解决了它，前端便可以突破一切障碍，未来无可限量</li><li>于是，全世界的前端开发者在社区中激烈的讨论，想要为这个问题寻求解决之道......</li><li>2008年，有一个名叫 Ryan Dahl 小伙子正在为一件事焦头烂额，它需要在服务器端手写一个高性能的web服务，该服务对于性能要求之高，以至于目前市面上已有的web服务产品都满足不了需求</li><li>经过分析，它确定，如果要实现高性能，那么必须要尽可能的减少线程，而要减少线程，避免不了要使用异步的处理方案</li><li>一开始，他打算自己实用C/C++语言来编写，可是这一过程实在太痛苦</li><li>就在他一筹莫展的时候，谷歌 V8 引擎的发布引起了他的注意，他突然发现，JS不就是最好的实现web服务的语言吗？它天生就是单线程，并且是基于异步的！有了V8引擎的支撑，它的执行速度完全可以撑起一个服务器。而且V8是鼎鼎大名的谷歌公司发布的，谷歌一定会不断的优化V8，有这种又省钱又省力的好事，我干嘛还要自己去写呢？</li><li>于是，它基于开源的V8引擎，对源代码作了一些修改，便快速的完成了该项目</li><li>2009年，Ryan推出了该web服务项目，命名为nodejs</li><li>从此，JS第一次堂堂正正的入主后端，不再是必须附属于浏览器的“玩具”语言了</li><li>也是从此刻开始，人们认识到，JS（ES）是一门真正的语言，它依附于运行环境（运行时）（宿主程序）而执行</li></ul><p><img src="'+c+'" alt="image.png"></p><ul><li>nodejs的诞生，便把JS中的最后一个问题放到了台前，即<strong>全局变量污染和依赖混乱</strong>问题</li><li>要直到，nodejs是服务器端，如果不解决这个问题，分模块开发就无从实现，而模块化开发是所有后端程序必不可少的内容</li><li>经过社区的激烈讨论，最终，形成了一个模块化方案，即鼎鼎大名的CommonJS，该方案，彻底解决了全局变量污染和依赖混乱的问题</li><li>该方案一出，立即被nodejs支持，于是，nodejs成为了第一个为JS语言实现模块化的平台，为前端接下来的迅猛发展奠定了实践基础</li><li>该阶段发生的大事件： <ul><li>2008年，V8发布</li><li>IE的市场逐步被 firefox 和 chrome 蚕食，现已无力回天</li><li>2009年，nodejs发布，并附带commonjs模块化标准</li></ul></li></ul><h3 id="第四阶段" tabindex="-1"><a class="header-anchor" href="#第四阶段" aria-hidden="true">#</a> 第四阶段</h3><ul><li>CommonJS的出现打开了前端开发者的思路</li><li>既然后端可以使用模块化的JS，作为JS语言的老东家浏览器为什么不行呢？</li><li>于是，开始有人想办法把CommonJS运用到浏览器中</li><li>可是这里面存在诸多的困难（课程中详解）</li><li>办法总比困难多，有些开发者就想，既然CommonJS运用到浏览器困难，我们干嘛不自己重新定一个模块化的标准出来，难道就一定要用CommonJS标准吗？</li><li>于是很快，AMD规范出炉，它解决的问题和CommonJS一样，但是可以更好的适应浏览器环境</li><li>相继的，CMD规范出炉，它对AMD规范进行了改进</li><li>这些行为，都受到了ECMA官方的密切关注......</li><li>2015年，ES6发布，它提出了官方的模块化解决方案 —— ES6 模块化</li><li>从此以后，模块化成为了JS本身特有的性质，这门语言终于有了和其他语言较量的资本，成为了可以编写大型应用的正式语言</li><li>于此同时，很多开发者、技术厂商早已预见到JS的无穷潜力，于是有了下面的故事 <ul><li>既然JS也能编写大型应用，那么自然也需要像其他语言那样有解决复杂问题的开发框架 <ul><li>Angular、React、Vue等前端开发框架出现</li><li>Express、Koa等后端开发框架出现</li><li>各种后端数据库驱动出现</li></ul></li><li>要开发大型应用，自然少不了各种实用的第三方库的支持 <ul><li>npm包管理器出现，实用第三方库变得极其方便</li><li>webpack等构建工具出现，专门用于打包和部署</li></ul></li><li>既然JS可以放到服务器环境，为什么不能放到其他终端环境呢？ <ul><li>Electron发布，可以使用JS语言开发桌面应用程序</li><li>RN和Vuex等技术发布，可以使用JS语言编写移动端应用程序</li><li>各种小程序出现，可以使用JS编写依附于其他应用的小程序</li><li>目前还有很多厂商致力于将JS应用到各种其他的终端设备，最终形成大前端生态</li></ul></li></ul></li></ul><blockquote><p>可以看到，模块化的出现，是JS通向大型应用的基石，学习好模块化，便具备了编写大型应用的基本功。</p></blockquote><h2 id="安装nodejs" tabindex="-1"><a class="header-anchor" href="#安装nodejs" aria-hidden="true">#</a> 安装nodejs</h2>',16),x={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"使用-nvm-管理node版本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-nvm-管理node版本","aria-hidden":"true"},"#"),s(" 使用 nvm 管理node版本")],-1),j={href:"https://github.com/nvm-sh/nvm",target:"_blank",rel:"noopener noreferrer"},S=l(`<h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装最新稳定版本 </span>
nvm <span class="token function">install</span> stable
<span class="token comment"># 列出所有可安装的版本</span>
nvm ls-remote
<span class="token comment"># 安装指定版本 </span>
nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
<span class="token comment"># 列出所有已经安装的版本</span>
nvm <span class="token function">ls</span>
<span class="token comment"># 切换使用指定的版本</span>
nvm use <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
<span class="token comment"># 显示当前使用的版本</span>
nvm current
<span class="token comment"># 设置默认 \`node\` 版本</span>
nvm <span class="token builtin class-name">alias</span> default <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
<span class="token comment"># 解除当前版本绑定</span>
nvm deactivate
<span class="token comment"># 删除某版本的node</span>
nvm uninstall <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="windows-系统的安装方法" tabindex="-1"><a class="header-anchor" href="#windows-系统的安装方法" aria-hidden="true">#</a> windows 系统的安装方法</h3>`,3),_={href:"https://github.com/coreybutler/nvm-windows",target:"_blank",rel:"noopener noreferrer"},w=l(`<h3 id="mac-m1-系统的安装方法" tabindex="-1"><a class="header-anchor" href="#mac-m1-系统的安装方法" aria-hidden="true">#</a> Mac(M1) 系统的安装方法</h3><ul><li>如果已经安装node，先删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看已经安装在全局的模块</span>
<span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token comment"># 删除全局 node_modules 目录</span>
<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/lib/node_modules
<span class="token comment"># 删除 node</span>
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/node 
<span class="token comment"># 删除全局 node 模块注册的软链</span>
<span class="token builtin class-name">cd</span> /usr/local/bin <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;../lib/node_modules/&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $9}&#39;</span><span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>执行安装指令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v<span class="token punctuation">{</span>版本号<span class="token punctuation">}</span>/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>打开终端，进入用户的home目录中</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>检查配置文件</li></ol><p>使用 ls -a 显示这个目录下的所有文件（夹）（包含隐藏文件及文件夹），查看有没有 .zshrc 这个文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>如果没有，则新建一个</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>配置.zshrc文件</li></ol><p>将 nvm 环境变量添加到 shell 中，打开.zshrc文件，在最后一行添加</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">&quot;<span class="token environment constant">$HOME</span>/.nvm&quot;</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="token comment"># This loads nvm</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/bash_completion&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="token comment"># This loads nvm bash_completion</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>加载配置文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果要安装14以下的node版本，先进入Rosetta shell环境，再下载</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>arch <span class="token parameter variable">-x86_64</span> <span class="token function">zsh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="node的安装位置" tabindex="-1"><a class="header-anchor" href="#node的安装位置" aria-hidden="true">#</a> node的安装位置</h3><ul><li>在终端我们可以使用 which node 来查看我们的 node 被安装到了哪里，这里终端打印出来的地址其实是你当前使用的 node 版本快捷方式的地址</li><li>如果你想查看所有 node 版本的安装文件夹，我们可以在 访达（finder） 中使用快捷键 Command+Shift+G 输入 /Users/你的用户名/.nvm/versions 地址就可以看到</li><li>Mac 默认是不显示隐藏文件夹的，.nvm 是个隐藏文件夹在 访达（finder） 中看不到，在 Mac 下显示隐藏文件的快捷键是 Command+Shift+.，关闭也是这个快捷键</li></ul><h3 id="linux-系统的安装方法" tabindex="-1"><a class="header-anchor" href="#linux-系统的安装方法" aria-hidden="true">#</a> linux 系统的安装方法</h3><p>下载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">curl</span> -o- https://raw.githubusercontent.com/creationix/nvm/v<span class="token punctuation">{</span>版本号<span class="token punctuation">}</span>/install.sh <span class="token operator">|</span> <span class="token function">bash</span> 
 <span class="token comment"># or</span>
 <span class="token function">wget</span> -qO- https://raw.githubusercontent.com/creationix/nvm/v<span class="token punctuation">{</span>版本号<span class="token punctuation">}</span>/install.sh <span class="token operator">|</span> <span class="token function">bash</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token builtin class-name">source</span> ~/.bashrc 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="浏览器中的模块" tabindex="-1"><a class="header-anchor" href="#浏览器中的模块" aria-hidden="true">#</a> 浏览器中的模块</h2><ul><li>浏览器运行的是html页面，并加载页面中通过script元素引入的js</li></ul><p><img src="`+r+'" alt="image.png"></p><h2 id="nodejs中的模块" tabindex="-1"><a class="header-anchor" href="#nodejs中的模块" aria-hidden="true">#</a> nodejs中的模块</h2><ul><li>nodejs直接运行某个js文件，该文件被称之为入口文件</li></ul><p><img src="'+d+'" alt="image.png"></p><ul><li>nodejs遵循EcmaScript标准，但由于脱离了浏览器环境，因此： <ul><li>你可以在nodejs中使用EcmaScript标准的任何语法或api，例如：循环、判断、数组、对象等</li><li>你不能在nodejs中使用浏览器的 web api，例如：dom对象、window对象、document对象等</li></ul></li><li>由于大部分开发者是从浏览器端开发转向nodejs开发的，为了降低开发者的学习成本，nodejs中提供了一些和浏览器web api同样的对象或函数，例如：console、setTimeout、setInterval等</li></ul><h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h2><ul><li>在nodejs中，由于有且仅有一个入口文件（启动文件），而开发一个应用肯定会涉及到多个文件配合，因此，nodejs对模块化的需求比浏览器端要大的多</li></ul><p><img src="'+u+`" alt="image.png"></p><ul><li>由于nodejs刚刚发布的时候，前端没有统一的、官方的模块化规范，因此，它选择使用社区提供的CommonJS作为模块化规范</li><li>在学习CommonJS之前，首先认识两个重要的概念：<strong>模块的导出</strong>和<strong>模块的导入</strong></li></ul><h3 id="模块的导出" tabindex="-1"><a class="header-anchor" href="#模块的导出" aria-hidden="true">#</a> 模块的导出</h3><ul><li>要理解模块的导出，首先要理解模块的含义</li><li>什么是模块？ <ul><li>模块就是一个JS文件，它实现了一部分功能，并隐藏自己的内部实现，同时提供了一些接口供其他模块使用</li><li>模块有两个核心要素：<strong>隐藏</strong>和<strong>暴露</strong><ul><li>隐藏的，是自己内部的实现</li><li>暴露的，是希望外部使用的接口</li></ul></li></ul></li><li>任何一个正常的模块化标准，都应该默认隐藏模块中的所有实现，而通过一些语法或api调用来暴露接口</li><li><strong>暴露接口的过程即模块的导出</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt="image.png"></p><h3 id="模块的导入" tabindex="-1"><a class="header-anchor" href="#模块的导入" aria-hidden="true">#</a> 模块的导入</h3><ul><li>当需要使用一个模块时，使用的是该模块暴露的部分（导出的部分），隐藏的部分是永远无法使用的</li><li><strong>当通过某种语法或api去使用一个模块时，这个过程叫做模块的导入</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="commonjs导入导出规范" tabindex="-1"><a class="header-anchor" href="#commonjs导入导出规范" aria-hidden="true">#</a> CommonJS导入导出规范</h3><ul><li>CommonJS使用<code>exports</code>导出模块，<code>require</code>导入模块</li><li>具体规范如下： <ul><li>如果一个JS文件中存在<code>exports</code>或<code>require</code>，该JS文件是一个模块</li><li>模块内的所有代码均为隐藏代码，包括全局变量、全局函数，这些全局的内容均不应该对全局变量造成任何污染</li><li>如果一个模块需要暴露一些API提供给外部使用，需要通过<code>exports</code>导出，<code>exports</code>是一个空的对象，你可以为该对象添加任何需要导出的内容</li><li>如果一个模块需要导入其他模块，通过<code>require()</code>实现，<code>require()</code>是一个函数，传入模块的路径即可返回该模块导出的整个内容</li><li>node.js中导入模块，使用相对路径，并且必须以./或../开头</li></ul></li></ul><h3 id="nodejs对commonjs的实现" tabindex="-1"><a class="header-anchor" href="#nodejs对commonjs的实现" aria-hidden="true">#</a> nodejs对CommonJS的实现</h3><ul><li>为了实现CommonJS规范，nodejs对模块做出了以下处理 <ul><li>为了保证高效的执行，仅加载必要的模块。nodejs只有执行到<code>require</code>函数时才会加载并执行模块</li><li>为了隐藏模块中的代码，nodejs执行模块时，会将模块中的所有代码放置到一个函数中执行，以保证不污染全局变量。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">//模块中的代码</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为了保证顺利的导出模块内容，nodejs做了以下处理 <ul><li>在模块开始执行前，初始化一个值<code>module.exports = {}</code></li><li><code>module.exports</code>即模块的最终导出值，而不是导出exports</li><li>为了方便开发者便捷的导出，nodejs在初始化完<code>module.exports</code>后，又声明了一个变量<code>exports = module.exports</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
     <span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
     <span class="token comment">//模块中的代码</span>
     <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为了避免反复加载同一个模块，nodejs默认开启了模块缓存，如果加载的模块已经被加载过了，则会自动使用之前的导出结果</li></ul><h3 id="commonjs的工作原理" tabindex="-1"><a class="header-anchor" href="#commonjs的工作原理" aria-hidden="true">#</a> CommonJS的工作原理</h3><ul><li>当使用<code>require(模块路径)</code>导入一个模块时，node会做以下两件事情（不考虑模块缓存）： <ul><li>通过模块路径找到本机文件，并读取文件内容</li><li>将文件中的代码放入到一个函数环境中执行，并将执行后module.exports的值作为require函数的返回结果</li></ul></li><li>正是这两个步骤，使得CommonJS在node端可以良好的被支持</li><li>可以认为，<strong>CommonJS是同步的</strong>，必须要等到加载完文件并执行完代码后才能继续向后执行</li></ul><h2 id="浏览器端commonjs模块化的难题与实现" tabindex="-1"><a class="header-anchor" href="#浏览器端commonjs模块化的难题与实现" aria-hidden="true">#</a> 浏览器端CommonJS模块化的难题与实现</h2><h3 id="当浏览器遇到commonjs" tabindex="-1"><a class="header-anchor" href="#当浏览器遇到commonjs" aria-hidden="true">#</a> 当浏览器遇到CommonJS</h3><ul><li>当想要把CommonJS放到浏览器端时，就遇到了一些挑战 <ul><li>浏览器要加载JS文件，需要远程从服务器读取，而网络传输的效率远远低于node环境中读取本地文件的效率。由于CommonJS是同步的，这会极大的降低运行性能</li><li>如果需要读取JS文件内容并把它放入到一个环境中执行，需要浏览器厂商的支持，可是浏览器厂商不愿意提供支持，最大的原因是CommonJS属于社区标准，并非官方标准</li></ul></li><li>基于以上两点原因，浏览器无法支持模块化</li><li>可这并不代表模块化不能在浏览器中实现</li><li>要在浏览器中实现模块化，只要能解决上面的两个问题就行了</li><li>解决办法其实很简单： <ul><li>远程加载JS浪费了时间？做成异步即可，加载完成后调用一个回调就行了</li><li>模块中的代码需要放置到函数中执行？编写模块时，直接放函数中就行了</li></ul></li><li>基于这种简单有效的思路，出现了AMD和CMD规范，有效的解决了浏览器模块化的问题</li></ul><h3 id="amd" tabindex="-1"><a class="header-anchor" href="#amd" aria-hidden="true">#</a> AMD</h3><ul><li>全称是Asynchronous Module Definition，即异步模块加载机制</li><li>require.js实现了AMD规范</li><li>在AMD中，导入和导出模块的代码，都必须放置在define函数中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span>依赖的模块列表<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">模块名称列表</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//模块内部的代码</span>
    <span class="token keyword">return</span> 导出的内容
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>全称是Common Module Definition，公共模块定义规范 sea.js实现了CMD规范 在CMD中，导入和导出模块的代码，都必须放置在define函数中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//模块内部的代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6模块化" tabindex="-1"><a class="header-anchor" href="#es6模块化" aria-hidden="true">#</a> ES6模块化</h2><ul><li>ECMA组织参考了众多社区模块化标准，终于在2015年，随着ES6发布了官方的模块化标准，后成为ES6模块化</li><li>ES6模块化具有以下的特点 <ul><li>使用依赖<strong>预声明</strong>的方式导入模块 <ul><li>依赖延迟声明 <ul><li>优点：某些时候可以提高效率</li><li>缺点：无法在一开始确定模块依赖关系（比较模糊）</li></ul></li><li>依赖预声明 <ul><li>优点：在一开始可以确定模块依赖关系</li><li>缺点：某些时候效率较低</li></ul></li></ul></li><li>灵活的多种导入导出方式</li><li>规范的路径表示法：所有路径必须以./或../开头</li></ul></li></ul><h3 id="基本导入导出" tabindex="-1"><a class="header-anchor" href="#基本导入导出" aria-hidden="true">#</a> 基本导入导出</h3><h4 id="模块的引入" tabindex="-1"><a class="header-anchor" href="#模块的引入" aria-hidden="true">#</a> 模块的引入</h4><ul><li><strong>注意：这一部分非模块化标准</strong></li><li>目前，浏览器使用以下方式引入一个ES6模块文件</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>入口文件<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="模块的基本导出和导入" tabindex="-1"><a class="header-anchor" href="#模块的基本导出和导入" aria-hidden="true">#</a> 模块的基本导出和导入</h4><p>ES6中的模块导入导出分为两种：</p><ol><li>基本导入导出</li><li>默认导入导出 <img src="`+v+`" alt="image.png"></li></ol><h5 id="基本导出" tabindex="-1"><a class="header-anchor" href="#基本导出" aria-hidden="true">#</a> 基本导出</h5><ul><li>类似于 <code>exports.xxx = xxxx</code></li><li>基本导出可以有多个，每个必须有名称</li><li>基本导出的语法如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> 声明表达式
<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 导出a，值为<span class="token number">1</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>导出test，值为一个函数
<span class="token comment">//也可以导出类数组对象等等。必须是声明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>具名符号<span class="token punctuation">}</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span><span class="token comment">//将age的名称作为导出名称，age和sex变量的值作为导出值，这里并不是导出对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于基本导出必须具有名称，所以要求导出内容必须跟上<strong>声明表达式</strong>或<strong>具名符号</strong></li></ul><h5 id="基本导入" tabindex="-1"><a class="header-anchor" href="#基本导入" aria-hidden="true">#</a> 基本导入</h5><ul><li>由于使用的是<strong>依赖预加载</strong>，因此，导入任何其他模块，导入代码必须放置到所有代码之前</li><li>对于基本导出，如果要进行导入，使用下面的代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>导入的符号列表<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span> <span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span><span class="token comment">//要什么导入什么即可。如可以只导入age</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意以下细节：</strong></p><ul><li>导入时，可以通过关键字<code>as</code>对导入的符号进行重命名：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> age <span class="token keyword">as</span> age2<span class="token punctuation">,</span> sex <span class="token keyword">as</span> sex2 <span class="token punctuation">}</span> form <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>导入时使用的符号是常量，不可修改，不可重新赋值</li><li>可以使用*号导入所有的基本导出，形成一个对象：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>**不使用任何导出，只运行文件： **</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="默认导入导出" tabindex="-1"><a class="header-anchor" href="#默认导入导出" aria-hidden="true">#</a> 默认导入导出</h4><p><img src="`+k+`" alt="image.png"></p><h5 id="默认导出" tabindex="-1"><a class="header-anchor" href="#默认导出" aria-hidden="true">#</a> 默认导出</h5><ul><li>每个模块，除了允许有多个基本导出之外，还允许有一个默认导出</li><li>默认导出类似于CommonJS中的<code>module.exports</code>，由于只有一个，因此无需具名</li><li>具体的语法是</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> 默认导出的数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>默认导出的数据 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>由于每个模块仅允许有一个默认导出，因此，每个模块不能出现多个默认导出语句</li></ul><h5 id="默认导入" tabindex="-1"><a class="header-anchor" href="#默认导入" aria-hidden="true">#</a> 默认导入</h5><ul><li>需要想要导入一个模块的默认导出，需要使用下面的语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 接收变量名 <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span>
<span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类似于CommonJS中的<code>var 接收变量名 = require(&quot;模块路径&quot;)</code></li><li>由于默认导入时变量名是自行定义的，因此没有别名一说</li><li>如果希望同时导入某个模块的默认导出和基本导出，可以使用下面的语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 接收默认导出的变量<span class="token punctuation">,</span> <span class="token punctuation">{</span>接收基本导出的变量<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span>e<span class="token punctuation">,</span> r<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> data <span class="token keyword">from</span> <span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">;</span><span class="token comment">//基本导出和默认导出聚合到data对象中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>注：如果使用*号，会将所有基本导出和默认导出聚合到一个对象中，默认导出会作为属性default存在</strong></li></ul><h3 id="es6模块化的其他细节" tabindex="-1"><a class="header-anchor" href="#es6模块化的其他细节" aria-hidden="true">#</a> ES6模块化的其他细节</h3><ul><li><strong>尽量导出不可变值</strong><ul><li>当导出一个内容时，尽量保证该内容是不可变的（大部分情况都是如此）</li><li>因为，虽然导入后，无法更改导入内容，但是在导入的模块内部却有可能发生更改，这将导致一些无法预料的事情发生</li></ul></li><li><strong>可以使用无绑定的导入用于执行一些初始化代码</strong><ul><li>如果我们只是想执行模块中的一些代码，而不需要导入它的任何内容，可以使用无绑定的导入：</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;模块路径&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>可以使用绑定再导出，来重新导出来自另一个模块的内容</strong><ul><li>有的时候，我们可能需要用一个模块封装多个模块，然后有选择的将多个模块的内容分别导出，可以使用下面的语法轻松完成</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token function">绑定的标识符</span><span class="token punctuation">(</span>模块名<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+h+'" alt="image.png"></p>',108);function J(y,q){const a=t("ExternalLinkIcon");return o(),p("div",null,[g,n("p",null,[s("官网地址："),n("a",x,[s("https://nodejs.org/zh-cn/"),e(a)])]),f,n("p",null,[s("Github："),n("a",j,[s("https://github.com/nvm-sh/nvm"),e(a)])]),S,n("p",null,[s("建议去"),n("a",_,[s(" GitHub "),e(a)]),s("下载手动安装")]),w])}const E=i(b,[["render",J],["__file","模块化学习.html.vue"]]);export{E as default};
