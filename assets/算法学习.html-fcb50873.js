import{_ as n,o as s,c as a,a as p}from"./app-168a97af.js";const t="/vuepress_blog/assets/1-8d1972ef.png",o="/vuepress_blog/assets/2-c86d0b39.png",e="/vuepress_blog/assets/3-e5cbf521.png",c="/vuepress_blog/assets/4-05ce8aaf.png",l="/vuepress_blog/assets/5-5ef3c400.png",i="/vuepress_blog/assets/6-d30ce63f.png",u="/vuepress_blog/assets/7-0c691d36.png",k="/vuepress_blog/assets/8-4ffbf960.png",r="/vuepress_blog/assets/9-8cc278c1.png",d="/vuepress_blog/assets/10-bff0e695.png",v="/vuepress_blog/assets/11-7736a74c.png",m="/vuepress_blog/assets/12-b577c6d6.png",b="/vuepress_blog/assets/13-53c193b6.png",y="/vuepress_blog/assets/14-35699af5.png",w="/vuepress_blog/assets/15-e99d11f1.png",g={},f=p(`<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h1><h1 id="算法要素-写在最上边" tabindex="-1"><a class="header-anchor" href="#算法要素-写在最上边" aria-hidden="true">#</a> 算法要素(写在最上边)</h1><ol><li>严谨性判断，不允许任何报错</li><li>任何递归程序，先写出口</li><li>任何一种算法，都没有优劣之分，只有是否适合的场景</li></ol><h1 id="算法基础知识" tabindex="-1"><a class="header-anchor" href="#算法基础知识" aria-hidden="true">#</a> 算法基础知识</h1><h2 id="o-1-o-n-o-n-2-o-logn-o-nlogn-复杂度" tabindex="-1"><a class="header-anchor" href="#o-1-o-n-o-n-2-o-logn-o-nlogn-复杂度" aria-hidden="true">#</a> o(1), o(n), O(n^2), o(logn), o(nlogn) 复杂度</h2><h5 id="在描述算法复杂度时-经常用到o-1-o-n-o-logn-o-nlogn-来表示对应算法的时间复杂度-这里进行归纳一下它们代表的含义" tabindex="-1"><a class="header-anchor" href="#在描述算法复杂度时-经常用到o-1-o-n-o-logn-o-nlogn-来表示对应算法的时间复杂度-这里进行归纳一下它们代表的含义" aria-hidden="true">#</a> 在描述算法复杂度时,经常用到o(1), o(n), o(logn), o(nlogn)来表示对应算法的时间复杂度, 这里进行归纳一下它们代表的含义:</h5><ul><li>这是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。</li><li>O后面的括号中有一个函数，指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的n代表输入数据的量。</li><li>比如时间复杂度为O(n)，就代表数据量增大几倍，耗时也增大几倍。比如常见的遍历算法。</li><li>再比如时间复杂度O(n^2)，就代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如冒泡排序，就是典型的O(n^2)的算法，对n个数排序，需要扫描n×n次。</li><li>再比如O(logn)，当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。</li><li>O(nlogn)同理，就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。</li><li>O(1)就是最低的时空复杂度了，也就是耗时/耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变。 哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）冲突的话很麻烦的，指向的value会做二次hash到另外一快存储区域</li></ul><h5 id="总之" tabindex="-1"><a class="header-anchor" href="#总之" aria-hidden="true">#</a> 总之：</h5><ul><li>在平均情况下，快速排序最快；</li><li>在最好情况下，插入排序和起泡排序最快；</li><li>在最坏情况下，堆排序和归并排序最快。</li></ul><h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h1><ul><li>可以容纳数据的结构被称为数据结构，算法是用来对数据结构进行处理的方法</li><li>数据结构是静态的，算法是动态的</li></ul><h2 id="线性数据结构-一位数据结构" tabindex="-1"><a class="header-anchor" href="#线性数据结构-一位数据结构" aria-hidden="true">#</a> 线性数据结构(一位数据结构)</h2><ul><li>线性数据结构强调存储与顺序</li></ul><h3 id="线性数据结构的遍历" tabindex="-1"><a class="header-anchor" href="#线性数据结构的遍历" aria-hidden="true">#</a> 线性数据结构的遍历</h3><p>将一个集合中的每一个元素进行获取并查看</p><h3 id="数组-内置" tabindex="-1"><a class="header-anchor" href="#数组-内置" aria-hidden="true">#</a> 数组(内置)</h3><ul><li>例：数组 a = [1,2,3,4,5,6,7,8,9]; <ul><li>a[1]，方括号表示存储地址的偏移 <ul><li>操作系统知识：通过偏移查询数据性能最好</li></ul></li><li>数组增加数据时如果长度不够，则会在底层向操作系统申请内存新创建一个长度更长的数组，把原来数组的数组复制过来，再在最后添加一个数据，所以是耗性能的</li></ul></li><li>数组特性: <ul><li>存储在物理空间上是连续的</li><li>底层的数组是定长的，长度是不可变的</li><li>数组的变量，指向数组第一个元素的位置</li></ul></li><li>数组的优点： <ul><li>查询性能好，指定查询某个位置</li></ul></li><li>数组的缺点： <ul><li>因为空间必须得是连续的，所以如果数组比较大，当系统的空间碎片较多的时候，容易存不下 <ul><li>空间碎片：变量声明是按顺序的，部分变量销毁后生成的小的空闲的空间</li></ul></li><li>因为数组的长度是固定的，所以数组的内容难以被添加和删除 <ul><li>删除和添加是需要移动数组其他内容的位置的，是消耗性能的</li></ul></li></ul></li><li>内容固定时 var a = [1,2,3,4,5,6,7,8,9]; 性能是可以的，很高</li><li>内容不固定时，先声明数组长度性能是最高的，var arr = new Array(10)</li></ul><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><ul><li>如果要传递一个链表，必须传递链表的根节点</li><li>每一个节点，都认为自己是根节点，因为只有下一个引用，而找不到上一个引用</li><li>常提的链表都是单向链表，单向链表能完成所有双向链表能完成的事</li><li>链表的生成：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>链表的特点： <ul><li>空间上是不连续的</li><li>每存放一个值，都要多开销一个引用空间</li></ul></li><li>链表的优点： <ul><li>只要内存足够大，就能存的下，不用担心空间碎片问题(在连续排列的数据中，每删除一个数据就会留下一个坑位，当数据特别多，删除的数据留下的坑位就被成为空间碎片)</li><li>链表的添加和删除非常容易，只需改变引用即可</li></ul></li><li>链表的缺点 <ul><li>查询速度慢(指查询某个位置)</li><li>链表每一个节点都需要创建一个指向next的引用，浪费一些空间，当节点内数据越多的时候，这部分开销的内存影响越小</li></ul></li><li>链表的遍历 <ul><li>循环遍历，for循环，while循环 <ul><li>性能更好，但是常用于遍历数组，因为数组是知道长度的</li></ul></li><li>递归遍历，内部调用自身，记得留出口 <ul><li>经常使用，往往能大量节省开发时间和开发效率，任何递归程序先写出口</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 线性数据结构的遍历</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bianArr</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 数组的遍历</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">bianArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>
node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node3<span class="token punctuation">;</span>
node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node4<span class="token punctuation">;</span>
node4<span class="token punctuation">.</span>next <span class="token operator">=</span> node5<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bianLink</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 链表的递归遍历</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bianLink</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bianLink</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>链表的逆置 <ul><li>让最后一个节点指向倒数第二个节点，让倒数第二个节点指向null，然后进行递归逆置</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 对链表进行逆序，让最后一个指向倒数第二个，依次更改，突破点在于先找到最后一个节点</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2
node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node3
node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node4
node4<span class="token punctuation">.</span>next <span class="token operator">=</span> node5
<span class="token keyword">function</span> <span class="token function">nizhi</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到最后一个节点</span>
        root<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 最后一个节点指向倒数第二个节点</span>
        <span class="token keyword">return</span> root<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 返回最后一个节点</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">nizhi</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入递归，堆栈，先进后出</span>
        root<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 下一个节点指向当前节点</span>
        root<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 当前节点指向null</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bianLink</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bianLink</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>next<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">bianLink</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newRoot <span class="token operator">=</span> <span class="token function">nizhi</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bianLink</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bianLink</span><span class="token punctuation">(</span>node5<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>双向链表 <ul><li>双指向的链表，即包含下一个引用，也包含上一个引用，但是双向链表所有能实现的功能单向链表都能实现</li><li>优点：无论给出哪个节点，都可以对整个链表进行遍历</li><li>缺点：多耗费一个引用的空间，而且构建双向链表比较复杂，所以很少使用双向链表</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2
node2<span class="token punctuation">.</span>prev <span class="token operator">=</span> node1
node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node3
node3<span class="token punctuation">.</span>prev <span class="token operator">=</span> node2
node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node4
node4<span class="token punctuation">.</span>prev <span class="token operator">=</span> node3
node4<span class="token punctuation">.</span>next <span class="token operator">=</span> node5
node5<span class="token punctuation">.</span>prev <span class="token operator">=</span> node4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h2><p>最慢的排序算法之一，但是是最容易实现的排序算法</p><ol><li>排序的本质是比较和交换，先比较看是否需要交换，先把数值的最大值或最小值放在一端，数据值就像气泡一样从数组的一端漂浮到另一端</li><li>for循环内嵌套for循环，外循环遍历数组每一项，内循环比较元素，如需交换调用函数即可</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 越有序性能越好</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">contrast</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 比较数字的大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">interchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 位置进行交换</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">sort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr <span class="token operator">||</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">contrast</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">interchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h2><ol><li>内层循环，每一圈选出一个最大或最小值，放在最后面</li><li>选择排序从数组的开头开始，将第一个元素和其他元素进行比较。检查完所有元素后，最小的元素会被放在第一或者最后一个位置，然后算法会从第二个或者倒数第二个位置继续。这个过程一直进行，进行到倒数第二个位置时，完成排序</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 选择排序，内层循环，每一圈选出一个最大放在最后面</span>
<span class="token comment">// 性能适中</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">contrast</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 比较数字的大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">interchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 位置进行交换</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">sort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr <span class="token operator">||</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> maxIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">contrast</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> maxIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">interchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxIndex<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><ul><li>处理大数据集最快的算法之一，分而治之，通过递归的方法将数据依次分解为包含较小元素和较大元素的不同子序列，不断重复这个步骤直到所有数据都是有序的。</li><li>首先要在列表中选择一个基准值，数据排序围绕基准值进行，列表中小于基准值的元素移到数组底部，大于基准值的元素移到数组顶部。</li><li>快速排序算法： <ol><li>选择一个基准元素，将列表分隔成两个子序列；</li><li>对列表重新排序，将所有小于基准值的元素放在基准值的前面，所有大于基准值的元素放在基准值的后面；</li><li>分别对较小元素的子序列和较大元素的子序列重复步骤1和2。</li></ol></li><li>标准快速排序算法： <ol><li>传入一个数组，一个初始比对元素索引，一个最后一个元素索引；</li><li>在函数中将初始元素索引赋值给left，将最后一个元索引赋值给right；</li><li>当left小于right时，如果数组left值小于初始元素索引的值，并且left &lt; right时，让left++，如果数组right的值大于初始比对元素索引的值，并且left &gt; right时，让right--；</li><li>当遇见left对应的值大于初始元素索引的值，right的值小于初始元素索引的值，让left和right对应的值交换位置；</li><li>当left = right时，让初始比对值和right - 1的值进行交换，当left != right时，让初始比对值和right的值进行交换；</li><li>递归传入数组，初始比对元素索引，left；</li><li>递归传入数组，交换后的初始比对值，最后一元素索引。</li></ol></li><li>标准快速排序就是先选择一个基准值，在挨个与基准值比较，找到比基准值小的和比基准值大的交换位置，让比基准值小的放一边，比基准值大的放另一边，然后把基准值放在中间，再对两边进行递归比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 快速排序，越换乱性能越好</span>
<span class="token comment">// 两两比较，小的在左边，大的在右边</span>
<span class="token comment">// 左闭右开区间，左边能取到，右边取不到</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment">// 标准快排</span>
<span class="token keyword">const</span> <span class="token function-variable function">interchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 位置进行交换</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&gt;=</span> end <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>arr <span class="token operator">||</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> begin<span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> end<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> left<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左指针递增，当大于等于右指针或左指针所指数据大于等于开始指针数据时停止</span>
        <span class="token keyword">do</span> right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 右指针递减，当小于等于左指针或右指针所指数据小于等于开始指针数据时停止</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token function">interchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token comment">// 如果左右指针并未交错，则代表左指针所指数据大于等于begin所指数据，右指针所指数据小于等于begin所指数据，所以交换左右指针所指数据</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>
    <span class="token keyword">const</span> swapPoint <span class="token operator">=</span> left <span class="token operator">===</span> right <span class="token operator">?</span> right <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> right<span class="token punctuation">;</span> <span class="token comment">// 当左指针大于等于右指针时，根据左闭右开原则获取中间位置，此时中间位置左边数据都比begin所指数据小，右边数据都比begin所指数据大</span>
    <span class="token function">interchange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> swapPoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换begin位置所指数据和中间位置所指数据</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> swapPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> swapPoint <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栈和队列" tabindex="-1"><a class="header-anchor" href="#栈和队列" aria-hidden="true">#</a> 栈和队列</h2><ul><li>栈，先入后出，后入先出，比如摞盘子，只能通过栈顶访问</li><li>队列，先入先出，像个管道，一头进一头出</li><li>可以使用数组的 push、pop 和 shift 方法模拟栈和队列 <ul><li>push 是放入</li><li>pop 是取出后放入的，类似栈</li><li>shift 是取出先放入的，类似队列</li></ul></li></ul><h2 id="二维数据结构" tabindex="-1"><a class="header-anchor" href="#二维数据结构" aria-hidden="true">#</a> 二维数据结构</h2><h3 id="二维数组结构" tabindex="-1"><a class="header-anchor" href="#二维数组结构" aria-hidden="true">#</a> 二维数组结构</h3><ul><li>数组里的每一项也都是数组，由行和列构成的数据表格，可以按行或者按列访问</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二维拓补结构-图-散列数学" tabindex="-1"><a class="header-anchor" href="#二维拓补结构-图-散列数学" aria-hidden="true">#</a> 二维拓补结构(图，散列数学)</h3><p>只关注关系，是否有联系，不关注位置和距离，一个顶点既可以有一条边，也可以有多条边与它相连，通常将图的边称为邻接表或者邻接表数组，以此顶点为索引，可以高效访问与这个顶点相连的所有顶点的列表</p><ul><li>图是边和顶点的集合</li><li>类似于村庄之间相连的道路，每两个村庄之间都由某条道路相连，每个村庄都可以看做一个顶点，它们之间是有关系的，也就是成为一种数据结构</li><li>但是图也分为有序图和无序图(无向图)，有序图是单向的路径，能去不能回，也就是存有单向的引用，无序图是双向的路径，能来能回，互相存有对方的引用</li><li>顶点内存有的引用放在数组里，可以称为连通的邻居</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>neighbor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="树形结构" tabindex="-1"><a class="header-anchor" href="#树形结构" aria-hidden="true">#</a> 树形结构</h4><p>计算机的树，都是倒着长的，根节点，子节点，叶子结点，树的度，树的深度 非线性数据结构，以分层的方式存储数据，用来存储有层级关系的数据，如文件系统中的文件，还被用来存储有序列表 <strong>有向无环图：树的学名，是图的一种</strong></p><ul><li>树形结构只有一个根节点，<strong>并且没有回路</strong>，单向引用</li><li><strong>根节点是树的根，只有一个</strong></li><li>子节点是某个节点下面的节点，类似于树枝</li><li>叶子节点是下边没有其他节点了，就是树叶</li><li>度：一棵树有最多叉的节点有多少个叉就代表这棵树的度为多少</li><li>深度：一棵树有几层，也就是从根节点到最下边的叶子节点有几层，就代表树的深度为几，节点到最下边的叶子节点有几层，就代表该节点的深度为几，如下图 F 节点的深度为 3</li><li>高度：指结点所在的最长路径的叶子结点到自己的层数，如下图根节点 A 的高度为 4，B 的高度为 3</li></ul><p><img src="`+t+'" alt="image.png"></p><h5 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h5><p>树的度最多为2的树形结构，一般父节点的两个子节点分别称为左节点和右节点 在二叉树中，每个节点都认为自己是根节点</p><h5 id="子树" tabindex="-1"><a class="header-anchor" href="#子树" aria-hidden="true">#</a> 子树</h5><p>二叉树中，每一个节点或叶子节点，都是一颗子树的根节点，两个节点也被称为左子树和右子树 <img src="'+o+'" alt="image.png"></p><h5 id="满二叉树-完美二叉树" tabindex="-1"><a class="header-anchor" href="#满二叉树-完美二叉树" aria-hidden="true">#</a> 满二叉树（完美二叉树）</h5><ol><li>特殊的完全二叉树</li><li>所有的叶子节点都在最底层</li><li>每个非叶子节点都有两个子节点</li><li>定义：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树，也就是如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树</li></ol><p><img src="'+e+'" alt="image.png"></p><h5 id="完全二叉树-国际定义理解的不好" tabindex="-1"><a class="header-anchor" href="#完全二叉树-国际定义理解的不好" aria-hidden="true">#</a> 完全二叉树（国际定义理解的不好）</h5><p>完全二叉树是效率很高的数据结构</p><ol><li>国内定义： <ol><li>叶子节点都在最后一层或倒数第二层</li><li>叶子节点都向左聚拢，最后一层的叶子节点均需在最左边</li><li>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树</li></ol></li><li>国际定义： <ol><li>叶子节点都在最后一层或倒数第二层</li><li>如果有叶子节点，就必然有两个叶子节点(两个子节点一个有两个叶子节点一个没有叶子节点也符合，但如果另一个子节点有且只有一个叶子节点，则不符合)</li></ol></li></ol><p><img src="'+c+'" alt="image.png"></p><h5 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h5><p><img src="'+l+`" alt="image.png"></p><ul><li>前序遍历(先根次序遍历)：ACFGBDE <ul><li>先打印当前的节点，再打印左边的子树，再打印右边的子树;</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">traversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">traversal</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>中序遍历(中根次序遍历)：FCGADBE <ul><li>先打印左边的子树，再打印当前的节点，再打印右边的子树，类似将所有节点从左往右依次投影到一条线上</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">traversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
<span class="token function">traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">traversal</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>后序遍历: FGCDEBA <ul><li>先打印左边的子树，再打印右边的子树，再打印当前的节点</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">traversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>
<span class="token function">traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">traversal</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从哪个顺序打印就看什么时候打印自身，有中序结果和前序或后序结果的其中一个就可以进行反推二叉树</li><li>根据已知前序中序还原二叉树： <ul><li>根据前序第一个确定根节点，然后找到中序中的根节点确定左子树的所有节点和右子树的所有节点，再在前序里找到所有左子树和右子树的节点，然后递归查找</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 前序遍历：ACFGBDE</span>
<span class="token comment">// 中序遍历：FCGADBE</span>
<span class="token comment">// A CFG BDE</span>
<span class="token comment">// FCG A DBE</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">DLR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">LDR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">restore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">DLR</span><span class="token punctuation">,</span> <span class="token constant">LDR</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">DLR</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">LDR</span> <span class="token operator">||</span> <span class="token constant">DLR</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">LDR</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">DLR</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token constant">LDR</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token constant">DLR</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取根节点</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token constant">LDR</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> DLRLeft <span class="token operator">=</span> <span class="token constant">DLR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取左子树前序打印结果</span>
    <span class="token keyword">const</span> DLRRight <span class="token operator">=</span> <span class="token constant">DLR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">DLR</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取右子树前序打印结果</span>
    <span class="token keyword">const</span> LDRLeft <span class="token operator">=</span> <span class="token constant">LDR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取左子树中序打印结果</span>
    <span class="token keyword">const</span> LDRRight <span class="token operator">=</span> <span class="token constant">LDR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">LDR</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 获取右子树中序打印结果</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">restore</span><span class="token punctuation">(</span>DLRLeft<span class="token punctuation">,</span> LDRLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">restore</span><span class="token punctuation">(</span>DLRRight<span class="token punctuation">,</span> LDRRight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token constant">DLR</span><span class="token punctuation">,</span> <span class="token constant">LDR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据已知中序后序还原二叉树： <ul><li>根据后序最后一个确定根节点，然后找到中序中的根节点确定左子树的所有节点和右子树的所有节点，再在后序里找到所有左子树和右子树的节点，然后递归查找</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 中序遍历：FCGADBE</span>
<span class="token comment">// 后续遍历：FGCDEBA</span>
<span class="token comment">// FCG A DBE</span>
<span class="token comment">// FGC DEB A</span>
<span class="token keyword">const</span> <span class="token constant">LDR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">STR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;G&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">restore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">LDR</span><span class="token punctuation">,</span> <span class="token constant">STR</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">LDR</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">STR</span> <span class="token operator">||</span> <span class="token constant">LDR</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">STR</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">LDR</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token constant">STR</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token constant">STR</span><span class="token punctuation">[</span><span class="token constant">STR</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取根节点</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token constant">LDR</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">const</span> LDRLeft <span class="token operator">=</span> <span class="token constant">LDR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取左子树中序打印结果</span>
    <span class="token keyword">const</span> LDRRight <span class="token operator">=</span> <span class="token constant">LDR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">LDR</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取右子树中序打印结果</span>
    <span class="token keyword">const</span> STRLeft <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取左子树后序打印结果</span>
    <span class="token keyword">const</span> STRRight <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token constant">STR</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 获取右子树后序打印结果</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">restore</span><span class="token punctuation">(</span>LDRLeft<span class="token punctuation">,</span> STRLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">restore</span><span class="token punctuation">(</span>LDRRight<span class="token punctuation">,</span> STRRight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token constant">LDR</span><span class="token punctuation">,</span> <span class="token constant">STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="二叉树的搜索" tabindex="-1"><a class="header-anchor" href="#二叉树的搜索" aria-hidden="true">#</a> 二叉树的搜索</h5><p>树的搜索，图的搜索，爬虫的逻辑，搜索引擎的爬虫算法</p><h6 id="深度优先搜索" tabindex="-1"><a class="header-anchor" href="#深度优先搜索" aria-hidden="true">#</a> 深度优先搜索</h6><ul><li>更适合探索未知，能查多少查多少 <ul><li>先比对根节点，根节点不是开始查左子树，从左往右把左子树查完再查根节点下的右子树(从左往右)</li><li>对于二叉树来说，深度优先搜索和前序遍历的顺序是一样的</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G</span><span class="token punctuation">;</span>
<span class="token comment">// 判断某个对象是否在二叉树中</span>
<span class="token keyword">const</span> <span class="token function-variable function">deepSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">deepSearch</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">deepSearch</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> left <span class="token operator">||</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepSearch</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="广度优先搜索" tabindex="-1"><a class="header-anchor" href="#广度优先搜索" aria-hidden="true">#</a> 广度优先搜索</h6><ul><li>更适合探索局域，知道大概在某一块 <ul><li>一层一层的搜索，比对完根节点开始比对左子树和右子树，然后再比对左子树右子树下边的左子树右子树</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// 判断某个对象是否在二叉树中</span>
<span class="token keyword">const</span> <span class="token function-variable function">scopeSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rootList<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootList <span class="token operator">||</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>rootList<span class="token punctuation">)</span> <span class="token operator">||</span> rootList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> childList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// for (let i = rootList.length; i--;) { // 乱序搜</span>
    <span class="token comment">//     console.log(rootList[i].value);</span>
    <span class="token comment">//     if (rootList[i] &amp;&amp; rootList[i] === target) return true;</span>
    <span class="token comment">//     childList.push(rootList[i].left);</span>
    <span class="token comment">//     childList.push(rootList[i].right);</span>
    <span class="token comment">// }</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rootList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从左往右搜</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> rootList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        childList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rootList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        childList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rootList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">scopeSearch</span><span class="token punctuation">(</span>childList<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">scopeSearch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="二叉树的比较" tabindex="-1"><a class="header-anchor" href="#二叉树的比较" aria-hidden="true">#</a> 二叉树的比较</h5><ul><li>遇到二叉树的比较问题时，先必须要确定左右两棵子树交换位置，即左右互换算不算同一颗二叉树。如果是笔试的话，默认互换后不是同一棵树，如果有特殊说明左右互换还是同一棵树，就按说明处理。面试的时候最好问一下面试官</li><li>左右互换不是同一颗二叉树：先看看二叉树是不是同一棵，再进行严谨性判断，然后比较数值，接着递归比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A1</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C1</span><span class="token punctuation">;</span>
<span class="token constant">A1</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">B1</span><span class="token punctuation">;</span>
<span class="token constant">B1</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D1</span><span class="token punctuation">;</span>
<span class="token constant">B1</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">E1</span><span class="token punctuation">;</span>
<span class="token constant">C1</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">;</span>
<span class="token constant">C1</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C2</span><span class="token punctuation">;</span>
<span class="token constant">A2</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">B2</span><span class="token punctuation">;</span>
<span class="token constant">B2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D2</span><span class="token punctuation">;</span>
<span class="token constant">B2</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">E2</span><span class="token punctuation">;</span>
<span class="token constant">C2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F2</span><span class="token punctuation">;</span>
<span class="token constant">C2</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G2</span><span class="token punctuation">;</span>
<span class="token comment">// 比较两个二叉树是否有差异，左右子树交换则不一致的情况下，一直递归比较，没有 false，就是 true（left &amp;&amp; right）</span>
<span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node1<span class="token punctuation">,</span> node2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node1 <span class="token operator">===</span> node2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 是同一个颗树</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node1 <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">||</span> node1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node2 <span class="token operator">||</span> <span class="token operator">!</span>node1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node2 <span class="token operator">&amp;&amp;</span> node1 <span class="token operator">!==</span> node2 <span class="token operator">||</span> node1 <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">&amp;&amp;</span> node1<span class="token punctuation">.</span>value <span class="token operator">!==</span> node2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">diff</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">diff</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">diff</span><span class="token punctuation">(</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>左右互换是同一棵二叉树：判断两棵子树是否相等</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node1<span class="token punctuation">,</span> node2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node1 <span class="token operator">===</span> node2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 是同一个颗树</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node1 <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">||</span> node1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node2 <span class="token operator">||</span> <span class="token operator">!</span>node1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node2 <span class="token operator">&amp;&amp;</span> node1 <span class="token operator">!==</span> node2 <span class="token operator">||</span> node1 <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">&amp;&amp;</span> node1<span class="token punctuation">.</span>value <span class="token operator">!==</span> node2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">diff</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">diff</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">diff</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">diff</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">diff</span><span class="token punctuation">(</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="二叉树的diff算法" tabindex="-1"><a class="header-anchor" href="#二叉树的diff算法" aria-hidden="true">#</a> 二叉树的diff算法</h5><p>比较二叉树的改变，是否进行了增删改，如果有就记录下来</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A1</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C1</span><span class="token punctuation">;</span>
<span class="token constant">A1</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">B1</span><span class="token punctuation">;</span>
<span class="token constant">B1</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D1</span><span class="token punctuation">;</span>
<span class="token constant">B1</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">E1</span><span class="token punctuation">;</span>
<span class="token constant">C1</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">;</span>
<span class="token constant">C1</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;J&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">H2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C2</span><span class="token punctuation">;</span>
<span class="token constant">A2</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">B2</span><span class="token punctuation">;</span>
<span class="token constant">B2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D2</span><span class="token punctuation">;</span>
<span class="token constant">B2</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">E2</span><span class="token punctuation">;</span>
<span class="token constant">C2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token constant">C2</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G2</span><span class="token punctuation">;</span>
<span class="token constant">D2</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">H2</span><span class="token punctuation">;</span>
<span class="token comment">// 二叉树的 diff 算法，需要知道新增了什么、修改了什么、删除了什么，dom 的 diff 算法是同一思想</span>
<span class="token comment">// { type: 增/删/改, origin: 原来的, now: 现在的 }</span>
<span class="token keyword">const</span> <span class="token function-variable function">diffTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> diffList</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> node1 <span class="token operator">===</span> node2<span class="token operator">:</span>
            <span class="token keyword">return</span> diffList<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token operator">!</span>node1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>node2<span class="token operator">:</span> <span class="token comment">// 第一个 ! 先转换为布尔，第二个 ! 做判断</span>
            diffList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;新增&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">now</span><span class="token operator">:</span> node2<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> node1 <span class="token operator">&amp;&amp;</span> node2 <span class="token operator">&amp;&amp;</span> node1<span class="token punctuation">.</span>value <span class="token operator">!==</span> node2<span class="token punctuation">.</span>value<span class="token operator">:</span>
            diffList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;修改&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span> node1<span class="token punctuation">,</span> <span class="token literal-property property">now</span><span class="token operator">:</span> node2<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">diffTree</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> diffList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">diffTree</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">,</span> diffList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> node1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node2<span class="token operator">:</span>
            diffList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;删除&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span> node1<span class="token punctuation">,</span> <span class="token literal-property property">now</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token function">diffTree</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> diffList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">diffTree</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">,</span> diffList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> diffList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">diffTree</span><span class="token punctuation">(</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token punctuation">,</span> diffList<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>diffList<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图的数据结构表示方法" tabindex="-1"><a class="header-anchor" href="#图的数据结构表示方法" aria-hidden="true">#</a> 图的数据结构表示方法</h4><p>用数据结构表示一张图可以用点集合和边集合生成一个二维数组来表示：[ [ ... ], [ ... ], [ ... ] ] <img src="`+i+'" alt="image.png"></p><h4 id="最小生成树" tabindex="-1"><a class="header-anchor" href="#最小生成树" aria-hidden="true">#</a> 最小生成树</h4><p>树形结构是有向无环图，以最小的代价连接所有的节点，生成最小的树，更能节省空间和效能，也就是查找一个顶点到另一个顶点的最短路径 <img src="'+u+`" alt="image.png"></p><h5 id="普利姆算法-加点法" tabindex="-1"><a class="header-anchor" href="#普利姆算法-加点法" aria-hidden="true">#</a> 普利姆算法(加点法)</h5><ol><li>任选一个顶点作为起点</li><li>找到以当前选中点为起点路径最短的边</li><li>如果这个边的另一端没有被连通，则连接</li><li>如果这个边的另一端也已经被连接起来了，则看倒数第二短的边</li><li>重复2-4直到所有的点都连通为止</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token comment">// A、B、C、D、E 是五个村庄，现希望所有的村庄都联通修路，但是要求花费最少</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pointSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 点集合</span>
<span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">// 点与点之间的距离（边的数据）集合</span>
   <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span>max<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span>max<span class="token punctuation">,</span> max<span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>neighbor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 当前点能与哪个点相连</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">getIndex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 获取点在点与点之间距离集合中的下标</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pointSet<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pointSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">===</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">// 传入顶点的集合，边的数据集合，当前已经连接的顶点的集合</span>
<span class="token comment">// 根据当前已有的节点进行判断，获取到距离最短的点</span>
<span class="token keyword">const</span> <span class="token function-variable function">getMinDisNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pointSet<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> nowPointSet</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> fromNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">// 线段的起点</span>
    <span class="token keyword">let</span> minDisNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 线段的终点</span>
    <span class="token keyword">let</span> minDis <span class="token operator">=</span> max<span class="token punctuation">;</span>      <span class="token comment">// 线段的长度，起始为最大值</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nowPointSet<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> nowPointIndex <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>nowPointSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前顶点的索引</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> distance<span class="token punctuation">[</span>nowPointIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> thisNode <span class="token operator">=</span> pointSet<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// thisNode表示distance中的点，但这个点不是对象，是数据集合</span>
            <span class="token comment">// 这个点不能是已经接入的点，点之间的距离是最短距离</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nowPointSet<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>thisNode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> distance<span class="token punctuation">[</span>nowPointIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minDis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fromNode <span class="token operator">=</span> nowPointSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                minDisNode <span class="token operator">=</span> thisNode<span class="token punctuation">;</span>
                minDis <span class="token operator">=</span> distance<span class="token punctuation">[</span>nowPointIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    fromNode<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>minDisNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    minDisNode<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fromNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> minDisNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">prim</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pointSet<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nowPointSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    nowPointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取最小代价的边</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> minDisNode <span class="token operator">=</span> <span class="token function">getMinDisNode</span><span class="token punctuation">(</span>pointSet<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> nowPointSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nowPointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>minDisNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nowPointSet<span class="token punctuation">.</span>length <span class="token operator">===</span> pointSet<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">prim</span><span class="token punctuation">(</span>pointSet<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> pointSet<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pointSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="克鲁斯卡尔算法-加边法" tabindex="-1"><a class="header-anchor" href="#克鲁斯卡尔算法-加边法" aria-hidden="true">#</a> 克鲁斯卡尔算法(加边法)</h5><ol><li>选择最短的边进行连接</li><li>要保证连接的两端至少有一个点是新的点</li><li>或者 这个边是将两个部落连接到一起(部落：已经连接的一部分顶点； 部落连接：将散落的部落连接在一块形成大部落)</li><li>重复1-3直到所有的点都连接到一起</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pointSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>max<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>max<span class="token punctuation">,</span> max<span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>neighbor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
pointSet<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">canLink</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resultList<span class="token punctuation">,</span> tempBegin<span class="token punctuation">,</span> tempEnd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> beginIn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> endIn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tempBegin<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beginIn <span class="token operator">=</span> resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tempEnd<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            endIn <span class="token operator">=</span> resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIn <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> endIn <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> beginIn <span class="token operator">===</span> endIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">Link</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resultList<span class="token punctuation">,</span> tempBegin<span class="token punctuation">,</span> tempEnd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> beginIn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> endIn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resultList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tempBegin<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beginIn <span class="token operator">=</span> resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tempEnd<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            endIn <span class="token operator">=</span> resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>beginIn <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> endIn <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//两个点都是新的点，都不在任何部落里，可以连接，产生新的部落</span>
        <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>beginIn <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> endIn <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// end有部落，begin没有，end扩张</span>
        beginIn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>beginIn <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> endIn <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// begin有部落，end没有，begin扩张</span>
        endIn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>beginIn <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> endIn <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> beginIn <span class="token operator">!==</span> endIn<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 两个不同的部落，进行合并</span>
        <span class="token keyword">const</span> allIn <span class="token operator">=</span> beginIn<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>endIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> needRemove <span class="token operator">=</span> resultList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>needRemove<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        needRemove <span class="token operator">=</span> resultList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>beginIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>needRemove<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>allIn<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    tempBegin<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tempEnd<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">kruskall</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pointSet<span class="token punctuation">,</span> distance</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> resultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 二维数组，此数组代表有多少个部落</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> minDis <span class="token operator">=</span> max<span class="token punctuation">;</span>
        <span class="token keyword">let</span> begin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> distance<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> tempBegin <span class="token operator">=</span> pointSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> tempEnd <span class="token operator">=</span> pointSet<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j <span class="token operator">&amp;&amp;</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minDis <span class="token operator">&amp;&amp;</span> <span class="token function">canLink</span><span class="token punctuation">(</span>resultList<span class="token punctuation">,</span> tempBegin<span class="token punctuation">,</span> tempEnd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 去掉自己到自己的距离，因为都为0</span>
                    minDis <span class="token operator">=</span> distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    begin <span class="token operator">=</span> tempBegin<span class="token punctuation">;</span>
                    end <span class="token operator">=</span> tempEnd<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">Link</span><span class="token punctuation">(</span>resultList<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>resultList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> resultList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> pointSet<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 只存在一个部落</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">kruskall</span><span class="token punctuation">(</span>pointSet<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pointSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h4><p>也叫<strong>二叉排序树</strong> 有排序的效果，左子树的节点都比当前节点小，右子树的节点都比当前节点大 <img src="`+k+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 向搜索树中添加节点</span>
<span class="token keyword">const</span> <span class="token function-variable function">addNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 目标值比当前节点大</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果右侧为空，则创建节点</span>
        <span class="token keyword">else</span> <span class="token function">addNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果右侧不为空，则向右侧进行递归</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 目标值比当前节点小</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">addNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 构建搜索树</span>
<span class="token keyword">const</span> <span class="token function-variable function">buildSearchTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">buildSearchTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用二叉搜索树</span>
<span class="token keyword">const</span> <span class="token function-variable function">searchByTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">searchByTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果目标比当前结果大，搜索右子树</span>
    <span class="token keyword">return</span> <span class="token function">searchByTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果目标比当前结果小，搜索左子树</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searchByTree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1567</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二叉平衡树" tabindex="-1"><a class="header-anchor" href="#二叉平衡树" aria-hidden="true">#</a> 二叉平衡树</h4><ol><li>根节点的左子树与右子树的高度差不能超过1 <ul><li>判断是否是平衡二叉树</li><li>首先要获取二叉树每个节点的左右子树的深度</li><li>然后再看每个节点的左右子树深度差是否大于1</li></ul></li><li>这颗二叉树的每个子树都符合第一条</li></ol><p><img src="`+r+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token comment">// B.right = E;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">H</span><span class="token punctuation">;</span>
<span class="token constant">E</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">I</span><span class="token punctuation">;</span>
<span class="token comment">// 判断是否是平衡二叉树</span>
<span class="token comment">// 首先要获取二叉树每个节点的左右子树的深度</span>
<span class="token comment">// 然后再看每个节点的左右子树深度差是否大于1</span>
<span class="token comment">// 获取一个节点的深度</span>
<span class="token keyword">const</span> <span class="token function-variable function">getDeep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回左右子树最深的深度加上自身的层数</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDeep<span class="token punctuation">,</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">isBalanceTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 比较左右子树和和左右节点的子树深度是否相差大于1</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftDeep <span class="token operator">-</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token function">isBalanceTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanceTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBalanceTree</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二叉树的左右单旋" tabindex="-1"><a class="header-anchor" href="#二叉树的左右单旋" aria-hidden="true">#</a> 二叉树的左右单旋</h4><p>某一节点不平衡 如果左边浅，右边深，进行左单旋；右边浅，左边深，进行右单旋</p><ul><li>旋转节点：不平衡的节点为旋转节点（单旋前A）</li><li>新根：旋转之后称为根节点的节点（单旋前C）</li><li>变化分支：父级节点发生变化的那个分支</li><li>不变分支：父级节点不变的那个分支</li></ul><p><strong>左单旋时：</strong></p><ul><li>旋转节点：当前不平衡的节点</li><li>新根：右子树的根节点</li><li>变化分支：旋转节点的右子树的左子树，单旋后为旋转节点的右子树</li><li>不变分支：旋转节点的右子树的右子树</li></ul><p><strong>右单旋时：</strong></p><ul><li>旋转节点：当前不平衡的节点</li><li>新根：左子树的根节点</li><li>变化分支：旋转节点的左子树的右子树，单旋后为旋转节点的左子树</li><li>不变分支：旋转节点的左子树的左子树</li></ul><p><img src="`+d+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token constant">G</span><span class="token punctuation">;</span>
<span class="token comment">// const root = {</span>
<span class="token comment">//     value: &#39;A&#39;,</span>
<span class="token comment">//     left: null,</span>
<span class="token comment">//     right: {</span>
<span class="token comment">//         value: &#39;C&#39;,</span>
<span class="token comment">//         left: {</span>
<span class="token comment">//             value: &#39;F&#39;,</span>
<span class="token comment">//             left: null,</span>
<span class="token comment">//             right: null</span>
<span class="token comment">//         },</span>
<span class="token comment">//         right: {</span>
<span class="token comment">//             value: &#39;G&#39;,</span>
<span class="token comment">//             left: null,</span>
<span class="token comment">//             right: null</span>
<span class="token comment">//         }</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>

<span class="token comment">// 获取一棵树的深度</span>
<span class="token keyword">const</span> <span class="token function-variable function">getDeep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDeep<span class="token punctuation">,</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 判断是否是平衡二叉树</span>
<span class="token keyword">const</span> <span class="token function-variable function">isBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftDeep <span class="token operator">-</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 左单旋</span>
<span class="token keyword">const</span> <span class="token function-variable function">leftRotate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到新根</span>
    <span class="token keyword">const</span> newRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token comment">// 找到变化分支</span>
    <span class="token keyword">const</span> changeTree <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token comment">// 当前旋转节点的右孩子为变化分支</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> changeTree<span class="token punctuation">;</span>
    <span class="token comment">// 新根的左孩子为旋转节点</span>
    newRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">// 返回新的根节点</span>
    <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 右单旋</span>
<span class="token keyword">const</span> <span class="token function-variable function">rightRotate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到新根</span>
    <span class="token keyword">const</span> newRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token comment">// 找到变化分支</span>
    <span class="token keyword">const</span> changeTree <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token comment">// 当前旋转节点的左孩子为变化分支</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> changeTree<span class="token punctuation">;</span>
    <span class="token comment">// 新根的右孩子为旋转节点</span>
    newRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">// 返回新的根节点</span>
    <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将不平衡二叉树进行左右单旋转为平衡二叉树</span>
<span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 返回平衡之后的根节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftDeep <span class="token operator">-</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftDeep <span class="token operator">&gt;</span> rightDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡，左边深，需要右旋</span>
        <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡，右边深，需要左旋</span>
        <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newRoot <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二叉树的双旋" tabindex="-1"><a class="header-anchor" href="#二叉树的双旋" aria-hidden="true">#</a> 二叉树的双旋</h4><h5 id="右左双旋与左右双旋" tabindex="-1"><a class="header-anchor" href="#右左双旋与左右双旋" aria-hidden="true">#</a> 右左双旋与左右双旋</h5><p>左右单旋不能解决的问题：</p><ul><li>变化分支为唯一最深分支时，左右单旋不能处理</li><li>此时应该先进行反旋，然后再单旋，称为双旋</li><li>右左双旋 <ul><li>如要对某个节点进行左单旋时</li><li>如果变化分支是唯一的最深分支，那么我们要对新根先进行右单旋，然后再进行左单旋</li><li>这样的旋转叫做右左双旋</li></ul></li><li>左右双旋 <ul><li>如要对某个节点进行右单旋时</li><li>如果变化分支是唯一的最深分支，那么我们要对新根先进行左单旋，然后再进行右单旋</li><li>这样的旋转叫做左右双旋</li></ul></li></ul><p><img src="`+v+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_left <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_right <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">F</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">G</span><span class="token punctuation">;</span>
<span class="token constant">G</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token constant">H</span><span class="token punctuation">;</span>

<span class="token comment">// const root = {</span>
<span class="token comment">//     value: &#39;A&#39;,</span>
<span class="token comment">//     left: {</span>
<span class="token comment">//         value: &#39;C&#39;,</span>
<span class="token comment">//         left: {</span>
<span class="token comment">//             value: &#39;F&#39;,</span>
<span class="token comment">//             left: {</span>
<span class="token comment">//                  value: &#39;G&#39;,</span>
<span class="token comment">//                  left: {</span>
<span class="token comment">//                      value: &#39;H&#39;,</span>
<span class="token comment">//                      left: null,</span>
<span class="token comment">//                      right: null</span>
<span class="token comment">//                  },</span>
<span class="token comment">//                 right: null</span>
<span class="token comment">//             },</span>
<span class="token comment">//             right: null</span>
<span class="token comment">//         },</span>
<span class="token comment">//         right: null</span>
<span class="token comment">//     },</span>
<span class="token comment">//     right: null</span>
<span class="token comment">// }</span>

<span class="token comment">// 获取一棵树的深度</span>
<span class="token keyword">const</span> <span class="token function-variable function">getDeep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDeep<span class="token punctuation">,</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 判断是否是平衡二叉树</span>
<span class="token keyword">const</span> <span class="token function-variable function">isBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftDeep <span class="token operator">-</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 左单旋</span>
<span class="token keyword">const</span> <span class="token function-variable function">leftRotate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到新根</span>
    <span class="token keyword">const</span> newRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token comment">// 找到变化分支</span>
    <span class="token keyword">const</span> changeTree <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token comment">// 当前旋转节点的右孩子为变化分支</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> changeTree<span class="token punctuation">;</span>
    <span class="token comment">// 新根的左孩子为旋转节点</span>
    newRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">// 返回新的根节点</span>
    <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 右单旋</span>
<span class="token keyword">const</span> <span class="token function-variable function">rightRotate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到新根</span>
    <span class="token keyword">const</span> newRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token comment">// 找到变化分支</span>
    <span class="token keyword">const</span> changeTree <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token comment">// 当前旋转节点的左孩子为变化分支</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> changeTree<span class="token punctuation">;</span>
    <span class="token comment">// 新根的右孩子为旋转节点</span>
    newRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>
    <span class="token comment">// 返回新的根节点</span>
    <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 返回平衡之后的根节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftDeep <span class="token operator">-</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftDeep <span class="token operator">&gt;</span> rightDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡，左边深，需要右旋</span>
        <span class="token keyword">const</span> changeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> noChangeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changeTreeDeep <span class="token operator">&gt;</span> noChangeTreeDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡，右边深，需要左旋</span>
        <span class="token keyword">const</span> changeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> noChangeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changeTreeDeep <span class="token operator">&gt;</span> noChangeTreeDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加节点信息</span>
<span class="token keyword">const</span> <span class="token function-variable function">addNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 目标值比当前节点大</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果右侧为空，则创建节点</span>
        <span class="token keyword">else</span> <span class="token function">addNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果右侧不为空，则向右侧进行递归</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 目标值比当前节点小</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">addNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 构建搜索树</span>
<span class="token keyword">const</span> <span class="token function-variable function">buildSearchTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 根据树搜索节点</span>
<span class="token keyword">const</span> <span class="token function-variable function">searchByTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    num2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">searchByTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">searchByTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span> <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// const root = buildSearchTree(arr);</span>
<span class="token comment">// // console.log(searchByTree(root, 1000));</span>
<span class="token comment">// // console.log(num2);</span>
<span class="token comment">//</span>
<span class="token comment">// const newRoot = change(root);</span>
<span class="token comment">// // num2 = 0;</span>
<span class="token comment">// // console.log(searchByTree(newRoot, 1000));</span>
<span class="token comment">// // console.log(num2);</span>
<span class="token comment">// console.log(isBalance(newRoot));</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newRoot <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="左左双旋与右右双旋" tabindex="-1"><a class="header-anchor" href="#左左双旋与右右双旋" aria-hidden="true">#</a> 左左双旋与右右双旋</h5><p>左右单旋不能解决的问题：</p><ul><li>变化分支的高度比旋转节点的另一侧高度差超过2，那么单旋之后依旧不平衡</li><li>此时应该先进行单旋，然后再单旋，称为双旋</li></ul><p><img src="`+m+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 返回平衡之后的根节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBalance</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> leftDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftDeep <span class="token operator">-</span> rightDeep<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftDeep <span class="token operator">&gt;</span> rightDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡，左边深，需要右旋</span>
        <span class="token keyword">const</span> changeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> noChangeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changeTreeDeep <span class="token operator">&gt;</span> noChangeTreeDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> newRoot <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        newRoot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否需要右右双旋</span>
        newRoot <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 不平衡，右边深，需要左旋</span>
        <span class="token keyword">const</span> changeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> noChangeTreeDeep <span class="token operator">=</span> <span class="token function">getDeep</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changeTreeDeep <span class="token operator">&gt;</span> noChangeTreeDeep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> newRoot <span class="token operator">=</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        newRoot<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否需要左左双旋</span>
        newRoot <span class="token operator">=</span> <span class="token function">change</span><span class="token punctuation">(</span>newRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newRoot<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="红黑树的由来" tabindex="-1"><a class="header-anchor" href="#红黑树的由来" aria-hidden="true">#</a> 红黑树的由来</h4><p>叉越多，层数越少，但是叉越多，树的结构就越复杂，数学家算出树最多有4个叉最优，于是有了234树，红黑树就是234树发展来的</p><blockquote><ul><li>二叉平衡排序树的性能是极致的吗？ <ul><li>答：不是</li></ul></li><li>如果我们想提升二叉平衡树的性能该如何做？ <ul><li>减少层级</li></ul></li><li>影响二叉平衡排序树的性能点在哪儿？ <ul><li>在与二叉平衡排序树只能有两个叉，导致在节点铺满的时候也会有很多层</li><li>希望可以一个节点存多个数，可以提升空间的性能</li></ul></li><li>如何才能让查找的效率尽可能的高？ <ul><li>树的层级越少，查找效率越高</li></ul></li><li>怎么样才能让二叉平衡排序树的层数变得更少？ <ul><li>如果不是二叉，层数会更少</li></ul></li></ul></blockquote><h5 id="_234树" tabindex="-1"><a class="header-anchor" href="#_234树" aria-hidden="true">#</a> 234树</h5><ul><li>我们希望有一棵树，最多有四个叉（度为4）</li><li>234树子节点永远在最后一层</li><li>234树永远是平衡的（每一个路径高度都相同）</li><li>分支变多了，层数变少了</li><li>节点中存的树变多了，节点变少了</li><li>因为分支多了，复杂度也高了</li></ul><p>希望对234树进行简化，希望能简化成二叉树，但依旧保留多叉，依旧单节点中存放多个值，于是有了红黑树</p><h5 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h5><ul><li>红黑树是一棵二叉搜索树</li><li>在每个节点上增加了一个储存位来表示节点的颜色</li><li>节点是红色或黑色 <ul><li>红色：代表一个虚拟节点，组合节点</li><li>黑色：代表一个实际节点</li></ul></li><li>根节点是黑色</li><li>每个叶子节点都是黑色的</li><li>每个红色节点的两个子节点都是黑色 <ul><li>从每个叶子节点到根节点的所有路径上不能有两个连续的红色节点</li></ul></li><li>从任一节点到其每个叶子节点的所有路径都包含相同数目的黑色节点</li></ul><h4 id="树的深度优先搜索-不止二叉树" tabindex="-1"><a class="header-anchor" href="#树的深度优先搜索-不止二叉树" aria-hidden="true">#</a> 树的深度优先搜索（不止二叉树）</h4><ul><li>一颗子树一颗子树的找</li><li>找到最底再从第二个子树开始找</li></ul><p><img src="`+b+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span>
<span class="token comment">// const root = {</span>
<span class="token comment">//     value: &#39;A&#39;,</span>
<span class="token comment">//     children = [</span>
<span class="token comment">//     { value: &#39;C&#39;, children: [] },</span>
<span class="token comment">//     { value: &#39;F&#39;, children: [] },</span>
<span class="token comment">//     { value: &#39;B&#39;, children: [{ value: &#39;D&#39;, children: []}, { value: &#39;E&#39;, children: []}]}</span>
<span class="token comment">//     ]</span>
<span class="token comment">// }</span>
<span class="token keyword">const</span> <span class="token function-variable function">deepSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">deepSearch</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepSearch</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="树的广度优先搜索-不止二叉树" tabindex="-1"><a class="header-anchor" href="#树的广度优先搜索-不止二叉树" aria-hidden="true">#</a> 树的广度优先搜索（不止二叉树）</h4><ul><li>一层一层的找</li><li>找完第一层再从第二层开始找</li></ul><p><img src="`+y+`" alt="image.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">F</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addChild <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span>
<span class="token comment">// const root = {</span>
<span class="token comment">//     value: &#39;A&#39;,</span>
<span class="token comment">//     children = [</span>
<span class="token comment">//     { value: &#39;C&#39;, children: [] },</span>
<span class="token comment">//     { value: &#39;F&#39;, children: [] },</span>
<span class="token comment">//     { value: &#39;B&#39;, children: [{ value: &#39;D&#39;, children: []}, { value: &#39;E&#39;, children: []}]}</span>
<span class="token comment">//     ]</span>
<span class="token comment">// }</span>

<span class="token comment">// 队列</span>
<span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 递归</span>
<span class="token comment">// const bfs = (roots, target) =&gt; {</span>
<span class="token comment">//     if (!Array.isArray(roots) || roots.length === 0) return false;</span>
<span class="token comment">//     const children = [];</span>
<span class="token comment">//     for (let i = 0 ; i &lt; roots.length ; i ++) {</span>
<span class="token comment">//         console.log(roots[i].value);</span>
<span class="token comment">//         if (roots[i].value === target) return true;</span>
<span class="token comment">//         else children.push(...roots[i].children);</span>
<span class="token comment">//     }</span>
<span class="token comment">//     return bfs(children, target);</span>
<span class="token comment">// }</span>
<span class="token comment">//</span>
<span class="token comment">// console.log(bfs([A], &quot;S&quot;));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图的深度和广度优先搜索" tabindex="-1"><a class="header-anchor" href="#图的深度和广度优先搜索" aria-hidden="true">#</a> 图的深度和广度优先搜索</h4><p>找过的节点不再重复去找 <img src="`+w+`" alt="image.png"></p><h5 id="深度优先搜索-1" tabindex="-1"><a class="header-anchor" href="#深度优先搜索-1" aria-hidden="true">#</a> 深度优先搜索</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_neighbor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_neighbor <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">addNeighbor</span><span class="token punctuation">(</span><span class="token parameter">neighbor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">A</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span>
<span class="token constant">E</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>

<span class="token comment">// [</span>
<span class="token comment">//     [B, C], [A, C, D], [A, B, D], [B, C, E], [D]</span>
<span class="token comment">// ]</span>

<span class="token keyword">const</span> <span class="token function-variable function">deepSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target<span class="token punctuation">,</span> already</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> already<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    already<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>neighbor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">deepSearch</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>neighbor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> already<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepSearch</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="广度优先搜索-1" tabindex="-1"><a class="header-anchor" href="#广度优先搜索-1" aria-hidden="true">#</a> 广度优先搜索</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 严谨性判断，不允许任何报错</span>
<span class="token comment">// 2. 任何递归程序，先写出口</span>
<span class="token comment">// 3. 任何一种算法，都没有优劣之分，只有是否适合的场景</span>
<span class="token keyword">class</span> <span class="token class-name">BinaryTreeFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_neighbor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">neighbor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_neighbor <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">addNeighbor</span><span class="token punctuation">(</span><span class="token parameter">neighbor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_neighbor<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeFactory</span><span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">A</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">A</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">C</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token constant">D</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">;</span>
<span class="token constant">E</span><span class="token punctuation">.</span>addNeighbor <span class="token operator">=</span> <span class="token constant">D</span><span class="token punctuation">;</span>


<span class="token comment">// [</span>
<span class="token comment">//     [B, C], [A, C, D], [A, B, D], [B, C, E], [D]</span>
<span class="token comment">// ]</span>

<span class="token comment">// 队列</span>
<span class="token keyword">const</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> target<span class="token punctuation">,</span> already</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    already<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>neighbor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>root<span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>already<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            already<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>neighbor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>neighbor<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>already<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 递归</span>
<span class="token comment">// const bfs = (nodes, target, already) =&gt; {</span>
<span class="token comment">//     if (!Array.isArray(nodes) || nodes.length === 0) return false;</span>
<span class="token comment">//     const nextNodes = [];</span>
<span class="token comment">//     for (let i = 0 ; i &lt; nodes.length ; i ++) {</span>
<span class="token comment">//         if (already.indexOf(nodes[i]) &gt; -1) continue;</span>
<span class="token comment">//         already.push(nodes[i]);</span>
<span class="token comment">//         console.log(nodes[i].value);</span>
<span class="token comment">//         if (nodes[i].value === target) return true;</span>
<span class="token comment">//         else nextNodes.push(...nodes[i].neighbor);</span>
<span class="token comment">//     }</span>
<span class="token comment">//     return bfs(nextNodes, target, already);</span>
<span class="token comment">// }</span>
<span class="token comment">//</span>
<span class="token comment">// console.log(bfs([A], &quot;F&quot;, []));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,148),h=[f];function B(D,x){return s(),a("div",null,h)}const T=n(g,[["render",B],["__file","算法学习.html.vue"]]);export{T as default};
