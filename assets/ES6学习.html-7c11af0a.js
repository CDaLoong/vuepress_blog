import{_ as o,r as c,o as l,c as i,f as p,b as n,d as s,e,a}from"./app-168a97af.js";const u={},r=a(`<h1 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6+</h1><h2 id="ecmascript、javascript、nodejs-的区别" tabindex="-1"><a class="header-anchor" href="#ecmascript、javascript、nodejs-的区别" aria-hidden="true">#</a> ECMAScript、JavaScript、NodeJs 的区别</h2><ul><li>ECMAScript：简称ES，是一个语言标准（循环、判断、变量、数组等数据类型）</li><li>JavaScript：运行在浏览器端的语言，该语言使用ES标准。 ES + web api = JavaScript</li><li>NodeJs：运行在服务器端的语言，该语言使用ES标准。 ES + node api = JavaScript</li><li>无论JavaScript，还是NodeJs，它们都是ES的超集（super set）</li></ul><h2 id="ecmascript-关键的版本" tabindex="-1"><a class="header-anchor" href="#ecmascript-关键的版本" aria-hidden="true">#</a> ECMAScript 关键的版本</h2><ul><li>ES3.0： 1999</li><li>ES5.0:  2009</li><li>ES6.0:  2015, 从该版本开始，不再使用数字作为编号，而使用年份</li><li>ES7.0:  2016</li></ul><h2 id="为什么es6如此重要" tabindex="-1"><a class="header-anchor" href="#为什么es6如此重要" aria-hidden="true">#</a> 为什么ES6如此重要？</h2><p>ES6解决JS无法开发大型应用的语言层面的问题。</p><h2 id="如何应对兼容性问题" tabindex="-1"><a class="header-anchor" href="#如何应对兼容性问题" aria-hidden="true">#</a> 如何应对兼容性问题？</h2><p>使用 babel 库进行版本适配就好</p><h1 id="声明变量的问题" tabindex="-1"><a class="header-anchor" href="#声明变量的问题" aria-hidden="true">#</a> 声明变量的问题</h1><h2 id="使用var声明变量" tabindex="-1"><a class="header-anchor" href="#使用var声明变量" aria-hidden="true">#</a> 使用var声明变量</h2><ul><li>允许重复的变量声明：导致数据被覆盖</li><li>变量提升：怪异的数据访问、闭包问题</li><li>全局变量挂载到全局对象：全局对象成员污染问题</li></ul><h2 id="使用let声明变量" tabindex="-1"><a class="header-anchor" href="#使用let声明变量" aria-hidden="true">#</a> 使用let声明变量</h2><ul><li>ES6不仅引入let关键字用于解决变量声明的问题，同时引入了块级作用域的概念</li><li>块级作用域：代码执行时遇到花括号，会创建一个块级作用域，花括号结束，销毁块级作用域</li></ul><h3 id="声明变量的问题-1" tabindex="-1"><a class="header-anchor" href="#声明变量的问题-1" aria-hidden="true">#</a> 声明变量的问题</h3><ul><li>全局变量挂载到全局对象：全局对象成员污染问题 <ul><li>let声明的变量不会挂载到全局对象</li></ul></li><li>允许重复的变量声明：导致数据被覆盖 <ul><li>let声明的变量，不允许当前作用域范围内重复声明</li><li>在块级作用域中用let定义的变量，在作用域外不能访问</li></ul></li><li>变量提升：怪异的数据访问、闭包问题 <ul><li>使用let不会有变量提升，因此，不能在定义let变量之前使用它</li></ul></li></ul><p><strong>底层实现上，let声明的变量实际上也会有提升，但是，提升后会将其放入到“暂时性死区”，如果访问的变量位于暂时性死区，则会报错：“Cannot access &#39;a&#39; before initialization”。当代码运行到该变量的声明语句时，会将其从暂时性死区中移除。</strong></p><ul><li>在循环中，用let声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并且将循环变量绑定到该作用域（每次循环，使用的是一个全新的循环变量）</li><li>在循环中使用let声明的循环变量，在循环结束后会销毁</li></ul><h2 id="使用const声明常量" tabindex="-1"><a class="header-anchor" href="#使用const声明常量" aria-hidden="true">#</a> 使用const声明常量</h2><ul><li>const和let完全相同，仅在于用const声明的变量，必须在声明时赋值，而且不可以重新赋值</li><li>实际上，在开发中，应该尽量使用const来声明变量，以保证变量的值不会随意篡改，原因如下： <ul><li>根据经验，开发中的很多变量，都是不会更改，也不应该更改的</li><li>后续的很多框架或者是第三方JS库，都要求数据不可变，使用常量可以一定程度上保证这一点</li></ul></li></ul><h3 id="注意的细节" tabindex="-1"><a class="header-anchor" href="#注意的细节" aria-hidden="true">#</a> 注意的细节：</h3><ul><li>常量不可变，是指声明的常量的内存空间不可变，但并不保证内存空间中的地址指向的其他空间不可变，如对象内的数据</li><li>常量的命名 <ul><li>特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率、月地距地或其他一些绝不可能变化的配置。通常，<strong>该常量的名称全部使用大写，多个单词之间用下划线分割</strong></li><li>普通的常量：使用和之前一样的命名即可</li></ul></li><li>在for循环中，循环变量不可以使用常量，在for in 循环中可用，每次都是一个新的作用域</li></ul><h1 id="更好的unicode支持" tabindex="-1"><a class="header-anchor" href="#更好的unicode支持" aria-hidden="true">#</a> 更好的Unicode支持</h1><ul><li>早期，由于存储空间宝贵，Unicode使用16位二进制来存储文字 <ul><li>我们将一个16位的二进制编码叫做一个码元（Code Unit）</li><li>后来，由于技术的发展，Unicode对文字编码进行了扩展，将某些文字扩展到了32位（占用两个码元）</li><li>并且，将某个文字对应的二进制数字叫做码点（Code Point）</li></ul></li><li>ES6为了解决这个困扰，为字符串提供了方法：codePointAt，根据字符串码元的位置得到其码点</li><li>同时，ES6为正则表达式添加了一个<code>flag: u</code>，如果添加了该配置，则匹配时，使用码点匹配</li></ul><h1 id="更多的字符串api" tabindex="-1"><a class="header-anchor" href="#更多的字符串api" aria-hidden="true">#</a> 更多的字符串API</h1><h2 id="以下均为字符串的实例-原型-方法" tabindex="-1"><a class="header-anchor" href="#以下均为字符串的实例-原型-方法" aria-hidden="true">#</a> 以下均为字符串的实例（原型）方法</h2><ul><li>includes：判断字符串中是否包含指定的子字符串</li><li>startsWith：判断字符串中是否以指定的字符串开始</li><li>endsWith：判断字符串中是否以指定的字符串结尾</li><li>repeat：将字符串重复指定的次数，然后返回一个新字符串</li></ul><h1 id="正则中的粘连标记" tabindex="-1"><a class="header-anchor" href="#正则中的粘连标记" aria-hidden="true">#</a> 正则中的粘连标记</h1><p>标记名：y  粘连标志 含义：匹配时，完全按照正则对象中的 lastIndex 位置开始匹配，并且匹配的位置必须在 lastIndex 位置，lastIndex 可以改变：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&quot;Hello World!!!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">W\\w+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;reg.lastIndex:&quot;</span><span class="token punctuation">,</span> reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h1><h2 id="es6之前处理字符串繁琐的两个方面" tabindex="-1"><a class="header-anchor" href="#es6之前处理字符串繁琐的两个方面" aria-hidden="true">#</a> ES6之前处理字符串繁琐的两个方面</h2><ol><li>多行字符串</li><li>字符串拼接</li></ol><p>在ES6中，提供了模板字符串的书写，可以非常方便的换行和拼接，要做的，仅仅是将字符串的开始和结尾改为\`\`\`符号 如果要在字符串中拼接js表达式，只需要在模板字符串中使用<code>**\${JS表达式}**</code>，模板字符串可以嵌套</p><h2 id="模板字符串标记" tabindex="-1"><a class="header-anchor" href="#模板字符串标记" aria-hidden="true">#</a> 模板字符串标记</h2><p>在模板字符串书写之前，可以加上标记<code>标记名</code>模板字符串\`\` 标记是一个函数，函数参数如下：</p><ol><li>参数1：被插值分割的字符串数组</li><li>后续参数：所有的插值</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> love1 <span class="token operator">=</span> <span class="token string">&quot;秋葵&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> love2 <span class="token operator">=</span> <span class="token string">&quot;香菜&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> myTag<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">邓哥喜欢</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>love1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，邓哥也喜欢</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>love2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">//相当于： </span>
<span class="token comment">// text = myTag([&quot;邓哥喜欢&quot;, &quot;，邓哥也喜欢&quot;, &quot;。&quot;], &quot;秋葵&quot;, &quot;香菜&quot;)</span>
<span class="token keyword">function</span> <span class="token function">myTag</span><span class="token punctuation">(</span><span class="token parameter">parts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> values<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str <span class="token operator">+=</span> parts<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="函数参数默认值" tabindex="-1"><a class="header-anchor" href="#函数参数默认值" aria-hidden="true">#</a> 函数参数默认值</h1><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>在书写形参时，直接给形参赋值，附的值即为默认值：<code>function sum(a, b = 1, c = 2)</code> 这样一来，当调用函数时，如果没有给对应的参数赋值（给它的值是 undefined），则会自动使用默认值</p><h2 id="对arguments的影响" tabindex="-1"><a class="header-anchor" href="#对arguments的影响" aria-hidden="true">#</a> 对arguments的影响</h2><p>只要给函数加上参数默认值，该函数会自动变量严格模式下的规则：arguments 和形参脱离</p><h2 id="留意暂时性死区" tabindex="-1"><a class="header-anchor" href="#留意暂时性死区" aria-hidden="true">#</a> 留意暂时性死区</h2><p>形参和ES6中的let或const声明一样，具有作用域，并且根据参数的声明顺序，存在暂时性死区</p><h2 id="剩余参数" tabindex="-1"><a class="header-anchor" href="#剩余参数" aria-hidden="true">#</a> 剩余参数</h2><p>arguments的缺陷：</p><ul><li>如果和形参配合使用，容易导致混乱</li><li>从语义上，使用arguments获取参数，由于形参缺失，无法从函数定义上理解函数的真实意图</li></ul><p><strong>ES6的剩余参数专门用于收集末尾的所有参数，将其放置到一个形参数组中</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">testFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token operator">...</span>agrs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//args里收集了所有的参数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> agrs<span class="token punctuation">)</span> <span class="token comment">// &#39;a&#39;, [&#39;b&#39;, &#39;c&#39;]</span>
<span class="token punctuation">}</span>
<span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>细节：</strong></p><ul><li>一个函数，仅能出现一个剩余参数</li><li>一个函数，如果有剩余参数，剩余参数必须是最后一个参数</li></ul><h1 id="展开运算符" tabindex="-1"><a class="header-anchor" href="#展开运算符" aria-hidden="true">#</a> 展开运算符</h1><ul><li>使用方式：<code>...要展开的东西</code></li><li>写法和剩余参数一样，写到要调用的函数里：<code>sum(...agrs,3,4,5)</code></li><li>之后还可以继续传参数</li></ul><h2 id="对数组展开-es6" tabindex="-1"><a class="header-anchor" href="#对数组展开-es6" aria-hidden="true">#</a> 对数组展开 ES6</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行数组的复制，不是指向同一地址</p><h2 id="对对象展开-es7" tabindex="-1"><a class="header-anchor" href="#对对象展开-es7" aria-hidden="true">#</a> 对对象展开 ES7</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//  { name: &#39;a&#39;, age: 12 }</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span>，<span class="token comment">// { name: &#39;b&#39;, age: 12 } 新的 name 会覆盖 obj1 里的 name 进行对象的复制，浅克隆，指向同一地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用以下方法进行局部深度克隆</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;成哥&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loves</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;邓嫂&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;成嫂1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;成嫂2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">country</span><span class="token operator">:</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&quot;黑龙江&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;哈尔滨&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;邓哥&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>obj1<span class="token punctuation">.</span>address <span class="token comment">//深克隆</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loves</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>obj1<span class="token punctuation">.</span>loves<span class="token punctuation">,</span> <span class="token string">&quot;成嫂3&quot;</span><span class="token punctuation">]</span>  <span class="token comment">//深克隆</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>loves <span class="token operator">===</span> obj2<span class="token punctuation">.</span>loves<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>address <span class="token operator">===</span> obj2<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="科里化" tabindex="-1"><a class="header-anchor" href="#科里化" aria-hidden="true">#</a> 科里化</h1><p>curry 方法，科里化，用于固定某个函数前边的参数的值，得到一个新的函数，新的函数调用时，接收剩余参数即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">*</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// curry：柯里化，用户固定某个函数的前面的参数，得到一个新的函数，新的函数调用时，接收剩余的参数</span>
<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>subArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> allArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>subArgs<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>allArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> func<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//参数够了</span>
      <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>allArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">//参数不够，继续固定</span>
      <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token operator">...</span>allArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> newCal <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>cal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newCal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1+2*3-4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newCal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1+2*4-5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newCal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1+2*5-6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newCal</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1+2*6-7</span>
<span class="token keyword">const</span> newCal2 <span class="token operator">=</span> <span class="token function">newCal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newCal2</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1+2*8-9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="new-target" tabindex="-1"><a class="header-anchor" href="#new-target" aria-hidden="true">#</a> new.target</h1><p>ES6提供了一个特殊的API，可以使用该API在函数内部，判断该函数是否使用了new来调用 <code>new.target</code></p><ul><li>该表达式，得到的是：如果没有使用new来调用函数，则返回undefined</li><li>如果使用new调用函数，则得到的是new关键字后面的函数本身</li></ul><h1 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h1><p>回顾：this 指向</p><ul><li>通过对象调用函数，this 指向对象</li><li>直接调用函数，this 指向全局对象</li><li>如果通过 new 调用函数，this 指向新创建的对象</li><li>如果通过 apply、call、bind 调用函数，this 指向指定的数据</li><li>如果是 DOM 事件函数，this 指向事件源</li></ul><h2 id="使用语法" tabindex="-1"><a class="header-anchor" href="#使用语法" aria-hidden="true">#</a> 使用语法</h2><p><strong>箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数</strong></p><ul><li>完整语法：<code>(参数1, 参数2, ...)=&gt;{ //函数体 }</code></li><li>如果参数只有一个，可以省略小括号: <code>参数 =&gt; { }</code></li><li>如果箭头函数只有一条返回语句，可以省略大括号，和return关键字，返回对象用一对圆括号括住对象，把对象转换成表达式即可: <code>参数 =&gt; 返回值</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isOdd</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意细节" tabindex="-1"><a class="header-anchor" href="#注意细节" aria-hidden="true">#</a> 注意细节</h2><ul><li>箭头函数中，不存在 this、arguments、new.target，如果使用了，则使用的是函数外层的对应的this、arguments、new.target</li><li>箭头函数没有原型</li><li>箭头函数不能当作构造函数使用</li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li>临时性使用的函数，并不会调用它，比如： <ul><li>事件处理函数</li><li>异步处理函数</li><li>其他临时性的函数</li></ul></li><li>为了绑定外层this的函数</li></ul><h1 id="新增的对象字面量语法" tabindex="-1"><a class="header-anchor" href="#新增的对象字面量语法" aria-hidden="true">#</a> 新增的对象字面量语法</h1><h2 id="成员速写" tabindex="-1"><a class="header-anchor" href="#成员速写" aria-hidden="true">#</a> 成员速写</h2><p>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写：<code>{ a: a, b: b, c: c} ---&gt; {a, b, c}</code></p><h2 id="方法速写" tabindex="-1"><a class="header-anchor" href="#方法速写" aria-hidden="true">#</a> 方法速写</h2><p>对象字面初始化时，方法可以省略冒号和function关键字：<code>{ say: function(){ console.log(123) } } ---&gt; { say(){ console.log(123) } }</code></p><h2 id="计算属性名" tabindex="-1"><a class="header-anchor" href="#计算属性名" aria-hidden="true">#</a> 计算属性名</h2><p>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在 ES6，可以使用中括号来表示该属性名是通过计算得到的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> prop1 <span class="token operator">=</span> <span class="token string">&quot;name2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> prop2 <span class="token operator">=</span> <span class="token string">&quot;age2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> prop3 <span class="token operator">=</span> <span class="token string">&quot;sayHello2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>prop1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;姬成&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>prop2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>prop3<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>prop1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>prop2<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
user<span class="token punctuation">[</span>prop3<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="object的新增api" tabindex="-1"><a class="header-anchor" href="#object的新增api" aria-hidden="true">#</a> Object的新增API</h1><ul><li><p>Object.is：用于判断两个数据是否相等，基本上跟严格相等（===）是一致的，除了以下两点：</p><ul><li>NaN 和 NaN 相等<code>Object.is(NaN, NaN) // 相等</code></li><li>+0 和 -0 不相等 <code>Object.is(+0, -0) // 不相等</code></li></ul></li><li><p>Object.assign：用于混合对象，<code>Object.assign(obj1, obj2)</code>，obj2会覆盖obj1，但是会改变obj1里的内容，可用一个空对象解决，<code>const obj = Object.assign({}, obj1, obj2)</code></p></li><li><p>Object.getOwnPropertyNames 的枚举顺序：<code>Object.getOwnPropertyNames</code> 方法之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定</p><ul><li>ES6规定了该方法返回的数组的排序方式如下： <ul><li>先排数字，并按照升序排序</li><li>再排其他，按照书写顺序排序</li></ul></li></ul></li><li><p>Object.setPrototypeOf：该函数用于设置某个对象的隐式原型，修改隐式原型</p><ul><li>比如：<code>Object.setPrototypeOf(obj1, obj2)</code></li><li>相当于：<code>obj1.__proto__ = obj2</code></li></ul></li></ul><h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h1><p>面向对象：一种编程思想，跟具体的语言无关 对比面向过程：</p><ul><li>面向过程：思考的切入点是功能的步骤</li><li>面向对象：思考的切入点是对象的划分</li></ul><p>【大象装冰箱】</p><h2 id="类-构造函数的语法糖" tabindex="-1"><a class="header-anchor" href="#类-构造函数的语法糖" aria-hidden="true">#</a> 类：构造函数的语法糖</h2><h3 id="传统的构造函数的问题" tabindex="-1"><a class="header-anchor" href="#传统的构造函数的问题" aria-hidden="true">#</a> 传统的构造函数的问题</h3><ul><li>属性和原型方法定义分离，降低了可读性</li><li>原型成员可以被枚举</li><li>默认情况下，构造函数仍然可以被当作普通函数使用</li></ul><h3 id="类的特点-关键字-class" tabindex="-1"><a class="header-anchor" href="#类的特点-关键字-class" aria-hidden="true">#</a> 类的特点，关键字：class</h3><ul><li>类声明不会被提升，与 let 和 const 一样，存在暂时性死区</li><li>类中的所有代码均在严格模式下执行</li><li>类的所有方法都是不可枚举的</li><li>类的所有方法都无法被当作构造函数使用</li><li>类的构造器必须使用 new 来调用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token punctuation">}</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【种类】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【名字】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【年龄】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【性别】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">柯基</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">小小只</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">公</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类的的-constructor-属性-直接指向-类-的本身" tabindex="-1"><a class="header-anchor" href="#类的的-constructor-属性-直接指向-类-的本身" aria-hidden="true">#</a> 类的的 constructor() 属性，直接指向“类”的本身</h4><p>与 ES5 的行为一致，<code>Animal.prototype.constructor === Animal</code></p><h3 id="类的其他书写方式" tabindex="-1"><a class="header-anchor" href="#类的其他书写方式" aria-hidden="true">#</a> 类的其他书写方式</h3><ul><li>可计算的成员名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> printName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">print</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex 
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span>printName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//用变量名作为方法名的写法</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【种类】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【名字】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【年龄】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【性别】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">柯基</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">小小只</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">公</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

a<span class="token punctuation">[</span>printName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>getter和setter <ul><li>ES5：Object.defineProperty 可定义某个对象成员属性的读取和设置</li><li>使用 getter 和 setter 控制的属性，不在原型上</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> printName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">print</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token punctuation">}</span>
  <span class="token comment">//创建一个age属性，并给它加上getter，读取该属性时，会运行该函数</span>
  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">+</span> <span class="token string">&#39;岁&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//创建一个age属性，并给它加上setter，给该属性赋值时，会运行该函数</span>
  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;age property must be a number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      age <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span>printName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//用变量名作为方法名的写法z</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【种类】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【名字】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【年龄】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【性别】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">柯基</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">小小只</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">公</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>printName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>静态成员 <ul><li>构造函数本身的成员</li><li>使用static关键字定义的成员即静态成员</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Chess</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> width <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>  <span class="token comment">//static 关键字添加静态成员</span>
  <span class="token keyword">static</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chess<span class="token punctuation">.</span>width<span class="token punctuation">,</span>Chess<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
Chess<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段初始化器（ES7）</li></ul><p>注意：</p><ul><li>使用static的字段初始化器，添加的是静态成员</li><li>没有使用static的字段初始化器，添加的成员位于对象上</li><li>箭头函数在字段初始化器位置上，指向当前对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Text</span><span class="token punctuation">{</span>
  <span class="token keyword">static</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//静态成员</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 字段初始化器</span>
  c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//本身固定值的实例成员不用写在constructor构造器里</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类表达式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token comment">//匿名类，类表达式</span>
  <span class="token keyword">static</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//静态成员</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//本身固定值的实例成员不用写在constructor里</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>装饰器（ES7）(Decorator) <ul><li>横切关注点</li><li>装饰器的本质是一个函数</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  @Obsolete
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;print方法&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Obsolete</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// function Test</span>
  <span class="token comment">// print</span>
  <span class="token comment">// { value: function print(){}, ... }</span>
  <span class="token comment">// console.log(target, methodName, descriptor);</span>
  <span class="token keyword">const</span> oldFunc <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>methodName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">方法已过时</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">oldFunc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的继承" tabindex="-1"><a class="header-anchor" href="#类的继承" aria-hidden="true">#</a> 类的继承</h3><ul><li>如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系，比如猫是动物，A代表一个大类，B代表一个小支</li><li>如果B是A，则： <ul><li>B继承自A</li><li>A派生B</li><li>B是A的子类</li><li>A是B的父类</li></ul></li><li>如果A是B的父类，则B会自动拥有A中的所有实例成员。</li><li>新的关键字： <ul><li>extends：继承，用于类的定义</li><li>super <ul><li>直接当作函数调用，表示父类构造函数</li><li>如果当作对象使用，则表示父类的原型</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;你不能直接创建Animal的对象，应该通过子类创建&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【种类】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【名字】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【年龄】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【性别】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">jiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;动物怎么叫的？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;犬类&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 子类特有的属性</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loves <span class="token operator">=</span> <span class="token string">&quot;吃骨头&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用父类的print</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//自己特有的代码</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【爱好】：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>loves<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//同名方法，会覆盖父类</span>
    <span class="token function">jiao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;旺旺！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;旺财&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;公&quot;</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>ES6要求，如果定义了 constructor，并且该类是子类，则必须在 constructo r的第一行手动调用父类的构造函数<code>super()</code></li><li>如果子类不写 constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器</li></ul><p><strong>冷知识</strong></p><ul><li>用 JS 制作抽象类 <ul><li>抽象类：一般是父类，不能通过该类创建对象</li></ul></li><li>正常情况下，this 始终指向具体的类的对象</li></ul><h1 id="解构" tabindex="-1"><a class="header-anchor" href="#解构" aria-hidden="true">#</a> 解构</h1><h2 id="对象解构" tabindex="-1"><a class="header-anchor" href="#对象解构" aria-hidden="true">#</a> 对象解构</h2><h3 id="什么是解构" tabindex="-1"><a class="header-anchor" href="#什么是解构" aria-hidden="true">#</a> 什么是解构</h3><ul><li>使用ES6的一种语法规则，将一个对象或数组的某个属性提取到某个变量中</li><li><strong>解构不会对被解构的目标造成任何影响</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;kevin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&quot;四川&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;成都&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// let name, age, sex, address;</span>
<span class="token comment">// name = user.name;</span>
<span class="token comment">// age = user.age;</span>
<span class="token comment">// sex = user.sex;</span>
<span class="token comment">// address = user.address;</span>
<span class="token comment">// let name, age, sex, address, abc;</span>
<span class="token comment">// ({ name, age, sex, address } = user);</span>
<span class="token comment">// 先定义5个变量，然后从对象中读取同名属性，放到变量中</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">,</span> abc <span class="token operator">=</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">,</span> abc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在解构中使用默认值" tabindex="-1"><a class="header-anchor" href="#在解构中使用默认值" aria-hidden="true">#</a> 在解构中使用默认值</h3><p><strong>{同名变量 = 默认值}</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">,</span> abc <span class="token operator">=</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user
<span class="token comment">// abc在对象中有值就用对象中的值，没有值用默认值123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非同名属性解构" tabindex="-1"><a class="header-anchor" href="#非同名属性解构" aria-hidden="true">#</a> 非同名属性解构</h3><p>{属性名:变量名}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// gender 没有同名属性，读取 sex 的属性, sex没值用默认值 性别, 在这个里 gender 即取的对象中的 sex 的值</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> gender <span class="token operator">=</span> <span class="token string">&quot;性别&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span> abc <span class="token operator">=</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> address<span class="token punctuation">,</span> abc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深层次解构" tabindex="-1"><a class="header-anchor" href="#深层次解构" aria-hidden="true">#</a> 深层次解构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;kevin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&quot;四川&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;成都&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 解构出 user 中的 name、address.province</span>
<span class="token comment">// 定义两个变量 name、province</span>
<span class="token comment">// 再解构</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span> province <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> province<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组解构" tabindex="-1"><a class="header-anchor" href="#数组解构" aria-hidden="true">#</a> 数组解构</h2><p>与对象可以一模一样，也可以更简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">q</span><span class="token operator">:</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token string">&#39;z&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// let [n1, n2, n3] = number;</span>
<span class="token comment">// console.log(n1, n2, n3);</span>
<span class="token comment">// let [n1, , , n4, n5 = 123] = number;</span>
<span class="token comment">// console.log(n1, n4, n5);</span>
<span class="token comment">// let [n1, , [a, b, , d], n4, n5 = 123] = number;</span>
<span class="token comment">// console.log(n1, a, b, d, n4, n5);</span>
<span class="token comment">// let [n1, , [a, b, , d], n4, {</span>
<span class="token comment">//     q,</span>
<span class="token comment">//     w: R,</span>
<span class="token comment">//     e</span>
<span class="token comment">// }] = number;</span>
<span class="token comment">// console.log(n1, a, b, d, n4, q, R, e);</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token operator">...</span>obj<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数结构" tabindex="-1"><a class="header-anchor" href="#参数结构" aria-hidden="true">#</a> 参数结构</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// function print(user) {</span>
<span class="token comment">//     console.log(\`姓名：\${user.name}\`)</span>
<span class="token comment">//     console.log(\`年龄：\${user.age}\`)</span>
<span class="token comment">//     console.log(\`性别：\${user.sex}\`)</span>
<span class="token comment">//     console.log(\`身份：\${user.address.province}\`)</span>
<span class="token comment">//     console.log(\`城市：\${user.address.city}\`)</span>
<span class="token comment">// }</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    province<span class="token punctuation">,</span>
    city
<span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//直接把传入的参数对象解构</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">身份：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>province<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">城市：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;kevin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&quot;四川&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;成都&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token comment">// function ajax(options) {</span>
<span class="token comment">//     const defaultOptions = {</span>
<span class="token comment">//         method: &quot;get&quot;,</span>
<span class="token comment">//         url: &quot;/&quot;</span>
<span class="token comment">//     }</span>
<span class="token comment">//     const opt = {</span>
<span class="token comment">//         ...defaultOptions,</span>
<span class="token comment">//         ...options</span>
<span class="token comment">//     }</span>
<span class="token comment">//     console.log(opt)</span>
<span class="token comment">// }</span>
<span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    method <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    url <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 解构参数对象，如果没有传参，则使用默认值{}，不传参解构会报错，无法解构undefined和null</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="符号-symbol" tabindex="-1"><a class="header-anchor" href="#符号-symbol" aria-hidden="true">#</a> 符号 Symbol()</h1><h2 id="普通符号" tabindex="-1"><a class="header-anchor" href="#普通符号" aria-hidden="true">#</a> 普通符号</h2><ul><li>符号是ES6新增的一个数据类型，它通过使用函数 <code>Symbol(符号描述)</code> 来创建<code>let sym1 = Symbol(&#39;123&#39;);</code></li><li>符号设计的初衷，是为了给对象设置私有属性 <ul><li>私有属性：只能在对象内部使用，外面无法使用</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建一个符号</span>
<span class="token keyword">const</span> syb1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> syb2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syb1<span class="token punctuation">,</span> syb2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> syb1 <span class="token operator">===</span> <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> syb2 <span class="token operator">===</span> <span class="token string">&quot;symbol&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>符号具有以下特点：</p><ul><li>没有字面量</li><li>使用 typeof 得到的类型是 symbol</li><li><strong>每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</strong></li><li>符号可以作为对象的属性名存在，这种属性称之为符号属性<code>[sym1]: 3</code>，对象中符号属性名需用 [ ] 括住 <ul><li>开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问</li><li>符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</li><li>Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性</li><li>ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号</li></ul></li><li>符号无法被隐式转换，因此不能被用于数学运算、字符串拼接或其他隐式转换的场景，但符号可以显式的转换为字符串，通过 String 构造函数进行转换即可，console.log 之所以可以输出符号，是它在内部进行了显式转换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Hero <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> getRandom <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">attack<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> defence</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">=</span> attack<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hp <span class="token operator">=</span> hp<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>defence <span class="token operator">=</span> defence<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">gongji</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//伤害：攻击力*随机数（0.8~1.1)</span>
      <span class="token keyword">const</span> dmg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attack <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">[</span>getRandom<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dmg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span>getRandom<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//根据最小值和最大值产生一个随机数</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> syb <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>syb<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Object.keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Object.getOwnPropertyNames()本身不包含对象的 Symbol 属性，只包含字符串属性。返回一个数组，该数组对元素是 obj自身拥有的枚举或不可枚举属性名称字符串。 数组中枚举属性的顺序与通过 for...in 循环（或 Object.keys）迭代该对象属性时一致。数组中不可枚举属性的顺序未定义。</span>
<span class="token comment">//得到的是一个符号属性的数组</span>
<span class="token keyword">const</span> sybs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回 Symbol 属性的对象,在给定对象自身上找到的所有 Symbol 属性的数组。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sybs<span class="token punctuation">,</span> sybs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> syb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="共享符号" tabindex="-1"><a class="header-anchor" href="#共享符号" aria-hidden="true">#</a> 共享符号</h2><p>根据某个符号名称（符号描述）能够得到同一个符号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;符号名/符号描述&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//获取共享符号，静态成员</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1 <span class="token operator">===</span> obj2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知名-公共、具名-符号" tabindex="-1"><a class="header-anchor" href="#知名-公共、具名-符号" aria-hidden="true">#</a> 知名（公共、具名）符号</h2><p>知名符号是一些具有特殊含义的共享符号，天生就有，不用创建，直接用，通过 Symbol 的静态属性得到 ES6 延续了 ES5 的思想：减少魔法，暴露内部实现！ 因此，ES6 用知名符号暴露了某些场景的内部实现</p><ul><li>Symbol.hasInstance：该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj <span class="token keyword">instanceof</span> <span class="token class-name">A</span>
<span class="token comment">//等效于</span>
<span class="token constant">A</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// Function.prototype[Symbol.hasInstance]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Symbol.isConcatSpreadable：该知名符号会影响数组的 concat 方法</li><li>Symbol.toPrimitive：该知名符号会影响类型转换的结果</li><li>Symbol.toStringTag：该知名符号会影响 Object.prototype.toString 的返回值</li><li>其他知名符号</li></ul><h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><ul><li>JS运行的环境称之为宿主环境</li><li>执行栈：call stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入到执行栈；函数调用之后，销毁执行环境</li><li>JS引擎永远执行的是执行栈的最顶部</li><li>异步函数：某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如事件处理函数。异步函数的执行时机，会被宿主环境控制</li><li>浏览器宿主环境中包含5个线程： <ul><li>JS引擎：负责执行执行栈的最顶部代码</li><li>GUI线程：负责渲染页面</li><li>事件监听线程：负责监听各种事件</li><li>计时线程：负责计时</li><li>网络线程：负责网络通信</li></ul></li><li>当上面的线程发生了某些事请，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没有了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行</li><li>JS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</li><li>事件队列在不同的宿主环境中有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种： <ul><li>宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列</li><li>微任务（队列）：MutationObserver，Promise产生的回调进入微队列 <ul><li>MutationObserver用于监听某个DOM对象的变化</li></ul></li></ul></li><li>当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务</li></ul><h2 id="事件和回调函数的缺陷" tabindex="-1"><a class="header-anchor" href="#事件和回调函数的缺陷" aria-hidden="true">#</a> 事件和回调函数的缺陷</h2><ul><li>我们习惯于使用传统的回调或事件处理来解决异步问题 <ul><li>事件：某个对象的属性是一个函数，当发生某一件事时，运行该函数 <ul><li><code>dom.onclick = function() {}</code></li></ul></li><li>回调：运行某个函数以实现某个功能的时候，传入一个函数作为参数，当发生某件事的时候，会运行该函数 <ul><li>dom.addEventListener(&quot;click&quot;, function(){})</li></ul></li></ul></li><li>本质上，事件和回调并没有本质的区别，只是把函数放置的位置不同而已。</li><li>一直以来，该模式都运作良好</li><li>直到前端工程越来越复杂...</li><li>目前，该模式主要面临以下两个问题： <ul><li>回调地狱：某个异步操作需要等待之前的异步操作完成，无论用回调还是事件，都会陷入不断的嵌套</li><li>异步之间的联系：某个异步操作要等待多个异步操作的结果，对这种联系的处理，会让代码的复杂度剧增</li></ul></li></ul><h2 id="异步处理的通用模型" tabindex="-1"><a class="header-anchor" href="#异步处理的通用模型" aria-hidden="true">#</a> 异步处理的通用模型</h2><ul><li>ES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。</li><li>值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。</li><li>理解该 API，最重要的，是理解它的异步模型 <ul><li>ES6 将某一件可能发生异步操作的事情，分为两个阶段：<strong>unsettled</strong> 和 <strong>settled</strong><ul><li>unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事</li><li>settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转</li></ul></li></ul></li></ul>`,161),k=a(`<pre><code>  - 事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力
</code></pre><ul><li>ES6将事情划分为三种状态： pending、resolved、rejected <ul><li>pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）</li><li>resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果</li><li>rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误</li></ul></li><li>既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！ <ul><li>我们将 把事情变为 resolved 状态的过程叫做：<strong>resolve</strong>，推向该状态时，可能会传递一些数据</li><li>我们将 把事情变为 rejected 状态的过程叫做：<strong>reject</strong>，推向该状态时，同样可能会传递一些数据，通常为错误信息</li></ul></li><li><strong>始终记住，无论是阶段，还是状态，都是不可逆的！</strong></li></ul>`,2),d=n("ul",null,[n("li",null,[s("当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理 "),n("ul",null,[n("li",null,"resolved状态：这是一个正常的已决状态，后续处理表示为 thenable"),n("li",null,"rejected状态：这是一个非正常的已决状态，后续处理表示为 catchable")])]),n("li",null,"后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行")],-1),v=a(`<ul><li>整件事称之为Promise</li></ul><h2 id="promise的基本使用" tabindex="-1"><a class="header-anchor" href="#promise的基本使用" aria-hidden="true">#</a> Promise的基本使用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">// 未决阶段的处理</span>
  <span class="token comment">// 通过调用resolve函数将Promise推向已决阶段的resolved状态</span>
  <span class="token comment">// 通过调用reject函数将Promise推向已决阶段的rejected状态</span>
  <span class="token comment">// resolve和reject均可以传递最多一个参数，表示推向状态的数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
pro<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//这是thenable函数，如果当前的Promise已经是resolved状态，该函数会立即执行</span>
  <span class="token comment">//如果当前是未决阶段，则会加入到作业队列，等待到达resolved状态后执行</span>
  <span class="token comment">//data为状态数据</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token comment">//这是catchable函数，如果当前的Promise已经是rejected状态，该函数会立即执行</span>
  <span class="token comment">//如果当前是未决阶段，则会加入到作业队列，等待到达rejected状态后执行</span>
  <span class="token comment">//err为状态数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 辅助函数,把传进来的对象拼接成url的字符串</span>
<span class="token keyword">function</span> <span class="token function">toData</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 封装Ajax</span>
<span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//指定提交方式的默认值</span>
    obj<span class="token punctuation">.</span>type <span class="token operator">=</span> obj<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//设置是否异步，默认为true(异步)</span>
    obj<span class="token punctuation">.</span>async <span class="token operator">=</span> obj<span class="token punctuation">.</span>async <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//设置数据的默认值</span>
    obj<span class="token punctuation">.</span>data <span class="token operator">=</span> obj<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据不同的浏览器创建XHR对象</span>
    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 非IE浏览器</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// IE浏览器</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 区分get和post,发送HTTP请求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>url<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>async<span class="token punctuation">)</span><span class="token punctuation">;</span>
      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">toData</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> url <span class="token operator">=</span> obj<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">&quot;?&quot;</span> <span class="token operator">+</span> <span class="token function">toData</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>async<span class="token punctuation">)</span><span class="token punctuation">;</span>
      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接收返回过来的数据</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>  
<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;./data/students.json?name=李华&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>细节</strong></p><ul><li>未决阶段的处理函数是同步的，会立即执行</li><li>thenable 和 catchable 函数是异步的，就算是立即执行，也会加入到事件队列中等待执行，并且，加入的队列是微队列</li><li>pro.then 可以只添加 thenable 函数，pro.catch 可以单独添加 catchable 函数</li><li>在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向 rejected，并会被 catchable 捕获</li><li>一旦状态推向了已决阶段，无法再对状态做任何更改</li><li><strong>Promise 并没有消除回调，只是让回调变得可控</strong></li></ul><h3 id="promise的串联" tabindex="-1"><a class="header-anchor" href="#promise的串联" aria-hidden="true">#</a> Promise的串联</h3><ul><li>当后续的 Promise 需要用到之前的 Promise 的处理结果时，需要 Promise 的串联</li><li>Promise 对象中，无论是 then 方法还是 catch 方法，它们都具有返回值，返回的是一个全新的 Promise 对象，它的状态满足下面的规则： <ul><li>如果当前的 Promise 是未决的，得到的新的 Promise 是挂起状态</li><li>如果当前的 Promise 是已决的，会运行响应的后续处理函数，并将后续处理函数的结果（返回值）作为 resolved 状态数据，应用到新的 Promise 中；如果后续处理函数发生错误，则把返回值作为 rejected 状态数据，应用到新的 Promise 中</li></ul></li><li><strong>后续的 Promise 一定会等到前面的 Promise 有了后续处理结果后，才会变成已决状态</strong></li><li>如果前面的 Promise 的后续处理，返回的是一个 Promise，则返回的新的 Promise 状态和后续处理返回的 Promise 状态保持一致</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取李华所在班级的老师的信息</span>
<span class="token comment">//1. 获取李华的班级id   Promise</span>
<span class="token comment">//2. 根据班级id获取李华所在班级的老师id   Promise</span>
<span class="token comment">//3. 根据老师的id查询老师信息   Promise</span>
<span class="token keyword">const</span> pro <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;./data/students.json&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
pro<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> resp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;李华&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> resp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classId<span class="token punctuation">;</span> <span class="token comment">//班级id</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">cid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;./data/classes.json?cid=&quot;</span> <span class="token operator">+</span> cid
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">cls</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cls<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> cid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>teacherId<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">tid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;./data/teachers.json&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">ts</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> tid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">teacher</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">biaobai</span><span class="token punctuation">(</span><span class="token parameter">god</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">邓哥向</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>god<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">发出了表白短信</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//女神同意拉</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//resolve</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    邓哥心中有三个女神
    有一天，邓哥决定向第一个女神表白，如果女神拒绝，则向第二个女神表白，直到所有的女神都拒绝，或有一个女神同意为止
    用代码模拟上面的场景
*/</span>
<span class="token keyword">const</span> gods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;女神1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女神2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女神3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女神4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女神5&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> pro<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pro <span class="token operator">=</span> <span class="token function">biaobai</span><span class="token punctuation">(</span>gods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  pro <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>gods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">同意了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>gods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">拒绝了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> gods<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">biaobai</span><span class="token punctuation">(</span>gods<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// let pro = biaobai(gods[0]).then(resp =&gt; {</span>
<span class="token comment">//     if (resp === undefined) {</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else if (resp) {</span>
<span class="token comment">//         console.log(\`\${gods[0]}同意了\`)</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//         console.log(\`\${gods[0]}拒绝了\`)</span>
<span class="token comment">//         return biaobai(gods[1]);</span>
<span class="token comment">//     }</span>
<span class="token comment">// });</span>
<span class="token comment">// pro = pro.then(resp =&gt; {</span>
<span class="token comment">//     if (resp === undefined) {</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else if (resp) {</span>
<span class="token comment">//         console.log(\`\${gods[1]}同意了\`)</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//         console.log(\`\${gods[1]}拒绝了\`)</span>
<span class="token comment">//         return biaobai(gods[2]);</span>
<span class="token comment">//     }</span>
<span class="token comment">// })</span>
<span class="token comment">// pro = pro.then(resp =&gt; {</span>
<span class="token comment">//     if (resp === undefined) {</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else if (resp) {</span>
<span class="token comment">//         console.log(\`\${gods[2]}同意了\`)</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//         console.log(\`\${gods[2]}拒绝了\`)</span>
<span class="token comment">//     }</span>
<span class="token comment">// })</span>
<span class="token comment">// biaobai(&quot;女神1&quot;).then(resp =&gt; {</span>
<span class="token comment">//     if (resp) {</span>
<span class="token comment">//         console.log(&quot;女神1同意了&quot;)</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//         return biaobai(&quot;女神2&quot;);</span>
<span class="token comment">//     }</span>
<span class="token comment">// }).then(resp =&gt; {</span>
<span class="token comment">//     if (resp === undefined) {</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else if (resp) {</span>
<span class="token comment">//         console.log(&quot;女神2同意了&quot;)</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//         return biaobai(&quot;女神3&quot;);</span>
<span class="token comment">//     }</span>
<span class="token comment">// }).then(resp =&gt; {</span>
<span class="token comment">//     if (resp === undefined) {</span>
<span class="token comment">//         return;</span>
<span class="token comment">//     } else if (resp) {</span>
<span class="token comment">//         console.log(&quot;女神3同意了&quot;)</span>
<span class="token comment">//     } else {</span>
<span class="token comment">//         console.log(&quot;都被拒绝了！&quot;);</span>
<span class="token comment">//     }</span>
<span class="token comment">// })</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="promise的其他api" tabindex="-1"><a class="header-anchor" href="#promise的其他api" aria-hidden="true">#</a> Promise的其他api</h3><h4 id="原型成员-实例成员" tabindex="-1"><a class="header-anchor" href="#原型成员-实例成员" aria-hidden="true">#</a> 原型成员 (实例成员)</h4><ul><li>then：注册一个后续处理函数，当Promise为resolved状态时运行该函数</li><li>catch：注册一个后续处理函数，当Promise为rejected状态时运行该函数</li><li>finally：[ES2018]注册一个后续处理函数（无参），当Promise为已决时运行该函数</li></ul><h4 id="构造函数成员-静态成员" tabindex="-1"><a class="header-anchor" href="#构造函数成员-静态成员" aria-hidden="true">#</a> 构造函数成员 （静态成员）</h4><ul><li>resolve(数据)：该方法返回一个resolved状态的Promise，传递的数据作为状态数据 <ul><li>特殊情况：如果传递的数据是Promise，则直接返回传递的Promise对象</li></ul></li><li>reject(数据)：该方法返回一个rejected状态的Promise，传递的数据作为状态数据</li><li>all(iterable)：这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</li><li>race(iterable)：当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象</li></ul><h4 id="async-和-await" tabindex="-1"><a class="header-anchor" href="#async-和-await" aria-hidden="true">#</a> async 和 await</h4><p>async 和 await 是 ES2016 新增两个关键字，它们借鉴了 ES2015 中生成器在实际开发中的应用，目的是简化 Promise api 的使用，并非是替代 Promise。</p><ul><li>async <ul><li>目的是简化在函数的返回值中对Promise的创建</li><li>async 用于修饰函数（无论是函数字面量还是函数表达式），放置在函数最开始的位置，被修饰函数的返回结果一定是 Promise 对象。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//等效于</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>await <ul><li><strong>await 关键字必须出现在 async 函数中！！！</strong></li><li>await 用在某个表达式之前，如果表达式是一个Promise，则得到的是 thenable 中的状态数据</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等效于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> data<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果await的表达式不是Promise，则会将其使用Promise.resolve包装后按照规则运行</p><h2 id="promise的理解" tabindex="-1"><a class="header-anchor" href="#promise的理解" aria-hidden="true">#</a> Promise的理解</h2><ul><li>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大</li><li>它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象</li><li>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</li><li>从语法上说，Promise是一个对象，从它可以获取异步操作的消息</li><li>Promise提供统一的API，各种异步操作都可以用同样的方法进行处理</li><li>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数</li><li>此外，Promise对象提供统一的接口，使得控制异步操作更加容易</li></ul><h3 id="promise缺点" tabindex="-1"><a class="header-anchor" href="#promise缺点" aria-hidden="true">#</a> Promise缺点</h3><ul><li>无法取消Promise，一旦新建它就会立即执行，无法中途取消</li><li>如果不设置回调函数，Promise内部抛出的错误，不会反应到外部</li><li>当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li><li>同步调用，在发起一个函数或方法调用时，没有得到结果之前，该调用就不返回，直到返回结果 <ul><li>异步调用的概念和同步相对 <ul><li>在一个异步调用发起后，被调用者立即返回给调用者，但调用者不能立刻得到结果</li><li>被调用者在实际处理这个调用的请求完成后，通过状态、通知或回调等方式来通知调用者请求处理的结果</li></ul></li><li>简单地说，同步就是发出一个请求后什么事都不做，一直等待请求返回后才会继续做事</li><li>异步就是发出请求后继续去做其他事，这个请求处理完成后会通知你，这时候就可以处理这个回应了</li></ul></li></ul><h2 id="async-await的理解" tabindex="-1"><a class="header-anchor" href="#async-await的理解" aria-hidden="true">#</a> async/await的理解</h2><ul><li>async/await其实是Promise的语法糖，它能实现的效果都能用then链来实现 <ul><li>它是为优化then链而开发出来的</li><li>从字面上来看，async是“异步”的简写</li><li>await译为等待</li><li>所以我们很好理解async声明function是异步的，await等待某个操作完成</li></ul></li><li>await等待的是一个Promise对象，或者是其他值（也就是说可以等待任何值） <ul><li>如果等待的是Promise对象，则返回Promise的处理结果</li><li>如果是其他值，则返回该值本身</li><li>并且await会暂停当前async function的执行，等待Promise的处理完成 <ul><li>若Promise正常处理（fulfillded），其将回调的resolve函数参数作为await表达式的值，继续执行async function</li><li>若Promise处理异常（rejected），await表达式会把Promise异常原因抛出</li><li>另外如果await操作符后面的表达式不是一个Promise对象，则返回该值本身</li></ul></li></ul></li></ul><h1 id="fetch-api" tabindex="-1"><a class="header-anchor" href="#fetch-api" aria-hidden="true">#</a> Fetch Api</h1><h2 id="xmlhttprequest的问题" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest的问题" aria-hidden="true">#</a> XMLHttpRequest的问题</h2><ul><li>所有的功能全部集中在同一个对象上，容易书写出混乱不易维护的代码</li><li>采用传统的事件驱动模式，无法适配新的 Promise Api</li></ul><h2 id="fetch-api-的特点" tabindex="-1"><a class="header-anchor" href="#fetch-api-的特点" aria-hidden="true">#</a> Fetch Api 的特点</h2><ul><li>并非取代 AJAX，而是对 AJAX 传统 API 的改进</li><li>精细的功能分割：头部信息、请求信息、响应信息等均分布到不同的对象，更利于处理各种复杂的 AJAX 场景</li><li>使用 Promise Api，更利于异步代码的书写</li><li>Fetch Api 并非 ES6 的内容，属于 HTML5 新增的 Web Api</li><li>需要掌握网络通信的知识</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">upload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#avatar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>inp<span class="token punctuation">.</span>files<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;请选择需要上传的文件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;imagefile&#39;</span><span class="token punctuation">,</span> inp<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://101.132.72.36:5100/api/upload&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> formData
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#imgAvatar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> result<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2>`,35),m={href:"http://101.132.72.36:5100/api/local",target:"_blank",rel:"noopener noreferrer"},b=a('<p>使用 <code>fetch</code> 函数即可立即向服务器发送网络请求</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><p>该函数有两个参数：</p><ol><li>必填，字符串，请求地址</li><li>选填，对象，请求配置 <ul><li>method：字符串，请求方法，默认值GET</li><li>headers：对象，请求头信息</li><li>body: 请求体的内容，必须匹配请求头中的 Content-Type</li><li>mode：字符串，请求模式 <ul><li>cors：默认值，配置为该值，会在请求头中加入 origin 和 referer</li><li>no-cors：配置为该值，不会在请求头中加入 origin 和 referer，跨域的时候可能会出现问题</li><li>same-origin：指示请求必须在同一个域中发生，如果请求其他域，则会报错</li></ul></li><li>credentials: 如何携带凭据（cookie） <ul><li>omit：默认值，不携带cookie</li><li>same-origin：请求同源地址时携带cookie</li><li>include：请求任何地址都携带cookie</li></ul></li><li>cache：配置缓存模式 <ul><li>default: 表示fetch请求之前将检查下http的缓存.</li><li>no-store: 表示fetch请求将完全忽略http缓存的存在. 这意味着请求之前将不再检查下http的缓存, 拿到响应后, 它也不会更新http缓存.</li><li>no-cache: 如果存在缓存, 那么fetch将发送一个条件查询request和一个正常的request, 拿到响应后, 它会更新http缓存.</li><li>reload: 表示fetch请求之前将忽略http缓存的存在, 但是请求拿到响应后, 它将主动更新http缓存.</li><li>force-cache: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 除非没有任何缓存, 那么它将发送一个正常的request.</li><li>only-if-cached: 表示fetch请求不顾一切的依赖缓存, 即使缓存过期了, 它依然从缓存中读取. 如果没有缓存, 它将抛出网络错误(该设置只在mode为”same-origin”时有效).</li></ul></li></ul></li></ol><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><p>fetch 函数返回一个 Promise 对象</p><ul><li>当收到服务器的返回结果后，Promise 进入resolved状态，状态数据为 Response 对象</li><li>当网络发生错误（或其他导致无法完成交互的错误）时，Promise 进入 rejected 状态，状态数据为错误信息</li></ul><h4 id="response对象" tabindex="-1"><a class="header-anchor" href="#response对象" aria-hidden="true">#</a> Response对象</h4><ul><li>ok：boolean，当响应消息码在200~299之间时为true，其他为false</li><li>status：number，响应的状态码</li><li>text()：用于处理文本格式的 Ajax 响应。它从响应中获取文本流，将其读完，然后返回一个被解决为 string 对象的 Promise。</li><li>blob()：用于处理二进制文件格式（比如图片或者电子表格）的 Ajax 响应。它读取文件的原始数据，一旦读取完整个文件，就返回一个被解决为 blob 对象的 Promise。</li><li>json()：用于处理 JSON 格式的 Ajax 的响应。它将 JSON 数据流转换为一个被解决为 JavaScript 对象的promise。</li><li>redirect()：可以用于重定向到另一个 URL。它会创建一个新的 Promise，以解决来自重定向的 URL 的响应。</li></ul><h3 id="request-对象" tabindex="-1"><a class="header-anchor" href="#request-对象" aria-hidden="true">#</a> Request 对象</h3><ul><li>除了使用基本的fetch方法，还可以通过创建一个Request对象来完成请求（实际上，fetch的内部会帮你创建一个Request对象）<code>new Request(url地址, 配置)</code></li><li><strong>尽量保证每次请求都是一个新的Request对象</strong></li></ul><h3 id="headers-对象" tabindex="-1"><a class="header-anchor" href="#headers-对象" aria-hidden="true">#</a> Headers 对象</h3><ul><li>在Request和Response对象内部，会将传递的请求头对象，转换为Headers</li><li>Headers对象中的方法： <ul><li>has(key)：检查请求头中是否存在指定的key值</li><li>get(key): 得到请求头中对应的key值</li><li>set(key, value)：修改对应的键值对</li><li>append(key, value)：添加对应的键值对</li><li>keys(): 得到所有的请求头键的集合</li><li>values(): 得到所有的请求头中的值的集合</li><li>entries(): 得到所有请求头中的键值对的集合</li></ul></li></ul><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2><p>流程：</p><ol><li>客户端将文件数据发送给服务器</li><li>服务器保存上传的文件数据到服务器端</li><li>服务器响应给客户端一个文件访问地址</li></ol>',16),g={href:"http://101.132.72.36:5100/api/upload",target:"_blank",rel:"noopener noreferrer"},h=a(`<ul><li>请求方法：POST</li><li>请求的表单格式：（常用）multipart/form-data   没有严格规定</li><li>请求体中必须包含一个键值对，键的名称是服务器要求的名称，值是文件数据</li></ul><blockquote><p>HTML5中，JS仍然无法随意的获取文件数据，但是可以获取到input元素中，被用户选中的文件数据 可以利用HTML5提供的FormData构造函数来创建请求体 表单字段名需要和服务器进行约定</p></blockquote><h1 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h1><h2 id="背景知识" tabindex="-1"><a class="header-anchor" href="#背景知识" aria-hidden="true">#</a> 背景知识</h2><ul><li>什么是迭代？ <ul><li>从一个数据集合中按照一定的顺序，不断取出数据的过程</li></ul></li><li>迭代和遍历的区别？ <ul><li>迭代强调的是依次取数据，并不保证取多少，也不保证把所有的数据取完</li><li>遍历强调的是要把整个数据依次全部取出</li></ul></li><li>迭代器 <ul><li>对迭代过程的封装，在不同的语言中有不同的表现形式，通常为对象</li></ul></li><li>迭代模式 <ul><li>一种设计模式，用于统一迭代过程，并规范了迭代器规格： <ul><li>迭代器应该具有得到下一个数据的能力</li><li>迭代器应该具有判断是否还有后续数据的能力</li></ul></li></ul></li></ul><h2 id="js中的迭代器" tabindex="-1"><a class="header-anchor" href="#js中的迭代器" aria-hidden="true">#</a> JS中的迭代器</h2><ul><li>JS规定，如果一个对象具有next方法，并且该方法返回一个对象，该对象的格式如下： <ul><li><code>{value: 值, done: 是否迭代完成}</code></li></ul></li><li>则认为该对象是一个迭代器</li></ul><p>含义：</p><ul><li>next方法：用于得到下一个数据</li><li>返回的对象 <ul><li>value：下一个数据的值</li><li>done：boolean，是否迭代完成</li></ul></li></ul><h2 id="可迭代协议-与-for-of-循环" tabindex="-1"><a class="header-anchor" href="#可迭代协议-与-for-of-循环" aria-hidden="true">#</a> 可迭代协议 与 for-of 循环</h2><h3 id="可迭代协议" tabindex="-1"><a class="header-anchor" href="#可迭代协议" aria-hidden="true">#</a> 可迭代协议</h3><h4 id="概念回顾" tabindex="-1"><a class="header-anchor" href="#概念回顾" aria-hidden="true">#</a> 概念回顾</h4><ul><li>迭代器(iterator)：一个具有next方法的对象，next方法返回下一个数据并且能指示是否迭代完成</li><li>迭代器创建函数（iterator creator）：一个返回迭代器的函数</li></ul><h4 id="可迭代协议-1" tabindex="-1"><a class="header-anchor" href="#可迭代协议-1" aria-hidden="true">#</a> 可迭代协议</h4><p>ES6规定，如果一个对象具有知名符号属性<code>Symbol.iterator</code>，并且属性值是一个迭代器创建函数，则该对象是可迭代的（iterable）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> died <span class="token operator">=</span> divs<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> died<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> died<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-of-循环" tabindex="-1"><a class="header-anchor" href="#for-of-循环" aria-hidden="true">#</a> for-of 循环</h3><p>for-of 循环用于遍历可迭代对象，格式如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//迭代完成后循环结束</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">in</span> iterable<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//iterable：可迭代对象</span>
    <span class="token comment">//item：每次迭代得到的数据</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> divs<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="展开运算符与可迭代对象" tabindex="-1"><a class="header-anchor" href="#展开运算符与可迭代对象" aria-hidden="true">#</a> 展开运算符与可迭代对象</h2><p>展开运算符可以作用于可迭代对象，这样，就可以轻松的将可迭代对象转换为数组。</p><h1 id="生成器-generator" tabindex="-1"><a class="header-anchor" href="#生成器-generator" aria-hidden="true">#</a> 生成器 (Generator)</h1><ul><li>什么是生成器？ <ul><li>生成器是一个通过构造函数Generator创建的对象，生成器既是一个迭代器，同时又是一个可迭代对象</li></ul></li><li>如何创建生成器？ <ul><li>生成器的创建，必须使用生成器函数（Generator Function）</li></ul></li><li>如何书写一个生成器函数？</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//这是一个生成器函数，该函数一定返回一个生成器</span>
<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第一次&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第二次&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第三次&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token keyword">const</span> tex <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成器函数内部是如何执行的？ <ul><li>生成器函数内部是为了给生成器的每次迭代提供的数据</li><li>每次调用生成器的next方法，将导致生成器函数运行到下一个yield关键字位置</li><li>yield是一个关键字，该关键字只能在生成器函数内部使用，表达“产生”一个迭代数据</li></ul></li><li>有哪些需要注意的细节？ <ul><li>生成器函数可以有返回值，返回值出现在第一次done为true时的value属性中</li><li>调用生成器的next方法时，可以传递参数，传递的参数会交给yield表达式的返回值</li><li>第一次调用next方法时，传参没有任何意义</li><li>在生成器函数内部，可以调用其他生成器函数，但是要注意加上*号</li><li>生成器函数返回的一定是一个可迭代对象</li></ul></li><li>生成器的其他API <ul><li>return方法：调用该方法，可以提前结束生成器函数，从而提前让整个迭代过程结束</li><li>throw方法：调用该方法，可以在生成器中产生一个错误</li></ul></li></ul><h1 id="创建伪数组并使用数组方法" tabindex="-1"><a class="header-anchor" href="#创建伪数组并使用数组方法" aria-hidden="true">#</a> 创建伪数组并使用数组方法</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> elems <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 创建伪数组并使用数组方法，数组的本质就是一个对象</span>
    <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">gather</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">find</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
elems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elems<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> i <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> Set 集合</h1><blockquote><p>一直以来，JS只能使用数组和对象来保存多个数据，缺乏像其他语言那样拥有丰富的集合类型。因此，ES6新增了两种集合类型（set 和 map），用于在不同的场景中发挥作用。</p></blockquote><p><strong>set用于存放不重复的数据</strong></p><ul><li>如何创建set集合</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个没有任何内容的set集合</span>
<span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个具有初始内容的set集合，内容来自于可迭代对象每一次迭代的结果</span>
<span class="token comment">//数组去重</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//字符串去重</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;asdfasdescff132432343dfdssxswed&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;并集&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cross <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> arr2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;交集&#39;</span><span class="token punctuation">,</span>cross<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;差集&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> cross<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如何对set集合进行后续操作 <ul><li>add(数据): 添加一个数据到set集合末尾，如果数据已存在，则不进行任何操作 <ul><li>set使用Object.is的方式判断两个数据是否相同，但是，针对+0和-0，set认为是相等</li></ul></li><li>has(数据): 判断set中是否存在对应的数据</li><li>delete(数据)：删除匹配的数据，返回是否删除成功</li><li>clear()：清空整个set集合</li><li>size: 获取set集合中的元素数量，只读属性，无法重新赋值</li></ul></li><li>如何与数组进行相互转换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set本身也是一个可迭代对象，每次迭代的结果就是每一项的值</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如何遍历 <ul><li>使用for-of循环</li><li>使用set中的实例方法forEach</li></ul></li></ul><p>注意：set集合中不存在下标，因此forEach中的回调的第二个参数和第一个参数是一致的，均表示set中的每一项</p><h2 id="并集" tabindex="-1"><a class="header-anchor" href="#并集" aria-hidden="true">#</a> 并集</h2><p>把两个数组合并成同一个数据传入 Set 中求并集</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ninjas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Kuma&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yagyu&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> samurai <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Oda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tomoe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> warriors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>ninjas<span class="token punctuation">,</span> <span class="token operator">...</span>samurai<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 求并集</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>warriors<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="交集" tabindex="-1"><a class="header-anchor" href="#交集" aria-hidden="true">#</a> 交集</h2><p>求两个数组中相同的数据集合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ninjas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Kuma&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yagyu&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> samurai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Oda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tomoe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ninjaSamurais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token operator">...</span>ninjas<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">ninja</span> <span class="token operator">=&gt;</span> samurai<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>ninja<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 求交集</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninjaSamurais<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="差集" tabindex="-1"><a class="header-anchor" href="#差集" aria-hidden="true">#</a> 差集</h2><p>求 A、B 两个数组中只存在在 A 数组不存在在 B 数组的数据集合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ninjas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Kuma&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yagyu&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> samurai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Oda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tomoe&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> pureNinjas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token operator">...</span>ninjas<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">ninja</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>samurai<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>ninja<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 求差集</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pureNinjas<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="map集合" tabindex="-1"><a class="header-anchor" href="#map集合" aria-hidden="true">#</a> Map集合</h1><ul><li>键值对（key value pair）数据集合的特点：键不可重复</li><li>map集合专门用于存储多个键值对数据。</li><li>在map出现之前，我们使用的是对象的方式来存储键值对，键是属性名，值是属性值。</li><li>使用对象存储有以下问题： <ul><li>键名只能是字符串</li><li>获取数据的数量不方便</li><li>键名容易跟原型上的名称冲突</li></ul></li><li>如何创建map</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个空的map</span>
<span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个具有初始内容的map，初始内容来自于可迭代对象每一次迭代的结果，但是，它要求每一次迭代的结果必须是一个长度为2的数组，数组第一项表示键，数组的第二项表示值</span>
<span class="token keyword">let</span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如何进行后续操作 <ul><li>size：只读属性，获取当前map中键的数量</li><li>set(键, 值)：设置一个键值对，键和值可以是任何类型 <ul><li>如果键不存在，则添加一项</li><li>如果键已存在，则修改它的值</li><li>比较键的方式和set相同</li></ul></li><li>get(键): 根据一个键得到对应的值</li><li>has(键)：判断某个键是否存在</li><li>delete(键)：删除指定的键</li><li>clear(): 清空map</li></ul></li><li>和数组互相转换 <ul><li>和set一样</li></ul></li><li>遍历 <ul><li>for-of，每次迭代得到的是一个长度为2的数组</li><li>forEach，通过回调函数遍历 <ul><li>参数1：每一项的值</li><li>参数2：每一项的键</li><li>参数3：map本身</li></ul></li></ul></li></ul><h1 id="weakset-和-weakmap" tabindex="-1"><a class="header-anchor" href="#weakset-和-weakmap" aria-hidden="true">#</a> WeakSet 和 WeakMap</h1><h2 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset" aria-hidden="true">#</a> WeakSet</h2><p>使用该集合，可以实现和set一样的功能，不同的是：</p><ul><li><strong>它内部存储的对象地址不会影响垃圾回收</strong></li><li>只能添加对象</li><li>不能遍历（不是可迭代的对象）、没有size属性、没有forEach方法</li></ul><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap" aria-hidden="true">#</a> WeakMap</h2><p>类似于map的集合，不同的是：</p><ul><li><strong>它的键存储的地址不会影响垃圾回收</strong></li><li>它的键只能是对象</li><li>不能遍历（不是可迭代的对象）、没有size属性、没有forEach方法</li></ul><h1 id="属性描述符" tabindex="-1"><a class="header-anchor" href="#属性描述符" aria-hidden="true">#</a> 属性描述符</h1><ul><li>Property Descriptor 属性描述符  是一个普通对象，用于描述一个属性的相关信息</li><li>通过<code>Object.getOwnPropertyDescriptor(对象, &#39;属性名&#39;)</code>可以得到一个对象的某个属性的属性描述符</li><li>描述符： <ul><li>value：属性值</li><li>configurable：该属性的描述符是否可以修改</li><li>enumerable：该属性是否可以被枚举</li><li>writable：该属性是否可以被重新赋值</li></ul></li></ul><blockquote><p><code>Object.getOwnPropertyDescriptors(对象)</code>可以得到某个对象的所有属性描述符</p></blockquote><p>如果需要为某个对象添加属性时 或 修改属性时， 配置其属性描述符，可以使用下面的代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span> 属性名<span class="token punctuation">,</span> <span class="token punctuation">{</span>描述符<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span> <span class="token punctuation">{</span>多个属性的描述符 a<span class="token operator">:</span> <span class="token punctuation">{</span>描述符<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>描述符<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="存取器属性" tabindex="-1"><a class="header-anchor" href="#存取器属性" aria-hidden="true">#</a> 存取器属性</h1><ul><li>属性描述符中，如果配置了 get 和 set 中的任何一个，则该属性，不再是一个普通属性，而变成了存取器属性。</li><li>get 和 set配置均为函数，如果一个属性是存取器属性，则读取该属性时，会运行get方法，将get方法得到的返回值作为属性值；如果给该属性赋值，则会运行set方法。</li><li>存取器属性最大的意义，在于可以控制属性的读取和赋值。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> spanName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> spanAge <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> spanName<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        spanName<span class="token punctuation">.</span>innerText <span class="token operator">=</span> val<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">+</span>spanAge<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;年龄必须是一个数字&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          val <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        spanAge<span class="token punctuation">.</span>innerText <span class="token operator">=</span> val<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h1>`,65),y=a("<li>Reflect是什么？ <ul><li>Reflect是一个内置的JS对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些JS底层功能</li><li>由于它类似于其他语言的<strong>反射</strong>，因此取名为Reflect</li></ul></li><li>它可以做什么？ <ul><li>使用Reflect可以实现诸如 属性的赋值与取值、调用普通函数、调用构造函数、判断属性是否存在与对象中  等等功能</li></ul></li><li>这些功能不是已经存在了吗？为什么还需要用Reflect实现一次？ <ul><li>有一个重要的理念，在ES5就被提出：减少魔法、让代码更加纯粹</li><li>这种理念很大程度上是受到函数式编程的影响</li><li>ES6进一步贯彻了这种理念，它认为，对属性内存的控制、原型链的修改、函数的调用等等，这些都属于底层实现，属于一种魔法，因此，需要将它们提取出来，形成一个正常的API，并高度聚合到某个对象中，于是，就造就了Reflect对象</li><li>因此，你可以看到Reflect对象中有很多的API都可以使用过去的某种语法或其他API实现。</li></ul></li>",3),f=n("li",null,"Reflect.set(target, propertyKey, value): 设置对象target的属性propertyKey的值为value，等同于给对象的属性赋值",-1),w=n("li",null,"Reflect.get(target, propertyKey): 读取对象t arget的属性propertyKey，等同于读取对象的属性值",-1),j=n("li",null,"Reflect.apply(target, thisArgument, argumentsList)：调用一个指定的函数，并绑定this和参数列表。等同于函数调用",-1),x=n("li",null,"Reflect.deleteProperty(target, propertyKey)：删除一个对象的属性",-1),q=n("li",null,"Reflect.defineProperty(target, propertyKey, attributes)：类似于Object.defineProperty，不同的是如果配置出现问题，返回false而不是报错",-1),P=n("li",null,"Reflect.construct(target, argumentsList)：用构造函数的方式创建一个对象",-1),S=n("li",null,"Reflect.has(target, propertyKey): 判断一个对象是否拥有一个属性",-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect",target:"_blank",rel:"noopener noreferrer"},E=a(`<h1 id="proxy-代理" tabindex="-1"><a class="header-anchor" href="#proxy-代理" aria-hidden="true">#</a> Proxy 代理</h1><p>代理：提供了修改底层实现的方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//代理一个目标对象</span>
<span class="token comment">//target：目标对象</span>
<span class="token comment">//handler：是一个普通对象，其中可以重写底层实现</span>
<span class="token comment">//返回一个代理对象</span>
<span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(target, propertyKey, value);</span>
    <span class="token comment">// target[propertyKey] = value;</span>
    Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propertyKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(proxy);</span>
<span class="token comment">// proxy.a = 10;</span>
<span class="token comment">// console.log(proxy.a);</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span> <span class="token keyword">in</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> objPro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span> <span class="token literal-property property">receiver</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
        <span class="token keyword">return</span> key <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
objPro<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;this&#39;</span>
objPro<span class="token punctuation">.</span>name
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objPro<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将一个对象修改为代理对象" tabindex="-1"><a class="header-anchor" href="#将一个对象修改为代理对象" aria-hidden="true">#</a> 将一个对象修改为代理对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeLoggable</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> ninja <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Yoshi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 该对象依旧活跃，只不过被代理对象给代理了</span>
ninja <span class="token operator">=</span> <span class="token function">makeLoggable</span><span class="token punctuation">(</span>ninja<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取代理对象，vue3的响应式原理</span>

ninja<span class="token punctuation">.</span>weapon <span class="token operator">=</span> <span class="token string">&quot;sword&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用代理记录日志" tabindex="-1"><a class="header-anchor" href="#使用代理记录日志" aria-hidden="true">#</a> 使用代理记录日志</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeLoggable</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">&#39;的属性被访问了！&#39;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&#39;次&#39;</span><span class="token punctuation">)</span>
            count<span class="token operator">++</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">&#39;的&#39;</span> <span class="token operator">+</span> property <span class="token operator">+</span> <span class="token string">&#39;属性的值从&#39;</span> <span class="token operator">+</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;被修改为&#39;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span>
            target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> ninja <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Yoshi&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
ninja <span class="token operator">=</span> <span class="token function">makeLoggable</span><span class="token punctuation">(</span>ninja<span class="token punctuation">)</span><span class="token punctuation">;</span>

ninja<span class="token punctuation">.</span>weapon <span class="token operator">=</span> <span class="token string">&quot;sword&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninja<span class="token punctuation">,</span> ninja<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ninja<span class="token punctuation">.</span>weapon<span class="token punctuation">,</span> ninja<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ninja<span class="token punctuation">.</span>weapon<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用代理包装函数并评估性能" tabindex="-1"><a class="header-anchor" href="#使用代理包装函数并评估性能" aria-hidden="true">#</a> 使用代理包装函数并评估性能</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 原函数，调用原函数时的this指向，参数数组</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;isPrime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">target</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;isPrime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token number">1299827</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用代理自动填充属性" tabindex="-1"><a class="header-anchor" href="#使用代理自动填充属性" aria-hidden="true">#</a> 使用代理自动填充属性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Folder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>property <span class="token keyword">in</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果属性不存在就创建属性</span>
                target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rootFolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rootFolder<span class="token punctuation">.</span>ninjasDir<span class="token punctuation">.</span>firstNinjaDir<span class="token punctuation">.</span>ninjaFile <span class="token operator">=</span> <span class="token string">&quot;yoshi.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 层层读取，读取到最后一个转为设置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootFolder<span class="token punctuation">)</span> <span class="token comment">// { ninjasDir: { firstNinjaDir: { ninjaFile: &#39;yoshi.txt&#39; } } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理中没有设置-getter-和-setter-时默认使用对象的读取和赋值操作" tabindex="-1"><a class="header-anchor" href="#代理中没有设置-getter-和-setter-时默认使用对象的读取和赋值操作" aria-hidden="true">#</a> 代理中没有设置 getter 和 setter 时默认使用对象的读取和赋值操作</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
objPro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span> objPro<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 2, 2</span>
objPro<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span> objPro<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 3, 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用代理实现数组的负索引" tabindex="-1"><a class="header-anchor" href="#使用代理实现数组的负索引" aria-hidden="true">#</a> 使用代理实现数组的负索引</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createNegativeArrayProxy</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Expected an array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
            index <span class="token operator">=</span> <span class="token operator">+</span>index<span class="token punctuation">;</span> <span class="token comment">// 使用一元操作符 + 将字符串索引改为数字</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> target<span class="token punctuation">.</span>length <span class="token operator">+</span> index <span class="token operator">:</span> index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 根据正负下标获取数据</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
            index <span class="token operator">=</span> <span class="token operator">+</span>index<span class="token punctuation">;</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> target<span class="token punctuation">.</span>length <span class="token operator">+</span> index <span class="token operator">:</span> index<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> ninjas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Yoshi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kuma&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hattori&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ninjas <span class="token operator">=</span> <span class="token function">createNegativeArrayProxy</span><span class="token punctuation">(</span>ninjas<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ninjas<span class="token punctuation">,</span> ninjas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ninjas<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ninjas<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用代理实现观察者模式" tabindex="-1"><a class="header-anchor" href="#使用代理实现观察者模式" aria-hidden="true">#</a> 使用代理实现观察者模式</h2><p>有一个对象，是观察者，它用于观察另外一个对象的属性值变化，当属性值变化后会收到一个通知，可能会做一些事。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token comment">//创建一个观察者</span>
  <span class="token keyword">function</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                    &lt;p&gt;&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">：&lt;/span&gt;&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;&lt;/p&gt;
                </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">observer</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">//构造函数模型</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
      <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

      <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">ConstructorProxy</span><span class="token punctuation">(</span><span class="token parameter">Class<span class="token punctuation">,</span> <span class="token operator">...</span>propNames</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> argumentsList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> obj <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argumentsList<span class="token punctuation">)</span>
      propNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> argumentsList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> UserProxy <span class="token operator">=</span> <span class="token function">ConstructorProxy</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserProxy</span><span class="token punctuation">(</span><span class="token string">&quot;袁&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;进&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Monster</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> MonsterProxy <span class="token operator">=</span> <span class="token function">ConstructorProxy</span><span class="token punctuation">(</span>Monster<span class="token punctuation">,</span> <span class="token string">&quot;attack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defence&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MonsterProxy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&quot;怪物&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">//验证函数参数</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">validatorFunction</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>types</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>argumentsList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    types<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> arg <span class="token operator">=</span> argumentsList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">!==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">个参数</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>argumentsList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">不满足类型</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>argumentsList<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> sumProxy <span class="token operator">=</span> <span class="token function">validatorFunction</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="新增的数组api" tabindex="-1"><a class="header-anchor" href="#新增的数组api" aria-hidden="true">#</a> 新增的数组API</h1><h2 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h2><ul><li>Array.of(...args): 使用指定的数组项创建一个新数组</li><li>Array.from(arg): 通过给定的类数组 或 可迭代对象 创建一个新的数组。</li></ul><h2 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h2><ul><li>find(callback): 用于查找满足条件的第一个元素</li><li>findIndex(callback)：用于查找满足条件的第一个元素的下标</li><li>fill(data)：用指定的数据填充满数组所有的内容</li><li>copyWithin(target, start?, end?): 在数组内部完成复制,从目标下标开始改变，从开始位置进行复制，在结束位置复制停止，后两个参数可以不传，默认从头复制，复制到目标下标前一个数据</li><li>includes(data)：判断数组中是否包含某个值，使用Object.is匹配</li></ul><h2 id="类型化数组" tabindex="-1"><a class="header-anchor" href="#类型化数组" aria-hidden="true">#</a> 类型化数组</h2><h3 id="数字存储的前置知识" tabindex="-1"><a class="header-anchor" href="#数字存储的前置知识" aria-hidden="true">#</a> 数字存储的前置知识</h3><ul><li>计算机必须使用固定的位数来存储数字，无论存储的数字是大是小，在内存中占用的空间是固定的。</li><li>n位的无符号整数能表示的数字是2^n个，取值范围是：0 ~ 2^n - 1</li><li>n位的有符号整数能表示的数字是2n个，取值范围是：-2(n-1) ~ 2^(n-1) - 1</li><li>浮点数表示法可以用于表示整数和小数，目前分为两种标准： <ul><li>32位浮点数：又称为单精度浮点数，它用1位表示符号，8位表示阶码，23位表示尾数</li><li>64位浮点数：又称为双精度浮点数，它用1位表示符号，11位表示阶码，52位表示尾数</li></ul></li><li>JS中的所有数字，均使用双精度浮点数保存</li></ul><h3 id="类型化数组-1" tabindex="-1"><a class="header-anchor" href="#类型化数组-1" aria-hidden="true">#</a> 类型化数组</h3><ul><li>类型化数组：用于优化多个数字的存储，只针对数字</li><li>具体分为： <ul><li>Int8Array： 8位有符号整数（-128 ~ 127）</li><li>Uint8Array： 8位无符号整数（0 ~ 255）</li><li>Int16Array: ...</li><li>Uint16Array: ...</li><li>Int32Array: ...</li><li>Uint32Array: ...</li><li>Float32Array:</li><li>Float64Array</li></ul></li><li>如何创建数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token function">数组构造函数</span><span class="token punctuation">(</span>长度<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
数组构造函数<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>元素<span class="token operator">...</span><span class="token punctuation">)</span>
Int8Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">)</span>
数组构造函数<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>可迭代对象<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token function">数组构造函数</span><span class="token punctuation">(</span>其他类型化数组<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>得到长度 <ul><li>数组.length //得到元素数量</li><li>数组.byteLength //得到占用的字节数</li></ul></li><li>其他的用法跟普通数组一致，但是： <ul><li>不能增加和删除数据，类型化数组的长度固定</li><li>一些返回数组的方法，返回的数组是同类型化的新数组</li></ul></li></ul><h1 id="arraybuffer" tabindex="-1"><a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a> ArrayBuffer</h1><p>ArrayBuffer：一个对象，用于存储一块固定内存大小的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>字节数<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 存储10个字节的空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过属性<code>byteLength</code>得到字节数，可以通过方法<code>slice</code>得到新的ArrayBuffer</p><h2 id="读写arraybuffer" tabindex="-1"><a class="header-anchor" href="#读写arraybuffer" aria-hidden="true">#</a> 读写ArrayBuffer</h2><ul><li>使用DataView <ul><li>通常会在需要混用多种存储格式时使用DataView<code>new DataView(字节数,偏移量，操作的数量 )</code></li></ul></li><li>使用类型化数组 <ul><li>实际上，每一个类型化数组都对应一个ArrayBuffer，如果没有手动指定ArrayBuffer，类型化数组创建时，会新建一个ArrayBuffer</li></ul></li></ul>`,37);function O(_,N){const t=c("ExternalLinkIcon");return l(),i("div",null,[r,p(" ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2675710/1644480687145-4f811ab3-9414-4c27-a7f9-5ec6b916bb0a.png#averageHue=%23c7d5ed&clientId=u0a22fc2b-3616-4&from=paste&height=297&id=u67ab9809&name=image.png&originHeight=297&originWidth=956&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17550&status=done&style=none&taskId=ud5a592a8-8f3e-4169-bf3b-b9560c4a4da&title=&width=956) "),k,p(" ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2675710/1644480930734-17fb4592-9cd4-4828-9f94-d3d13abdd343.png#averageHue=%23ed8037&clientId=u0a22fc2b-3616-4&from=paste&height=617&id=uf07107c9&name=image.png&originHeight=617&originWidth=1238&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79623&status=done&style=none&taskId=ud3b326df-08af-4405-b759-e4cb9f53eb2&title=&width=1238) "),d,p(" ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2675710/1644481075275-70215511-94e8-4990-a696-605683fcc823.png#averageHue=%23e69d63&clientId=u0a22fc2b-3616-4&from=paste&height=647&id=uef9493e7&name=image.png&originHeight=647&originWidth=1237&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98202&status=done&style=none&taskId=udc0f03d3-4ce0-4c3c-9f8e-ff0b2d064b3&title=&width=1237) "),v,n("blockquote",null,[n("p",null,[s("请求测试地址："),n("a",m,[s("http://101.132.72.36:5100/api/local"),e(t)])])]),b,n("blockquote",null,[n("p",null,[s("测试地址："),n("a",g,[s("http://101.132.72.36:5100/api/upload"),e(t)]),s(" 键的名称（表单域名称）：imagefile")])]),h,n("ul",null,[y,n("li",null,[s("它里面到底提供了哪些API呢？ "),n("ul",null,[f,w,j,x,q,P,S,n("li",null,[s("其他API："),n("a",A,[s("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect"),e(t)])])])])]),E])}const $=o(u,[["render",O],["__file","ES6学习.html.vue"]]);export{$ as default};
